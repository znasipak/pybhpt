name: Run tests and build

on:
    push:
      branches:
        - feature-pyproject
        - main
    release:
      types:
        - published

jobs:
  # build_and_run_tests:
  #   name: Build and run unit tests
  #   runs-on: ${{ matrix.os }}
  #   defaults:
  #     run:
  #       shell: bash -el {0}
  #   strategy:
  #     matrix:
  #       # macos-13 is an intel runner, macos-14 is apple silicon
  #       # os: [ubuntu-latest, macos-13, macos-14]
  #       os: [ubuntu-latest, macos-14]
  #   env:
  #     # Indicates the location of the vcpkg as a Git submodule of the project repository.
  #     # Not using "VCPKG_ROOT" because a variable with the same name is defined in the VS's
  #     # Developer Command Prompt environment in VS 2022 17.6, which would override this one
  #     # if it had the same name.
  #     _VCPKG_: ${{ github.workspace }}/vcpkg
  #     # Tells vcpkg where binary packages are stored.
  #     VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
  #     # Let's use GitHub Action cache as storage for the vcpkg Binary Caching feature.
  #     VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
  
  #   steps:
  #     # Set env vars needed for vcpkg to leverage the GitHub Action cache as a storage
  #     # for Binary Caching.
  #     - uses: actions/github-script@v7
  #       with:
  #         script: |
  #           core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
  #           core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
  #       run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
  #       shell: bash

  #     - name: Restore vcpkg
  #       uses: actions/cache@v4
  #       with:
  #         # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
  #         # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
  #         # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
  #         path: |
  #           ${{ env._VCPKG_ }}
  #           !${{ env._VCPKG_ }}/buildtrees
  #           !${{ env._VCPKG_ }}/packages
  #           !${{ env._VCPKG_ }}/downloads
  #           !${{ env._VCPKG_ }}/installed
  #         # The key is composed in a way that it gets properly invalidated whenever a different version of vcpkg is being used.
  #         key: |
  #           vcpkg-${{ runner.os }}-${{ hashFiles('.git/modules/vcpkg/HEAD') }}

  #     - name: Set up install script
  #       run: |
  #         ${{ env._VCPKG_ }}/bootstrap-vcpkg.sh -disableMetrics 
  #         cp pyproject-vcpkg.toml pyproject.toml

  #     - name: Install package and run tests
  #       run: |
  #         python -m venv venv
  #         source venv/bin/activate
  #         python -m pip install .
  #         # python -m unittest discover  # Uncomment to run tests    

  build_wheels:
    # needs: build_and_run_tests
    name: Build wheels on ${{ matrix.os }} ${{ matrix.arch_linux }} ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14]
        include:
          - os: ubuntu-latest
            arch_linux: x86_64
            cibw_skip: pp* *manylinux*
            target: musllinux
            vcpkg_triplet: x64-linux-musl
            cibw_before_all: apk add zip
          - os: ubuntu-latest
            arch_linux: i686
            cibw_skip: pp* *manylinux*
            target: musllinux
            vcpkg_triplet: x86-linux
            cibw_before_all: apk add zip
          - os: ubuntu-latest
            arch_linux: x86_64
            cibw_skip: pp* *musllinux*
            target: manylinux
            vcpkg_triplet: x64-linux
            cibw_before_all: yum install -y zip || (apt-get update && apt-get install -y zip)
          - os: ubuntu-latest
            arch_linux: i686
            cibw_skip: pp* *musllinux*
            target: manylinux
            vcpkg_triplet: x86-linux
            cibw_before_all: yum install -y zip || (apt-get update && apt-get install -y zip)
          - os: ubuntu-latest
            arch_linux: aarch64
            cibw_skip: pp* *musllinux*
            target: manylinux
            vcpkg_triplet: arm64-linux
            cibw_before_all: yum install -y zip || (apt-get update && apt-get install -y zip)
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      # Not using "VCPKG_ROOT" because a variable with the same name is defined in the VS's
      # Developer Command Prompt environment in VS 2022 17.6, which would override this one
      # if it had the same name.
      _VCPKG_: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      # Let's use GitHub Action cache as storage for the vcpkg Binary Caching feature.
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
      # <-- tell vcpkg exactly which triplet to use:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.vcpkg_triplet }}
      VCPKG_TARGET_TRIPLET: ${{ matrix.vcpkg_triplet }}

    steps:
      # Set env vars needed for vcpkg to leverage the GitHub Action cache as a storage
      # for Binary Caching.
      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      
      - uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      - name: Restore vcpkg
        uses: actions/cache@v4
        with:
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
          # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env._VCPKG_ }}
            !${{ env._VCPKG_ }}/buildtrees
            !${{ env._VCPKG_ }}/packages
            !${{ env._VCPKG_ }}/downloads
            !${{ env._VCPKG_ }}/installed
          # The key is composed in a way that it gets properly invalidated whenever a different version of vcpkg is being used.
          key: |
            vcpkg-${{ runner.os }}-${{ hashFiles('.git/modules/vcpkg/HEAD') }}

      - name: Set up install script
        run: |
          ${{ env._VCPKG_ }}/bootstrap-vcpkg.sh -disableMetrics 
          cp pyproject-vcpkg.toml pyproject.toml

      - name: Build wheels (Linux ${{ matrix.arch_linux }}-${{ matrix.target }} )
        if: ${{ matrix.arch_linux }}
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          # CIBW_BEFORE_ALL is a CIBW environment variable that allows to run commands before the build starts.
          # It is used here to install zip, which is needed by cibuildwheel to create the wheel files.
          # The command is run only on Linux, because macOS runners already have zip installed.
          # The command is run before the build starts, so it is not needed to run it in the cibuildwheel config.
          CIBW_BEFORE_ALL: >
            ${{ matrix.cibw_before_all }} &&
          CIBW_BEFORE_BUILD: >
            bash /project/vcpkg/bootstrap-vcpkg.sh -disableMetrics &&
          CIBW_SKIP: ${{ matrix.cibw_skip }}
          CIBW_ARCHS_LINUX: ${{ matrix.arch_linux }}
      
      - name: Build wheels (macOS)
        if: runner.os == 'macOS'
        uses: pypa/cibuildwheel@v2.22.0

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
            name: cibw-sdist
            path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # repository-url: https://test.pypi.org/legacy/
          verbose: true

  upload_testpypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: testpypi
    permissions:
      id-token: write
    if: github.event_name == 'push'

    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

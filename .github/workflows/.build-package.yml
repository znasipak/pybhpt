name: Run tests and build

on:
    push:
      branches:
        - feature-pyproject
        - main
    release:
      types:
        - published

jobs:
  build_and_run_tests:
    name: Build and run unit tests
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        # os: [ubuntu-latest, macos-13, macos-14]
        os: [ubuntu-latest, macos-14]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false  # do NOT checkout submodules here, we'll handle them manually

      - name: Get Boost submodule commit
        id: boost_commit
        run: echo "boost_commit=$(git rev-parse HEAD:extern/boost)" >> $GITHUB_OUTPUT

      - name: Cache Boost headers build
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: extern/boost
          key: boost-${{ runner.os }}-${{ steps.boost_commit.outputs.boost_commit }}

      - name: Cleanup Boost git submodule metadata of cache hit
        if: steps.cache-boost.outputs.cache-hit == 'true'
        run: rm -rf .git/modules/extern/boost || true

      - name: Fully update Boost submodule if cache miss
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive extern/boost
          cd extern/boost
          chmod +x bootstrap.sh
          ./bootstrap.sh
          ./b2 headers

  #     - name: Install package and run tests
  #       run: |
  #         python -m venv venv
  #         source venv/bin/activate
  #         python -m pip install .
  #         # python -m unittest discover  # Uncomment to run tests    

  build_wheels:
    needs: build_and_run_tests
    name: Build wheels on ${{ matrix.os }} ${{ matrix.arch_linux }} ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # TODO: Add musllinux support
          # - os: ubuntu-latest
          #   arch_linux: x86_64
          #   cibw_skip: pp* *manylinux*
          #   target: musllinux
          #   vcpkg_triplet: x64-linux-musl
          #   cibw_before_all: apk add zip
          # - os: ubuntu-latest
          #   arch_linux: i686
          #   cibw_skip: pp* *manylinux*
          #   target: musllinux
          #   vcpkg_triplet: x86-linux
          #   cibw_before_all: apk add zip
          - os: ubuntu-latest
            arch_linux: x86_64
            cibw_skip: pp* *musllinux*
            target: manylinux
            vcpkg_triplet: x64-linux
            cibw_before_build: yum install -y gsl-devel=2.7.1 || (apt-get update && apt-get install -y libgsl-dev=2.7.1)
          - os: ubuntu-latest
            arch_linux: i686
            cibw_skip: pp* *musllinux*
            target: manylinux
            vcpkg_triplet: x86-linux
            cibw_before_build: yum install -y gsl-devel=2.7.1 || (apt-get update && apt-get install -y libgsl-dev=2.7.1)
          - os: ubuntu-latest
            arch_linux: aarch64
            cibw_skip: pp* *musllinux*
            target: manylinux
            vcpkg_triplet: arm64-linux
            cibw_before_build: yum install -y gsl-devel=2.7.1 || (apt-get update && apt-get install -y libgsl-dev=2.7.1)
          - os: macos-14
            cibw_before_build: (brew update && brew install gsl)
    env:
      # CIBW_BEFORE_BUILD: bash /project/build_gsl.sh
      # CIBW_ENVIRONMENT: CMAKE_PREFIX_PATH=/project/gsl-install
      CIBW_BEFORE_BUILD: ${{ matrix.cibw_before_build }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false  # do NOT checkout submodules here, we'll handle them manually

      - name: Get Boost submodule commit
        id: boost_commit
        run: echo "boost_commit=$(git rev-parse HEAD:extern/boost)" >> $GITHUB_OUTPUT

      - name: Cache Boost headers build
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: extern/boost
          key: boost-${{ runner.os }}-${{ steps.boost_commit.outputs.boost_commit }}

      - name: Cleanup Boost git submodule metadata of cache hit
        if: steps.cache-boost.outputs.cache-hit == 'true'
        run: rm -rf .git/modules/extern/boost || true

      - name: Fully update Boost submodule if cache miss
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive extern/boost
          cd extern/boost
          chmod +x bootstrap.sh
          ./bootstrap.sh
          ./b2 headers
      
      - name: Build wheels (Linux ${{ matrix.arch_linux }}-${{ matrix.target }} )
        if: ${{ matrix.arch_linux }}
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_SKIP: ${{ matrix.cibw_skip }}
          CIBW_ARCHS_LINUX: ${{ matrix.arch_linux }}
      
      - name: Build wheels (macOS)
        if: runner.os == 'macOS'
        uses: pypa/cibuildwheel@v2.22.0

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
            name: cibw-sdist
            path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # repository-url: https://test.pypi.org/legacy/
          verbose: true

  upload_testpypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: testpypi
    permissions:
      id-token: write
    if: github.event_name == 'push'

    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

name: Run tests and build

on:
    push:
      branches:
        - feature-pyproject
        - main
    release:
      types:
        - published

jobs:
  # build_and_run_tests:
  #   name: Build and run unit tests
  #   runs-on: ${{ matrix.os }}
  #   defaults:
  #     run:
  #       shell: bash -el {0}
  #   strategy:
  #     matrix:
  #       # macos-13 is an intel runner, macos-14 is apple silicon
  #       # os: [ubuntu-latest, macos-13, macos-14]
  #       os: [ubuntu-latest, macos-14]
  
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: Install package and run tests
  #       run: |
  #         python -m venv venv
  #         source venv/bin/activate
  #         python -m pip install .
  #         # python -m unittest discover  # Uncomment to run tests    

  build_wheels:
    # needs: build_and_run_tests
    name: Build wheels on ${{ matrix.os }} ${{ matrix.arch_linux }} ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14, macos-13]
        include:
          # TODO: Add musllinux support
          # - os: ubuntu-latest
          #   arch_linux: x86_64
          #   cibw_skip: pp* *manylinux*
          #   target: musllinux
          #   vcpkg_triplet: x64-linux-musl
          #   cibw_before_all: apk add zip
          # - os: ubuntu-latest
          #   arch_linux: i686
          #   cibw_skip: pp* *manylinux*
          #   target: musllinux
          #   vcpkg_triplet: x86-linux
          #   cibw_before_all: apk add zip
          - os: ubuntu-latest
            arch_linux: x86_64
            cibw_skip: pp* *musllinux*
            target: manylinux
            vcpkg_triplet: x64-linux
            cibw_before_all: yum install -y zip || (apt-get update && apt-get install -y zip)
          - os: ubuntu-latest
            arch_linux: i686
            cibw_skip: pp* *musllinux*
            target: manylinux
            vcpkg_triplet: x86-linux
            cibw_before_all: yum install -y zip || (apt-get update && apt-get install -y zip)
          - os: ubuntu-latest
            arch_linux: aarch64
            cibw_skip: pp* *musllinux*
            target: manylinux
            vcpkg_triplet: arm64-linux
            cibw_before_all: yum install -y zip || (apt-get update && apt-get install -y zip)

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      # - name: Set up QEMU
      #   if: runner.os == 'Linux'
      #   uses: docker/setup-qemu-action@v3
      #   with:
      #     platforms: all

      # Cache Boost headers build (b2 headers)
      - name: Cache Boost headers build
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: extern/boost/boost # b2 headers output directory
          key: boost-headers-${{ runner.os }}-${{ hashFiles('extern/boost/bootstrap.sh', 'extern/boost/libs/**/include/**') }}

      - name: Build Boost headers
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          cd extern/boost
          chmod +x bootstrap.sh
          ./bootstrap.sh
          ./b2 headers
        shell: bash

              # Cache GSL installation
      - name: Cache GSL installation
        id: cache-gsl
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/include/gsl
            /usr/local/lib/libgsl*
          key: gsl-install-${{ runner.os }}-${{ hashFiles('path/to/gsl-source/**') }}
      
      - name: Install GSL on Linux
        if: runner.os == 'Linux' && steps.cache-gsl.outputs.cache-hit != 'true'
        run: |
          set -e
          if command -v apt-get >/dev/null; then
            sudo apt-get update
            sudo apt-get install -y libgsl-dev
          elif command -v yum >/dev/null; then
            sudo yum install -y gsl-devel
          elif command -v apk >/dev/null; then
            sudo apk add --no-cache gsl-dev
          else
            echo "No supported package manager found for GSL installation"
            exit 1
          fi
        shell: bash

      - name: Install GSL on macOS
        if: runner.os == 'macOS' && steps.cache-gsl.outputs.cache-hit != 'true'
        run: |
          brew update
          brew install gsl
        shell: bash
      
      - name: Build wheels (Linux ${{ matrix.arch_linux }}-${{ matrix.target }} )
        if: ${{ matrix.arch_linux }}
        uses: pypa/cibuildwheel@v2.22.0
        env:
          # CIBW_BEFORE_ALL is a CIBW environment variable that allows to run commands before the build starts.
          # It is used here to install zip, which is needed by cibuildwheel to create the wheel files.
          # The command is run only on Linux, because macOS runners already have zip installed.
          # The command is run before the build starts, so it is not needed to run it in the cibuildwheel config.
          CIBW_BEFORE_ALL: ${{ matrix.cibw_before_all }}
          CIBW_SKIP: ${{ matrix.cibw_skip }}
          CIBW_ARCHS_LINUX: ${{ matrix.arch_linux }}
      
      - name: Build wheels (macOS)
        if: runner.os == 'macOS'
        uses: pypa/cibuildwheel@v2.22.0

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
            name: cibw-sdist
            path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # repository-url: https://test.pypi.org/legacy/
          verbose: true

  upload_testpypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: testpypi
    permissions:
      id-token: write
    if: github.event_name == 'push'

    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

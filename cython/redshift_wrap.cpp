/* Generated by Cython 0.29.32 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/Users/zachnasipak/opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/Users/zachnasipak/opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/core/include/numpy/arrayscalars.h",
            "/Users/zachnasipak/opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/core/include/numpy/ndarrayobject.h",
            "/Users/zachnasipak/opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/core/include/numpy/ndarraytypes.h",
            "/Users/zachnasipak/opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "cpp/include/fluxes.hpp",
            "cpp/include/geo.hpp",
            "cpp/include/hertz.hpp",
            "cpp/include/metric.hpp",
            "cpp/include/metriccoeffs.hpp",
            "cpp/include/radialsolver.hpp",
            "cpp/include/redshift.hpp",
            "cpp/include/teukolsky.hpp",
            "cpp/include/unit_test.hpp"
        ],
        "include_dirs": [
            "cpp/include",
            "/Users/zachnasipak/opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "libraries": [
            "gsl",
            "gslcblas",
            "boost_filesystem",
            "omp"
        ],
        "name": "cybhpt_full",
        "sources": [
            "cython/redshift_wrap.pyx",
            "cpp/src/unit_test.cpp",
            "cpp/src/redshift.cpp",
            "cpp/src/mst.cpp",
            "cpp/src/sourceintegration.cpp",
            "cpp/src/bessel.cpp",
            "cpp/src/utils.cpp",
            "cpp/src/kerr.cpp",
            "cpp/src/gsn_asymp.cpp",
            "cpp/src/swsh.cpp",
            "cpp/src/teukolsky.cpp",
            "cpp/src/monodromy.cpp",
            "cpp/src/metric.cpp",
            "cpp/src/specialfunc.cpp",
            "cpp/src/metriccoeffs.cpp",
            "cpp/src/hertz.cpp",
            "cpp/src/hypergeo_f.cpp",
            "cpp/src/radialsolver.cpp",
            "cpp/src/nusolver.cpp",
            "cpp/src/cf.cpp",
            "cpp/src/hypergeo_u.cpp",
            "cpp/src/geo.cpp",
            "cpp/src/fluxes.cpp"
        ]
    },
    "module_name": "cybhpt_full"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cybhpt_full
#define __PYX_HAVE_API__cybhpt_full
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <complex>
#include <string.h>
#include <string>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "geo.hpp"
#include "radialsolver.hpp"
#include "teukolsky.hpp"
#include "hertz.hpp"
#include "metriccoeffs.hpp"
#include "fluxes.hpp"
#include "redshift.hpp"
#include "unit_test.hpp"
#include "metric.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "cython/geo_wrap.pyx",
  "stringsource",
  "cython/radialsolver_wrap.pyx",
  "cython/teukolsky_wrap.pyx",
  "cython/flux_wrap.pyx",
  "cython/redshift_wrap.pyx",
  "__init__.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":690
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":691
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":693
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":697
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":698
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":700
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":704
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":705
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":714
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":715
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":716
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":720
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":722
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":723
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_11cybhpt_full_KerrGeodesic;
struct __pyx_obj_11cybhpt_full_RadialTeukolsky;
struct __pyx_obj_11cybhpt_full_TeukolskyMode;
struct __pyx_obj_11cybhpt_full_HertzMode;
struct __pyx_obj_11cybhpt_full_MetricModeGenerator;
struct __pyx_obj_11cybhpt_full_FluxList;
struct __pyx_obj_11cybhpt_full_RedshiftCoefficients;
struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":730
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":733
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "cython/geo_wrap.pyx":115
 *     return kerr_geo_VphiTheta(a, En, Lz, Q, theta)
 * 
 * cdef class KerrGeodesic:             # <<<<<<<<<<<<<<
 *     cdef GeodesicSource *geocpp
 *     cdef int nsamplescpp
 */
struct __pyx_obj_11cybhpt_full_KerrGeodesic {
  PyObject_HEAD
  struct __pyx_vtabstruct_11cybhpt_full_KerrGeodesic *__pyx_vtab;
  GeodesicSource *geocpp;
  int nsamplescpp;
};


/* "cython/radialsolver_wrap.pyx":97
 *     return teukolsky_starobinsky_constant(s, m, a, omega, lambdaCH)
 * 
 * cdef class RadialTeukolsky:             # <<<<<<<<<<<<<<
 *     cdef RadialTeukolskyCPP *teukcpp
 * 
 */
struct __pyx_obj_11cybhpt_full_RadialTeukolsky {
  PyObject_HEAD
  RadialTeukolsky *teukcpp;
};


/* "cython/teukolsky_wrap.pyx":160
 *         TypeError("{} is not a supported gauge.".format(gauge_str))
 * 
 * cdef class TeukolskyMode:             # <<<<<<<<<<<<<<
 *     cdef TeukolskyModeCPP *teukcpp
 *     cdef int sampleR
 */
struct __pyx_obj_11cybhpt_full_TeukolskyMode {
  PyObject_HEAD
  TeukolskyMode *teukcpp;
  int sampleR;
  int sampleTh;
};


/* "cython/teukolsky_wrap.pyx":291
 *         self.teukcpp.flipSpinWeight()
 * 
 * cdef class HertzMode:             # <<<<<<<<<<<<<<
 *     cdef HertzModeCPP *hertzcpp
 *     cdef unicode gauge_str
 */
struct __pyx_obj_11cybhpt_full_HertzMode {
  PyObject_HEAD
  HertzMode *hertzcpp;
  PyObject *gauge_str;
  enum Gauge gauge_cpp;
  int sampleR;
  int sampleTh;
};


/* "cython/teukolsky_wrap.pyx":547
 *     return metric_coefficient_IRG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 * cdef class MetricModeGenerator:             # <<<<<<<<<<<<<<
 *     cdef unicode gauge_str
 *     cdef Gauge gauge_cpp
 */
struct __pyx_obj_11cybhpt_full_MetricModeGenerator {
  PyObject_HEAD
  PyObject *gauge_str;
  enum Gauge gauge_cpp;
  PyObject *basis;
};


/* "cython/flux_wrap.pyx":36
 *     void full_flux_parallel_lm(GeodesicSource geo, int lMax, cpp_string dir)
 * 
 * cdef class FluxList:             # <<<<<<<<<<<<<<
 *     cdef FluxListCPP *fluxlistcpp
 * 
 */
struct __pyx_obj_11cybhpt_full_FluxList {
  PyObject_HEAD
  struct __pyx_vtabstruct_11cybhpt_full_FluxList *__pyx_vtab;
  FluxList *fluxlistcpp;
};


/* "cython/redshift_wrap.pyx":51
 *     run_unit_tests()
 * 
 * cdef class RedshiftCoefficients:             # <<<<<<<<<<<<<<
 *     cdef RedshiftCoefficientsCPP *huucpp
 * 
 */
struct __pyx_obj_11cybhpt_full_RedshiftCoefficients {
  PyObject_HEAD
  RedshiftCoefficients *huucpp;
};


/* "cython/redshift_wrap.pyx":63
 *         return self.huucpp.getComponent(Ni, ai, bi, ci, di, jr, jz)
 * 
 * cdef class SphericalHarmonicCoupling:             # <<<<<<<<<<<<<<
 *     cdef SphericalHarmonicCouplingCPP *cpp
 * 
 */
struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling {
  PyObject_HEAD
  SphericalHarmonicCoupling *cpp;
};



/* "cython/geo_wrap.pyx":115
 *     return kerr_geo_VphiTheta(a, En, Lz, Q, theta)
 * 
 * cdef class KerrGeodesic:             # <<<<<<<<<<<<<<
 *     cdef GeodesicSource *geocpp
 *     cdef int nsamplescpp
 */

struct __pyx_vtabstruct_11cybhpt_full_KerrGeodesic {
  void (*getTimePositionOfMinoTimeArray)(struct __pyx_obj_11cybhpt_full_KerrGeodesic *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int);
  void (*getRadialPositionOfMinoTimeArray)(struct __pyx_obj_11cybhpt_full_KerrGeodesic *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int);
  void (*getPolarPositionOfMinoTimeArray)(struct __pyx_obj_11cybhpt_full_KerrGeodesic *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int);
  void (*getAzimuthalPositionOfMinoTimeArray)(struct __pyx_obj_11cybhpt_full_KerrGeodesic *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int);
};
static struct __pyx_vtabstruct_11cybhpt_full_KerrGeodesic *__pyx_vtabptr_11cybhpt_full_KerrGeodesic;


/* "cython/flux_wrap.pyx":36
 *     void full_flux_parallel_lm(GeodesicSource geo, int lMax, cpp_string dir)
 * 
 * cdef class FluxList:             # <<<<<<<<<<<<<<
 *     cdef FluxListCPP *fluxlistcpp
 * 
 */

struct __pyx_vtabstruct_11cybhpt_full_FluxList {
  PyObject *(*set_fluxes)(struct __pyx_obj_11cybhpt_full_FluxList *, FluxList);
};
static struct __pyx_vtabstruct_11cybhpt_full_FluxList *__pyx_vtabptr_11cybhpt_full_FluxList;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__Gauge(enum Gauge value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum Gauge __Pyx_PyInt_As_enum__Gauge(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__BoundaryCondition(enum BoundaryCondition value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__SolutionMethod(enum SolutionMethod value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum BoundaryCondition __Pyx_PyInt_As_enum__BoundaryCondition(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum SolutionMethod __Pyx_PyInt_As_enum__SolutionMethod(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FromPy.proto */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

/* ToPy.proto */
#define __pyx_PyComplex_FromComplex(z)\
        PyComplex_FromDoubles((double)__Pyx_CREAL(z),\
                              (double)__Pyx_CIMAG(z))

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_11cybhpt_full_12KerrGeodesic_getTimePositionOfMinoTimeArray(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_t, __pyx_t_5numpy_float64_t *__pyx_v_la, int __pyx_v_n); /* proto*/
static void __pyx_f_11cybhpt_full_12KerrGeodesic_getRadialPositionOfMinoTimeArray(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_t, __pyx_t_5numpy_float64_t *__pyx_v_la, int __pyx_v_n); /* proto*/
static void __pyx_f_11cybhpt_full_12KerrGeodesic_getPolarPositionOfMinoTimeArray(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_t, __pyx_t_5numpy_float64_t *__pyx_v_la, int __pyx_v_n); /* proto*/
static void __pyx_f_11cybhpt_full_12KerrGeodesic_getAzimuthalPositionOfMinoTimeArray(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_t, __pyx_t_5numpy_float64_t *__pyx_v_la, int __pyx_v_n); /* proto*/
static PyObject *__pyx_f_11cybhpt_full_8FluxList_set_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, FluxList __pyx_v_fluxes); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.complex' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'cybhpt_full' */
static PyTypeObject *__pyx_ptype_11cybhpt_full_KerrGeodesic = 0;
static PyTypeObject *__pyx_ptype_11cybhpt_full_RadialTeukolsky = 0;
static PyTypeObject *__pyx_ptype_11cybhpt_full_TeukolskyMode = 0;
static PyTypeObject *__pyx_ptype_11cybhpt_full_HertzMode = 0;
static PyTypeObject *__pyx_ptype_11cybhpt_full_MetricModeGenerator = 0;
static PyTypeObject *__pyx_ptype_11cybhpt_full_FluxList = 0;
static PyTypeObject *__pyx_ptype_11cybhpt_full_RedshiftCoefficients = 0;
static PyTypeObject *__pyx_ptype_11cybhpt_full_SphericalHarmonicCoupling = 0;
static PyObject *__pyx_v_11cybhpt_full_bc_dict = 0;
static PyObject *__pyx_v_11cybhpt_full_method_dict = 0;
static PyObject *__pyx_v_11cybhpt_full_gauge_dict = 0;
static PyObject *__pyx_v_11cybhpt_full_basis_dict = 0;
static PyObject *__pyx_v_11cybhpt_full_metric_component_gauge_dict = 0;
static enum BoundaryCondition __pyx_f_11cybhpt_full_str_to_bc(PyObject *); /*proto*/
static enum SolutionMethod __pyx_f_11cybhpt_full_str_to_method(PyObject *); /*proto*/
static enum Gauge __pyx_f_11cybhpt_full_str_to_gauge(PyObject *); /*proto*/
static PyObject *__pyx_f_11cybhpt_full___pyx_unpickle_MetricModeGenerator__set_state(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *, PyObject *); /*proto*/
static std::complex<double>  __pyx_convert_complex_from_py_double(PyObject *); /*proto*/
static PyObject *__pyx_convert_complex_to_py_double(std::complex<double>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___(const std::vector<std::complex<double> >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e___(const std::vector<std::vector<std::complex<double> > >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e____3e___(const std::vector<std::vector<std::vector<std::complex<double> > > >  &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "cybhpt_full"
extern int __pyx_module_is_main_cybhpt_full;
int __pyx_module_is_main_cybhpt_full = 0;

/* Implementation of 'cybhpt_full' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_H[] = "H";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_En[] = "En";
static const char __pyx_k_In[] = "In";
static const char __pyx_k_Lz[] = "Lz";
static const char __pyx_k_Ni[] = "Ni";
static const char __pyx_k_Qc[] = "Qc";
static const char __pyx_k_R0[] = "R0";
static const char __pyx_k_Rp[] = "Rp";
static const char __pyx_k_Up[] = "Up";
static const char __pyx_k_ai[] = "ai";
static const char __pyx_k_bc[] = "bc";
static const char __pyx_k_bi[] = "bi";
static const char __pyx_k_ci[] = "ci";
static const char __pyx_k_di[] = "di";
static const char __pyx_k_jr[] = "jr";
static const char __pyx_k_jz[] = "jz";
static const char __pyx_k_la[] = "la";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_nr[] = "nr";
static const char __pyx_k_nt[] = "nt";
static const char __pyx_k_nz[] = "nz";
static const char __pyx_k_GSN[] = "GSN";
static const char __pyx_k_HBL[] = "HBL";
static const char __pyx_k_IRG[] = "IRG";
static const char __pyx_k_MST[] = "MST";
static const char __pyx_k_ORG[] = "ORG";
static const char __pyx_k_RP0[] = "RP0";
static const char __pyx_k_ZIn[] = "ZIn";
static const char __pyx_k_ZUp[] = "ZUp";
static const char __pyx_k_abs[] = "abs";
static const char __pyx_k_cos[] = "cos";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_geo[] = "geo";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_upR[] = "upR";
static const char __pyx_k_upT[] = "upT";
static const char __pyx_k_ASYM[] = "ASYM";
static const char __pyx_k_AUTO[] = "AUTO";
static const char __pyx_k_Edot[] = "Edot";
static const char __pyx_k_Ldot[] = "Ldot";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_Qdot[] = "Qdot";
static const char __pyx_k_TEUK[] = "TEUK";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_flux[] = "flux";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_lmax[] = "lmax";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_nphi[] = "nphi";
static const char __pyx_k_rvec[] = "rvec";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_swsh[] = "swsh";
static const char __pyx_k_temp[] = "temp";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_teuk[] = "teuk";
static const char __pyx_k_upTh[] = "upTh";
static const char __pyx_k_zvec[] = "zvec";
static const char __pyx_k_EdotH[] = "EdotH";
static const char __pyx_k_EdotI[] = "EdotI";
static const char __pyx_k_Error[] = "Error";
static const char __pyx_k_LdotH[] = "LdotH";
static const char __pyx_k_LdotI[] = "LdotI";
static const char __pyx_k_PsiIn[] = "PsiIn";
static const char __pyx_k_PsiUp[] = "PsiUp";
static const char __pyx_k_QdotH[] = "QdotH";
static const char __pyx_k_QdotI[] = "QdotI";
static const char __pyx_k_SAAB0[] = "SAAB0";
static const char __pyx_k_SAAB4[] = "SAAB4";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_basis[] = "basis";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_gauge[] = "gauge";
static const char __pyx_k_hertz[] = "hertz";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_omega[] = "omega";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_theta[] = "theta";
static const char __pyx_k_upPhi[] = "upPhi";
static const char __pyx_k_ASAAB0[] = "ASAAB0";
static const char __pyx_k_ASAAB4[] = "ASAAB4";
static const char __pyx_k_coeffs[] = "coeffs";
static const char __pyx_k_fluxes[] = "fluxes";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_method[] = "method";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_tetrad[] = "tetrad";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_nsample[] = "nsample";
static const char __pyx_k_squeeze[] = "squeeze";
static const char __pyx_k_FluxList[] = "FluxList";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_lambdaCH[] = "lambdaCH";
static const char __pyx_k_nsamples[] = "nsamples";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_HertzMode[] = "HertzMode";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_fluxescpp[] = "fluxescpp";
static const char __pyx_k_frequency[] = "frequency";
static const char __pyx_k_metric_11[] = "metric_11";
static const char __pyx_k_polarmode[] = "polarmode";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_run_tests[] = "run_tests";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_coordinate[] = "coordinate";
static const char __pyx_k_polarpoint[] = "polarpoint";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_radialmode[] = "radialmode";
static const char __pyx_k_spinweight[] = "spinweight";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_cybhpt_full[] = "cybhpt_full";
static const char __pyx_k_frequencies[] = "frequencies";
static const char __pyx_k_radialpoint[] = "radialpoint";
static const char __pyx_k_KerrGeodesic[] = "KerrGeodesic";
static const char __pyx_k_kerr_geo_V01[] = "kerr_geo_V01";
static const char __pyx_k_kerr_geo_V02[] = "kerr_geo_V02";
static const char __pyx_k_kerr_geo_V11[] = "kerr_geo_V11";
static const char __pyx_k_kerr_geo_V22[] = "kerr_geo_V22";
static const char __pyx_k_kerr_geo_V31[] = "kerr_geo_V31";
static const char __pyx_k_kerr_geo_V32[] = "kerr_geo_V32";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_TeukolskyMode[] = "TeukolskyMode";
static const char __pyx_k_azimuthalmode[] = "azimuthalmode";
static const char __pyx_k_blackholespin[] = "blackholespin";
static const char __pyx_k_polarsolution[] = "polarsolution";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_mode_frequency[] = "mode_frequency";
static const char __pyx_k_radialsolution[] = "radialsolution";
static const char __pyx_k_spheroidalmode[] = "spheroidalmode";
static const char __pyx_k_RadialTeukolsky[] = "RadialTeukolsky";
static const char __pyx_k_hertz_amplitude[] = "hertz_amplitude";
static const char __pyx_k_polarderivative[] = "polarderivative";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_tetradcomponent[] = "tetradcomponent";
static const char __pyx_k_timefrequencies[] = "timefrequencies";
static const char __pyx_k_polarderivative2[] = "polarderivative2";
static const char __pyx_k_radialderivative[] = "radialderivative";
static const char __pyx_k_Not_enough_memory[] = "Not enough memory.";
static const char __pyx_k_carterfrequencies[] = "carterfrequencies";
static const char __pyx_k_circular_redshift[] = "circular_redshift";
static const char __pyx_k_radialderivative2[] = "radialderivative2";
static const char __pyx_k_teuk_to_hertz_IRG[] = "teuk_to_hertz_IRG";
static const char __pyx_k_teuk_to_hertz_ORG[] = "teuk_to_hertz_ORG";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_teuk_to_hertz_SAAB[] = "teuk_to_hertz_SAAB";
static const char __pyx_k_MetricModeGenerator[] = "MetricModeGenerator";
static const char __pyx_k_cython_geo_wrap_pyx[] = "cython/geo_wrap.pyx";
static const char __pyx_k_mode_time_frequency[] = "mode_time_frequency";
static const char __pyx_k_teuk_to_hertz_ASAAB[] = "teuk_to_hertz_ASAAB";
static const char __pyx_k_teukolsky_amplitude[] = "teukolsky_amplitude";
static const char __pyx_k_RedshiftCoefficients[] = "RedshiftCoefficients";
static const char __pyx_k_cython_flux_wrap_pyx[] = "cython/flux_wrap.pyx";
static const char __pyx_k_metric_coefficient_S0[] = "metric_coefficient_S0";
static const char __pyx_k_metric_coefficient_S4[] = "metric_coefficient_S4";
static const char __pyx_k_flip_spin_of_solutions[] = "flip_spin_of_solutions";
static const char __pyx_k_test_hertz_mode_cython[] = "test_hertz_mode_cython";
static const char __pyx_k_cython_redshift_wrap_pyx[] = "cython/redshift_wrap.pyx";
static const char __pyx_k_is_not_a_supported_gauge[] = "{} is not a supported gauge.";
static const char __pyx_k_SphericalHarmonicCoupling[] = "SphericalHarmonicCoupling";
static const char __pyx_k_cython_teukolsky_wrap_pyx[] = "cython/teukolsky_wrap.pyx";
static const char __pyx_k_teukolsky_starobinsky_const[] = "teukolsky_starobinsky_const";
static const char __pyx_k_cython_radialsolver_wrap_pyx[] = "cython/radialsolver_wrap.pyx";
static const char __pyx_k_homogeneousradialderivative2[] = "homogeneousradialderivative2";
static const char __pyx_k_kerr_mino_frequencies_wrapper[] = "kerr_mino_frequencies_wrapper";
static const char __pyx_k_kerr_orbital_constants_wrapper[] = "kerr_orbital_constants_wrapper";
static const char __pyx_k_metric_coefficients_cython_IRG[] = "metric_coefficients_cython_IRG";
static const char __pyx_k_metric_coefficients_cython_ORG[] = "metric_coefficients_cython_ORG";
static const char __pyx_k_pyx_unpickle_MetricModeGenerat[] = "__pyx_unpickle_MetricModeGenerator";
static const char __pyx_k_is_not_a_supported_boundary_con[] = "{} is not a supported boundary condition.";
static const char __pyx_k_is_not_a_supported_solution_met[] = "{} is not a supported solution method.";
static const char __pyx_k_is_not_a_valid_basis_Must_be_te[] = "{} is not a valid basis. Must be tetrad or coordinate.";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_self_geocpp_cannot_be_converted[] = "self.geocpp cannot be converted to a Python object for pickling";
static const char __pyx_k_Hertz_mode_only_accepts_Teukolsk[] = "Hertz mode only accepts Teukolsky solutions with spin-weight -2,+2.";
static const char __pyx_k_Hertz_potential_in_gauge_Must_be[] = "Hertz potential in {} gauge. Must be in {} gauge";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xfc373ef, 0x4e7c6fa, 0x0ef8744) = (basis, gauge_cpp, gauge_str))";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self_hertzcpp_cannot_be_converte[] = "self.hertzcpp cannot be converted to a Python object for pickling";
static const char __pyx_k_teukolsky_starobinsky_const_squa[] = "teukolsky_starobinsky_const_squared";
static const char __pyx_k_teukolsky_starobinsky_transforma[] = "teukolsky_starobinsky_transformation_amplitude";
static PyObject *__pyx_n_u_ASAAB0;
static PyObject *__pyx_n_u_ASAAB4;
static PyObject *__pyx_n_u_ASYM;
static PyObject *__pyx_n_u_AUTO;
static PyObject *__pyx_n_s_Edot;
static PyObject *__pyx_n_s_EdotH;
static PyObject *__pyx_n_s_EdotI;
static PyObject *__pyx_n_s_En;
static PyObject *__pyx_n_u_Error;
static PyObject *__pyx_n_s_FluxList;
static PyObject *__pyx_n_u_GSN;
static PyObject *__pyx_n_u_H;
static PyObject *__pyx_n_u_HBL;
static PyObject *__pyx_n_s_HertzMode;
static PyObject *__pyx_kp_u_Hertz_mode_only_accepts_Teukolsk;
static PyObject *__pyx_kp_u_Hertz_potential_in_gauge_Must_be;
static PyObject *__pyx_n_u_I;
static PyObject *__pyx_n_u_IRG;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_u_In;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_n_s_KerrGeodesic;
static PyObject *__pyx_n_s_Ldot;
static PyObject *__pyx_n_s_LdotH;
static PyObject *__pyx_n_s_LdotI;
static PyObject *__pyx_n_s_Lz;
static PyObject *__pyx_n_u_MST;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_MetricModeGenerator;
static PyObject *__pyx_n_s_Ni;
static PyObject *__pyx_n_u_None;
static PyObject *__pyx_kp_u_Not_enough_memory;
static PyObject *__pyx_n_u_ORG;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_PsiIn;
static PyObject *__pyx_n_s_PsiUp;
static PyObject *__pyx_n_s_Q;
static PyObject *__pyx_n_s_Qc;
static PyObject *__pyx_n_s_Qdot;
static PyObject *__pyx_n_s_QdotH;
static PyObject *__pyx_n_s_QdotI;
static PyObject *__pyx_n_s_R;
static PyObject *__pyx_n_s_R0;
static PyObject *__pyx_n_s_RP0;
static PyObject *__pyx_n_s_RadialTeukolsky;
static PyObject *__pyx_n_s_RedshiftCoefficients;
static PyObject *__pyx_n_s_Rp;
static PyObject *__pyx_n_u_SAAB0;
static PyObject *__pyx_n_u_SAAB4;
static PyObject *__pyx_n_s_SphericalHarmonicCoupling;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_u_TEUK;
static PyObject *__pyx_n_s_TeukolskyMode;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_u_Up;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_ZIn;
static PyObject *__pyx_n_s_ZUp;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_abs;
static PyObject *__pyx_n_s_ai;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_azimuthalmode;
static PyObject *__pyx_n_s_basis;
static PyObject *__pyx_n_s_bc;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_bi;
static PyObject *__pyx_n_s_blackholespin;
static PyObject *__pyx_n_s_carterfrequencies;
static PyObject *__pyx_n_s_ci;
static PyObject *__pyx_n_s_circular_redshift;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_coeffs;
static PyObject *__pyx_n_u_coordinate;
static PyObject *__pyx_n_s_cos;
static PyObject *__pyx_n_s_cybhpt_full;
static PyObject *__pyx_kp_s_cython_flux_wrap_pyx;
static PyObject *__pyx_kp_s_cython_geo_wrap_pyx;
static PyObject *__pyx_kp_s_cython_radialsolver_wrap_pyx;
static PyObject *__pyx_kp_s_cython_redshift_wrap_pyx;
static PyObject *__pyx_kp_s_cython_teukolsky_wrap_pyx;
static PyObject *__pyx_n_s_di;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dot;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_flip_spin_of_solutions;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_flux;
static PyObject *__pyx_n_s_fluxes;
static PyObject *__pyx_n_s_fluxescpp;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_frequencies;
static PyObject *__pyx_n_s_frequency;
static PyObject *__pyx_n_s_gauge;
static PyObject *__pyx_n_s_geo;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_hertz;
static PyObject *__pyx_n_s_hertz_amplitude;
static PyObject *__pyx_n_s_homogeneousradialderivative2;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_u_is_not_a_supported_boundary_con;
static PyObject *__pyx_kp_u_is_not_a_supported_gauge;
static PyObject *__pyx_kp_u_is_not_a_supported_solution_met;
static PyObject *__pyx_kp_u_is_not_a_valid_basis_Must_be_te;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_jr;
static PyObject *__pyx_n_s_jz;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_kerr_geo_V01;
static PyObject *__pyx_n_s_kerr_geo_V02;
static PyObject *__pyx_n_s_kerr_geo_V11;
static PyObject *__pyx_n_s_kerr_geo_V22;
static PyObject *__pyx_n_s_kerr_geo_V31;
static PyObject *__pyx_n_s_kerr_geo_V32;
static PyObject *__pyx_n_s_kerr_mino_frequencies_wrapper;
static PyObject *__pyx_n_s_kerr_orbital_constants_wrapper;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_la;
static PyObject *__pyx_n_s_lambdaCH;
static PyObject *__pyx_n_s_lmax;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_method;
static PyObject *__pyx_n_s_metric_11;
static PyObject *__pyx_n_s_metric_coefficient_S0;
static PyObject *__pyx_n_s_metric_coefficient_S4;
static PyObject *__pyx_n_s_metric_coefficients_cython_IRG;
static PyObject *__pyx_n_s_metric_coefficients_cython_ORG;
static PyObject *__pyx_n_s_mode_frequency;
static PyObject *__pyx_n_s_mode_time_frequency;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_nphi;
static PyObject *__pyx_n_s_nr;
static PyObject *__pyx_n_s_nsample;
static PyObject *__pyx_n_s_nsamples;
static PyObject *__pyx_n_s_nt;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_nz;
static PyObject *__pyx_n_s_omega;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_polarderivative;
static PyObject *__pyx_n_s_polarderivative2;
static PyObject *__pyx_n_s_polarmode;
static PyObject *__pyx_n_s_polarpoint;
static PyObject *__pyx_n_s_polarsolution;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_MetricModeGenerat;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_radialderivative;
static PyObject *__pyx_n_s_radialderivative2;
static PyObject *__pyx_n_s_radialmode;
static PyObject *__pyx_n_s_radialpoint;
static PyObject *__pyx_n_s_radialsolution;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_run_tests;
static PyObject *__pyx_n_s_rvec;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_self_geocpp_cannot_be_converted;
static PyObject *__pyx_kp_s_self_hertzcpp_cannot_be_converte;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_spheroidalmode;
static PyObject *__pyx_n_s_spinweight;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_squeeze;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_swsh;
static PyObject *__pyx_n_s_temp;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_test_hertz_mode_cython;
static PyObject *__pyx_n_u_tetrad;
static PyObject *__pyx_n_s_tetradcomponent;
static PyObject *__pyx_n_s_teuk;
static PyObject *__pyx_n_s_teuk_to_hertz_ASAAB;
static PyObject *__pyx_n_s_teuk_to_hertz_IRG;
static PyObject *__pyx_n_s_teuk_to_hertz_ORG;
static PyObject *__pyx_n_s_teuk_to_hertz_SAAB;
static PyObject *__pyx_n_s_teukolsky_amplitude;
static PyObject *__pyx_n_s_teukolsky_starobinsky_const;
static PyObject *__pyx_n_s_teukolsky_starobinsky_const_squa;
static PyObject *__pyx_n_s_teukolsky_starobinsky_transforma;
static PyObject *__pyx_n_s_theta;
static PyObject *__pyx_n_s_timefrequencies;
static PyObject *__pyx_n_s_upPhi;
static PyObject *__pyx_n_s_upR;
static PyObject *__pyx_n_s_upT;
static PyObject *__pyx_n_s_upTh;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zvec;
static PyObject *__pyx_pf_11cybhpt_full_kerr_geo_V01(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_r); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_2kerr_geo_V02(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_theta); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_4kerr_geo_V11(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_r); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_6kerr_geo_V22(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_theta); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8kerr_geo_V31(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_r); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_10kerr_geo_V32(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_theta); /* proto */
static int __pyx_pf_11cybhpt_full_12KerrGeodesic___init__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, double __pyx_v_a, double __pyx_v_p, double __pyx_v_e, double __pyx_v_x, int __pyx_v_nsamples); /* proto */
static void __pyx_pf_11cybhpt_full_12KerrGeodesic_2__dealloc__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_8nsamples___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_13blackholespin___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_15semilatusrectum___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_12eccentricity___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_11inclination___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_13orbitalenergy___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_22orbitalangularmomentum___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_14carterconstant___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_11radialroots___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_10polarroots___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_15minofrequencies___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_15timefrequencies___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_11frequencies___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_17carterfrequencies___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_4mode_time_frequency(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_kvec); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_6mode_carter_frequency(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_kvec); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_8time_position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_10radial_position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_12polar_position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_14azimuthal_position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_16get_time_accumulation(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, int __pyx_v_j); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_18get_radial_points(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_20get_polar_points(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_22get_azimuthal_accumulation(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, int __pyx_v_j); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_24position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, double __pyx_v_la); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_26position_vec(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_28mino_time(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_30get_time_coefficients(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, int __pyx_v_j); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_32get_radial_coefficients(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_34get_polar_coefficients(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_36get_azimuthal_coefficients(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, int __pyx_v_j); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_12kerr_orbital_constants_wrapper(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_p, double __pyx_v_e, double __pyx_v_x); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_14kerr_mino_frequencies_wrapper(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_p, double __pyx_v_e, double __pyx_v_x); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_16flip_spin_of_solutions(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_bc, int __pyx_v_s, double __pyx_v_a, int __pyx_v_m, double __pyx_v_omega, double __pyx_v_la, double __pyx_v_r, std::complex<double>  __pyx_v_R, std::complex<double>  __pyx_v_Rp); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_18teukolsky_starobinsky_transformation_amplitude(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_bc, int __pyx_v_s, int __pyx_v_m, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_20teukolsky_starobinsky_const(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_j, int __pyx_v_m, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_22teukolsky_starobinsky_const_squared(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_s, int __pyx_v_m, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH); /* proto */
static int __pyx_pf_11cybhpt_full_15RadialTeukolsky___cinit__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, double __pyx_v_a, int __pyx_v_s, int __pyx_v_l, int __pyx_v_m, double __pyx_v_omega, PyArrayObject *__pyx_v_r); /* proto */
static void __pyx_pf_11cybhpt_full_15RadialTeukolsky_2__dealloc__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_13blackholespin___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_10spinweight___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_1s___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_14spheroidalmode___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_1j___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_13azimuthalmode___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_1m___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_9frequency___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_14mode_frequency___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_5omega___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_10eigenvalue___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_4solve_bc(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_method); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_6set_bc(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, std::complex<double>  __pyx_v_R, std::complex<double>  __pyx_v_Rp, double __pyx_v_r); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_8solve(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_method, PyObject *__pyx_v_bc); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_10flip_spinweight(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_12radialpoint(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, int __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_14boundarypoint(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_16boundarysolution(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_18boundaryderivative(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_20solution(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_22derivative(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_24second_derivative(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_26derivative2(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11cybhpt_full_13TeukolskyMode___cinit__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_s, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, int __pyx_v_n, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo); /* proto */
static void __pyx_pf_11cybhpt_full_13TeukolskyMode_2__dealloc__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_10spinweight___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_14spheroidalmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_13azimuthalmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_10radialmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_9polarmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_13blackholespin___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_9frequency___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_16horizonfrequency___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_10eigenvalue___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_15mincouplingmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_15maxcouplingmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1j___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1m___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1k___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1n___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_5omega___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1a___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_12radialpoints___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_11polarpoints___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_15radialsolutions___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_4teukolsky_amplitude(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_6teukolsky_amplitude_precision(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_8couplingcoefficient(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_l); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_10radialpoint(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_12radialsolution(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_14radialderivative(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_16radialderivative2(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_18homogeneousradialsolution(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_20homogeneousradialderivative(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_22homogeneousradialderivative2(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_24polarpoint(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_26polarsolution(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_28polarderivative(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_30polarderivative2(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_32solve(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo, PyObject *__pyx_v_method, int __pyx_v_nsample, CYTHON_UNUSED PyObject *__pyx_v_teuk, CYTHON_UNUSED PyObject *__pyx_v_swsh); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_34flip_spinweight_frequency(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_36flip_spinweight(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11cybhpt_full_9HertzMode___init__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_teuk, PyObject *__pyx_v_gauge); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_2solve(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static void __pyx_pf_11cybhpt_full_9HertzMode_4__dealloc__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_5gauge___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_10spinweight___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_14spheroidalmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_13azimuthalmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_10radialmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_9polarmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_13blackholespin___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_9frequency___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_16horizonfrequency___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_10eigenvalue___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_15mincouplingmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_15maxcouplingmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_21minscalarcouplingmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_21maxscalarcouplingmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1j___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1m___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1k___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1n___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_5omega___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1a___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_6hertz_amplitude(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_8couplingcoefficient(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_l); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_10scalarcouplingcoefficient(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_l); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_12radialpoint(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_14radialsolution(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_16radialderivative(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_18radialderivative2(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_20homogeneousradialsolution(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_22homogeneousradialderivative(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_24homogeneousradialderivative2(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_26polarpoint(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_28polarsolution(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_30polarderivative(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_32polarderivative2(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_12radialpoints___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_15radialsolutions___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_17radialderivatives___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_18radialderivatives2___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_24test_hertz_mode_cython(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, int __pyx_v_n, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_26teuk_to_hertz_ORG(CYTHON_UNUSED PyObject *__pyx_self, std::complex<double>  __pyx_v_ZIn, std::complex<double>  __pyx_v_ZUp, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_28teuk_to_hertz_IRG(CYTHON_UNUSED PyObject *__pyx_self, std::complex<double>  __pyx_v_ZIn, std::complex<double>  __pyx_v_ZUp, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_30teuk_to_hertz_SAAB(CYTHON_UNUSED PyObject *__pyx_self, std::complex<double>  __pyx_v_ZIn, std::complex<double>  __pyx_v_ZUp, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_32teuk_to_hertz_ASAAB(CYTHON_UNUSED PyObject *__pyx_self, std::complex<double>  __pyx_v_ZIn, std::complex<double>  __pyx_v_ZUp, int __pyx_v_j, int __pyx_v_m, CYTHON_UNUSED int __pyx_v_k, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_34metric_11(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_36metric_coefficient_S4(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_alpha, int __pyx_v_beta, int __pyx_v_nt, int __pyx_v_nr, int __pyx_v_nz, int __pyx_v_np, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_38metric_coefficient_S0(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_alpha, int __pyx_v_beta, int __pyx_v_nt, int __pyx_v_nr, int __pyx_v_nz, int __pyx_v_np, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z); /* proto */
static int __pyx_pf_11cybhpt_full_19MetricModeGenerator___init__(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self, PyObject *__pyx_v_gauge, PyObject *__pyx_v_basis); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_19MetricModeGenerator_2__call__(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self, struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_hertz, int __pyx_v_ai, int __pyx_v_bi); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_19MetricModeGenerator_4tetradcomponent(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self, struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_hertz, int __pyx_v_ai, int __pyx_v_bi); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_19MetricModeGenerator_6__reduce_cython__(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_19MetricModeGenerator_8__setstate_cython__(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11cybhpt_full_8FluxList___cinit__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self); /* proto */
static void __pyx_pf_11cybhpt_full_8FluxList_2__dealloc__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_4zero_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_6set_infinity_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_8set_horizon_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_10add_infinity_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_12add_horizon_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_14set_infinity_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_16add_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_EdotH, double __pyx_v_LdotH, double __pyx_v_QdotH, double __pyx_v_EdotI, double __pyx_v_LdotI, double __pyx_v_QdotI); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_6energy___get__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_15angularmomentum___get__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_14carterconstant___get__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_8FluxList_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_40flux(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_s, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo, struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_teuk); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_42metric_coefficients_cython_ORG(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ai, int __pyx_v_bi, int __pyx_v_nt, int __pyx_v_nr, int __pyx_v_nz, int __pyx_v_nphi, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_44metric_coefficients_cython_IRG(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ai, int __pyx_v_bi, int __pyx_v_nt, int __pyx_v_nr, int __pyx_v_nz, int __pyx_v_nphi, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_46circular_redshift(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_gauge, int __pyx_v_lmax, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_48run_tests(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_11cybhpt_full_20RedshiftCoefficients___cinit__(struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self, PyObject *__pyx_v_gauge, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo); /* proto */
static void __pyx_pf_11cybhpt_full_20RedshiftCoefficients_2__dealloc__(struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_20RedshiftCoefficients_4__call__(struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self, int __pyx_v_Ni, int __pyx_v_ai, int __pyx_v_bi, int __pyx_v_ci, int __pyx_v_di, int __pyx_v_jr, int __pyx_v_jz); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_20RedshiftCoefficients_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_20RedshiftCoefficients_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling___cinit__(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self, int __pyx_v_lmax, int __pyx_v_m); /* proto */
static void __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_2__dealloc__(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_13azimuthalmode___get__(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_4zcouplingcoefficient(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self, int __pyx_v_n, int __pyx_v_i, int __pyx_v_l); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_6dzcouplingcoefficient(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self, int __pyx_v_n, int __pyx_v_i, int __pyx_v_l); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_11cybhpt_full_50__pyx_unpickle_MetricModeGenerator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_11cybhpt_full_KerrGeodesic(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11cybhpt_full_RadialTeukolsky(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11cybhpt_full_TeukolskyMode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11cybhpt_full_HertzMode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11cybhpt_full_MetricModeGenerator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11cybhpt_full_FluxList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11cybhpt_full_RedshiftCoefficients(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11cybhpt_full_SphericalHarmonicCoupling(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_15697732;
static PyObject *__pyx_int_82298618;
static PyObject *__pyx_int_264467439;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
/* Late includes */

/* "cython/geo_wrap.pyx":97
 *     double kerr_isco_frequency(double a)
 * 
 * def kerr_geo_V01(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VtR(a, En, Lz, Q, r)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_1kerr_geo_V01(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_1kerr_geo_V01 = {"kerr_geo_V01", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_1kerr_geo_V01, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_1kerr_geo_V01(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_En;
  double __pyx_v_Lz;
  double __pyx_v_Q;
  double __pyx_v_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kerr_geo_V01 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_En,&__pyx_n_s_Lz,&__pyx_n_s_Q,&__pyx_n_s_r,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_En)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V01", 1, 5, 5, 1); __PYX_ERR(0, 97, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Lz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V01", 1, 5, 5, 2); __PYX_ERR(0, 97, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V01", 1, 5, 5, 3); __PYX_ERR(0, 97, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V01", 1, 5, 5, 4); __PYX_ERR(0, 97, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kerr_geo_V01") < 0)) __PYX_ERR(0, 97, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
    __pyx_v_En = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_En == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
    __pyx_v_Lz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Lz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kerr_geo_V01", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 97, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V01", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_kerr_geo_V01(__pyx_self, __pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_r);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_kerr_geo_V01(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kerr_geo_V01", 0);

  /* "cython/geo_wrap.pyx":98
 * 
 * def kerr_geo_V01(double a, double En, double Lz, double Q, double r):
 *     return kerr_geo_VtR(a, En, Lz, Q, r)             # <<<<<<<<<<<<<<
 * 
 * def kerr_geo_V02(double a, double En, double Lz, double Q, double theta):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(kerr_geo_VtR(__pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_r)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":97
 *     double kerr_isco_frequency(double a)
 * 
 * def kerr_geo_V01(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VtR(a, En, Lz, Q, r)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V01", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":100
 *     return kerr_geo_VtR(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V02(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VtTheta(a, En, Lz, Q, theta)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_3kerr_geo_V02(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_3kerr_geo_V02 = {"kerr_geo_V02", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_3kerr_geo_V02, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_3kerr_geo_V02(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_En;
  double __pyx_v_Lz;
  double __pyx_v_Q;
  double __pyx_v_theta;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kerr_geo_V02 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_En,&__pyx_n_s_Lz,&__pyx_n_s_Q,&__pyx_n_s_theta,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_En)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V02", 1, 5, 5, 1); __PYX_ERR(0, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Lz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V02", 1, 5, 5, 2); __PYX_ERR(0, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V02", 1, 5, 5, 3); __PYX_ERR(0, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V02", 1, 5, 5, 4); __PYX_ERR(0, 100, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kerr_geo_V02") < 0)) __PYX_ERR(0, 100, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L3_error)
    __pyx_v_En = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_En == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L3_error)
    __pyx_v_Lz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Lz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L3_error)
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kerr_geo_V02", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 100, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V02", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_2kerr_geo_V02(__pyx_self, __pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_theta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_2kerr_geo_V02(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_theta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kerr_geo_V02", 0);

  /* "cython/geo_wrap.pyx":101
 * 
 * def kerr_geo_V02(double a, double En, double Lz, double Q, double theta):
 *     return kerr_geo_VtTheta(a, En, Lz, Q, theta)             # <<<<<<<<<<<<<<
 * 
 * def kerr_geo_V11(double a, double En, double Lz, double Q, double r):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(kerr_geo_VtTheta(__pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_theta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":100
 *     return kerr_geo_VtR(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V02(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VtTheta(a, En, Lz, Q, theta)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V02", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":103
 *     return kerr_geo_VtTheta(a, En, Lz, Q, theta)
 * 
 * def kerr_geo_V11(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_Vr(a, En, Lz, Q, r)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_5kerr_geo_V11(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_5kerr_geo_V11 = {"kerr_geo_V11", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_5kerr_geo_V11, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_5kerr_geo_V11(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_En;
  double __pyx_v_Lz;
  double __pyx_v_Q;
  double __pyx_v_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kerr_geo_V11 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_En,&__pyx_n_s_Lz,&__pyx_n_s_Q,&__pyx_n_s_r,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_En)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V11", 1, 5, 5, 1); __PYX_ERR(0, 103, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Lz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V11", 1, 5, 5, 2); __PYX_ERR(0, 103, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V11", 1, 5, 5, 3); __PYX_ERR(0, 103, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V11", 1, 5, 5, 4); __PYX_ERR(0, 103, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kerr_geo_V11") < 0)) __PYX_ERR(0, 103, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L3_error)
    __pyx_v_En = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_En == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L3_error)
    __pyx_v_Lz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Lz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kerr_geo_V11", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 103, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V11", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_4kerr_geo_V11(__pyx_self, __pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_r);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_4kerr_geo_V11(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kerr_geo_V11", 0);

  /* "cython/geo_wrap.pyx":104
 * 
 * def kerr_geo_V11(double a, double En, double Lz, double Q, double r):
 *     return kerr_geo_Vr(a, En, Lz, Q, r)             # <<<<<<<<<<<<<<
 * 
 * def kerr_geo_V22(double a, double En, double Lz, double Q, double theta):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(kerr_geo_Vr(__pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_r)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":103
 *     return kerr_geo_VtTheta(a, En, Lz, Q, theta)
 * 
 * def kerr_geo_V11(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_Vr(a, En, Lz, Q, r)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V11", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":106
 *     return kerr_geo_Vr(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V22(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_Vtheta(a, En, Lz, Q, theta)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_7kerr_geo_V22(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_7kerr_geo_V22 = {"kerr_geo_V22", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_7kerr_geo_V22, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_7kerr_geo_V22(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_En;
  double __pyx_v_Lz;
  double __pyx_v_Q;
  double __pyx_v_theta;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kerr_geo_V22 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_En,&__pyx_n_s_Lz,&__pyx_n_s_Q,&__pyx_n_s_theta,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_En)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V22", 1, 5, 5, 1); __PYX_ERR(0, 106, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Lz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V22", 1, 5, 5, 2); __PYX_ERR(0, 106, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V22", 1, 5, 5, 3); __PYX_ERR(0, 106, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V22", 1, 5, 5, 4); __PYX_ERR(0, 106, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kerr_geo_V22") < 0)) __PYX_ERR(0, 106, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_En = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_En == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_Lz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Lz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kerr_geo_V22", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V22", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_6kerr_geo_V22(__pyx_self, __pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_theta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_6kerr_geo_V22(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_theta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kerr_geo_V22", 0);

  /* "cython/geo_wrap.pyx":107
 * 
 * def kerr_geo_V22(double a, double En, double Lz, double Q, double theta):
 *     return kerr_geo_Vtheta(a, En, Lz, Q, theta)             # <<<<<<<<<<<<<<
 * 
 * def kerr_geo_V31(double a, double En, double Lz, double Q, double r):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(kerr_geo_Vtheta(__pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_theta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":106
 *     return kerr_geo_Vr(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V22(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_Vtheta(a, En, Lz, Q, theta)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V22", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":109
 *     return kerr_geo_Vtheta(a, En, Lz, Q, theta)
 * 
 * def kerr_geo_V31(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VphiR(a, En, Lz, Q, r)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9kerr_geo_V31(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_9kerr_geo_V31 = {"kerr_geo_V31", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_9kerr_geo_V31, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_9kerr_geo_V31(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_En;
  double __pyx_v_Lz;
  double __pyx_v_Q;
  double __pyx_v_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kerr_geo_V31 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_En,&__pyx_n_s_Lz,&__pyx_n_s_Q,&__pyx_n_s_r,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_En)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V31", 1, 5, 5, 1); __PYX_ERR(0, 109, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Lz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V31", 1, 5, 5, 2); __PYX_ERR(0, 109, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V31", 1, 5, 5, 3); __PYX_ERR(0, 109, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V31", 1, 5, 5, 4); __PYX_ERR(0, 109, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kerr_geo_V31") < 0)) __PYX_ERR(0, 109, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    __pyx_v_En = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_En == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    __pyx_v_Lz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Lz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kerr_geo_V31", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 109, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V31", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_8kerr_geo_V31(__pyx_self, __pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_r);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8kerr_geo_V31(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kerr_geo_V31", 0);

  /* "cython/geo_wrap.pyx":110
 * 
 * def kerr_geo_V31(double a, double En, double Lz, double Q, double r):
 *     return kerr_geo_VphiR(a, En, Lz, Q, r)             # <<<<<<<<<<<<<<
 * 
 * def kerr_geo_V32(double a, double En, double Lz, double Q, double theta):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(kerr_geo_VphiR(__pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_r)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":109
 *     return kerr_geo_Vtheta(a, En, Lz, Q, theta)
 * 
 * def kerr_geo_V31(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VphiR(a, En, Lz, Q, r)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V31", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":112
 *     return kerr_geo_VphiR(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V32(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VphiTheta(a, En, Lz, Q, theta)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_11kerr_geo_V32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_11kerr_geo_V32 = {"kerr_geo_V32", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_11kerr_geo_V32, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_11kerr_geo_V32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_En;
  double __pyx_v_Lz;
  double __pyx_v_Q;
  double __pyx_v_theta;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kerr_geo_V32 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_En,&__pyx_n_s_Lz,&__pyx_n_s_Q,&__pyx_n_s_theta,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_En)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V32", 1, 5, 5, 1); __PYX_ERR(0, 112, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Lz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V32", 1, 5, 5, 2); __PYX_ERR(0, 112, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V32", 1, 5, 5, 3); __PYX_ERR(0, 112, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_geo_V32", 1, 5, 5, 4); __PYX_ERR(0, 112, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kerr_geo_V32") < 0)) __PYX_ERR(0, 112, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L3_error)
    __pyx_v_En = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_En == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L3_error)
    __pyx_v_Lz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Lz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L3_error)
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kerr_geo_V32", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 112, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_10kerr_geo_V32(__pyx_self, __pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_theta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_10kerr_geo_V32(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_En, double __pyx_v_Lz, double __pyx_v_Q, double __pyx_v_theta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kerr_geo_V32", 0);

  /* "cython/geo_wrap.pyx":113
 * 
 * def kerr_geo_V32(double a, double En, double Lz, double Q, double theta):
 *     return kerr_geo_VphiTheta(a, En, Lz, Q, theta)             # <<<<<<<<<<<<<<
 * 
 * cdef class KerrGeodesic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(kerr_geo_VphiTheta(__pyx_v_a, __pyx_v_En, __pyx_v_Lz, __pyx_v_Q, __pyx_v_theta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":112
 *     return kerr_geo_VphiR(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V32(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VphiTheta(a, En, Lz, Q, theta)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.kerr_geo_V32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":119
 *     cdef int nsamplescpp
 * 
 *     def __init__(self, double a, double p, double e, double x, int nsamples = 2**8):             # <<<<<<<<<<<<<<
 *         self.geocpp = new GeodesicSource(a, p, e, x, nsamples)
 *         self.nsamplescpp = nsamples
 */

/* Python wrapper */
static int __pyx_pw_11cybhpt_full_12KerrGeodesic_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11cybhpt_full_12KerrGeodesic_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_p;
  double __pyx_v_e;
  double __pyx_v_x;
  int __pyx_v_nsamples;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_p,&__pyx_n_s_e,&__pyx_n_s_x,&__pyx_n_s_nsamples,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 1); __PYX_ERR(0, 119, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 2); __PYX_ERR(0, 119, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 3); __PYX_ERR(0, 119, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nsamples);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 119, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L3_error)
    __pyx_v_p = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_p == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L3_error)
    __pyx_v_e = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_e == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L3_error)
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_nsamples = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_nsamples == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L3_error)
    } else {
      __pyx_v_nsamples = ((int)0x100);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 119, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic___init__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), __pyx_v_a, __pyx_v_p, __pyx_v_e, __pyx_v_x, __pyx_v_nsamples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11cybhpt_full_12KerrGeodesic___init__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, double __pyx_v_a, double __pyx_v_p, double __pyx_v_e, double __pyx_v_x, int __pyx_v_nsamples) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GeodesicSource *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cython/geo_wrap.pyx":120
 * 
 *     def __init__(self, double a, double p, double e, double x, int nsamples = 2**8):
 *         self.geocpp = new GeodesicSource(a, p, e, x, nsamples)             # <<<<<<<<<<<<<<
 *         self.nsamplescpp = nsamples
 * 
 */
  try {
    __pyx_t_1 = new GeodesicSource(__pyx_v_a, __pyx_v_p, __pyx_v_e, __pyx_v_x, __pyx_v_nsamples);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 120, __pyx_L1_error)
  }
  __pyx_v_self->geocpp = __pyx_t_1;

  /* "cython/geo_wrap.pyx":121
 *     def __init__(self, double a, double p, double e, double x, int nsamples = 2**8):
 *         self.geocpp = new GeodesicSource(a, p, e, x, nsamples)
 *         self.nsamplescpp = nsamples             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->nsamplescpp = __pyx_v_nsamples;

  /* "cython/geo_wrap.pyx":119
 *     cdef int nsamplescpp
 * 
 *     def __init__(self, double a, double p, double e, double x, int nsamples = 2**8):             # <<<<<<<<<<<<<<
 *         self.geocpp = new GeodesicSource(a, p, e, x, nsamples)
 *         self.nsamplescpp = nsamples
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":123
 *         self.nsamplescpp = nsamples
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.geocpp
 * 
 */

/* Python wrapper */
static void __pyx_pw_11cybhpt_full_12KerrGeodesic_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11cybhpt_full_12KerrGeodesic_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11cybhpt_full_12KerrGeodesic_2__dealloc__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11cybhpt_full_12KerrGeodesic_2__dealloc__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cython/geo_wrap.pyx":124
 * 
 *     def __dealloc__(self):
 *         del self.geocpp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->geocpp;

  /* "cython/geo_wrap.pyx":123
 *         self.nsamplescpp = nsamples
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.geocpp
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/geo_wrap.pyx":127
 * 
 *     @property
 *     def nsamples(self):             # <<<<<<<<<<<<<<
 *         return self.nsamplescpp
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_8nsamples_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_8nsamples_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_8nsamples___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_8nsamples___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":128
 *     @property
 *     def nsamples(self):
 *         return self.nsamplescpp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nsamplescpp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":127
 * 
 *     @property
 *     def nsamples(self):             # <<<<<<<<<<<<<<
 *         return self.nsamplescpp
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.nsamples.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":131
 * 
 *     @property
 *     def blackholespin(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getBlackHoleSpin()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_13blackholespin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_13blackholespin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_13blackholespin___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_13blackholespin___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":132
 *     @property
 *     def blackholespin(self):
 *         return self.geocpp.getBlackHoleSpin()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geocpp->getBlackHoleSpin()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":131
 * 
 *     @property
 *     def blackholespin(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getBlackHoleSpin()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.blackholespin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":135
 * 
 *     @property
 *     def semilatusrectum(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getSemiLatusRectum()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_15semilatusrectum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_15semilatusrectum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_15semilatusrectum___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_15semilatusrectum___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":136
 *     @property
 *     def semilatusrectum(self):
 *         return self.geocpp.getSemiLatusRectum()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geocpp->getSemiLatusRectum()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":135
 * 
 *     @property
 *     def semilatusrectum(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getSemiLatusRectum()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.semilatusrectum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":139
 * 
 *     @property
 *     def eccentricity(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getEccentricity()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_12eccentricity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_12eccentricity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_12eccentricity___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_12eccentricity___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":140
 *     @property
 *     def eccentricity(self):
 *         return self.geocpp.getEccentricity()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geocpp->getEccentricity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":139
 * 
 *     @property
 *     def eccentricity(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getEccentricity()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.eccentricity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":143
 * 
 *     @property
 *     def inclination(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getInclination()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_11inclination_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_11inclination_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_11inclination___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_11inclination___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":144
 *     @property
 *     def inclination(self):
 *         return self.geocpp.getInclination()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geocpp->getInclination()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":143
 * 
 *     @property
 *     def inclination(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getInclination()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.inclination.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":147
 * 
 *     @property
 *     def orbitalenergy(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getOrbitalEnergy()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_13orbitalenergy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_13orbitalenergy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_13orbitalenergy___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_13orbitalenergy___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":148
 *     @property
 *     def orbitalenergy(self):
 *         return self.geocpp.getOrbitalEnergy()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geocpp->getOrbitalEnergy()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":147
 * 
 *     @property
 *     def orbitalenergy(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getOrbitalEnergy()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.orbitalenergy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":151
 * 
 *     @property
 *     def orbitalangularmomentum(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getOrbitalAngularMomentum()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_22orbitalangularmomentum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_22orbitalangularmomentum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_22orbitalangularmomentum___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_22orbitalangularmomentum___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":152
 *     @property
 *     def orbitalangularmomentum(self):
 *         return self.geocpp.getOrbitalAngularMomentum()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geocpp->getOrbitalAngularMomentum()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":151
 * 
 *     @property
 *     def orbitalangularmomentum(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getOrbitalAngularMomentum()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.orbitalangularmomentum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":155
 * 
 *     @property
 *     def carterconstant(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getCarterConstant()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_14carterconstant_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_14carterconstant_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_14carterconstant___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_14carterconstant___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":156
 *     @property
 *     def carterconstant(self):
 *         return self.geocpp.getCarterConstant()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geocpp->getCarterConstant()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":155
 * 
 *     @property
 *     def carterconstant(self):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getCarterConstant()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.carterconstant.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":159
 * 
 *     @property
 *     def radialroots(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getRadialRoot(1+i) for i in range(4)])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_11radialroots_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_11radialroots_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_11radialroots___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_11radialroots___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  long __pyx_7genexpr__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":160
 *     @property
 *     def radialroots(self):
 *         return np.array([self.geocpp.getRadialRoot(1+i) for i in range(4)])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    for (__pyx_t_4 = 0; __pyx_t_4 < 4; __pyx_t_4+=1) {
      __pyx_7genexpr__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->geocpp->getRadialRoot((1 + __pyx_7genexpr__pyx_v_i))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":159
 * 
 *     @property
 *     def radialroots(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getRadialRoot(1+i) for i in range(4)])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.radialroots.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":163
 * 
 *     @property
 *     def polarroots(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getPolarRoot(1+i) for i in range(2)])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_10polarroots_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_10polarroots_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_10polarroots___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_10polarroots___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  long __pyx_8genexpr1__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":164
 *     @property
 *     def polarroots(self):
 *         return np.array([self.geocpp.getPolarRoot(1+i) for i in range(2)])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    for (__pyx_t_4 = 0; __pyx_t_4 < 2; __pyx_t_4+=1) {
      __pyx_8genexpr1__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->geocpp->getPolarRoot((1 + __pyx_8genexpr1__pyx_v_i))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":163
 * 
 *     @property
 *     def polarroots(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getPolarRoot(1+i) for i in range(2)])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.polarroots.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":167
 * 
 *     @property
 *     def minofrequencies(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getMinoFrequency(i) for i in range(4)])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_15minofrequencies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_15minofrequencies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_15minofrequencies___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_15minofrequencies___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  long __pyx_8genexpr2__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":168
 *     @property
 *     def minofrequencies(self):
 *         return np.array([self.geocpp.getMinoFrequency(i) for i in range(4)])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    for (__pyx_t_4 = 0; __pyx_t_4 < 4; __pyx_t_4+=1) {
      __pyx_8genexpr2__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->geocpp->getMinoFrequency(__pyx_8genexpr2__pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 168, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":167
 * 
 *     @property
 *     def minofrequencies(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getMinoFrequency(i) for i in range(4)])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.minofrequencies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":171
 * 
 *     @property
 *     def timefrequencies(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getTimeFrequency(i) for i in range(1, 4)])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_15timefrequencies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_15timefrequencies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_15timefrequencies___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_15timefrequencies___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  long __pyx_8genexpr3__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":172
 *     @property
 *     def timefrequencies(self):
 *         return np.array([self.geocpp.getTimeFrequency(i) for i in range(1, 4)])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    for (__pyx_t_4 = 1; __pyx_t_4 < 4; __pyx_t_4+=1) {
      __pyx_8genexpr3__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->geocpp->getTimeFrequency(__pyx_8genexpr3__pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":171
 * 
 *     @property
 *     def timefrequencies(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getTimeFrequency(i) for i in range(1, 4)])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.timefrequencies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":175
 * 
 *     @property
 *     def frequencies(self):             # <<<<<<<<<<<<<<
 *         return self.timefrequencies
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_11frequencies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_11frequencies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_11frequencies___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_11frequencies___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":176
 *     @property
 *     def frequencies(self):
 *         return self.timefrequencies             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_timefrequencies); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":175
 * 
 *     @property
 *     def frequencies(self):             # <<<<<<<<<<<<<<
 *         return self.timefrequencies
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.frequencies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":179
 * 
 *     @property
 *     def carterfrequencies(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getCarterFrequency(i) for i in range(1, 4)])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_17carterfrequencies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_17carterfrequencies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_17carterfrequencies___get__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_17carterfrequencies___get__(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  long __pyx_8genexpr4__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/geo_wrap.pyx":180
 *     @property
 *     def carterfrequencies(self):
 *         return np.array([self.geocpp.getCarterFrequency(i) for i in range(1, 4)])             # <<<<<<<<<<<<<<
 * 
 *     def mode_time_frequency(self, np.ndarray[ndim=1, dtype=np.int64_t] kvec):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    for (__pyx_t_4 = 1; __pyx_t_4 < 4; __pyx_t_4+=1) {
      __pyx_8genexpr4__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->geocpp->getCarterFrequency(__pyx_8genexpr4__pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":179
 * 
 *     @property
 *     def carterfrequencies(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getCarterFrequency(i) for i in range(1, 4)])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.carterfrequencies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":182
 *         return np.array([self.geocpp.getCarterFrequency(i) for i in range(1, 4)])
 * 
 *     def mode_time_frequency(self, np.ndarray[ndim=1, dtype=np.int64_t] kvec):             # <<<<<<<<<<<<<<
 *         return np.dot(kvec, (self.frequencies))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_5mode_time_frequency(PyObject *__pyx_v_self, PyObject *__pyx_v_kvec); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_5mode_time_frequency(PyObject *__pyx_v_self, PyObject *__pyx_v_kvec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mode_time_frequency (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kvec), __pyx_ptype_5numpy_ndarray, 1, "kvec", 0))) __PYX_ERR(0, 182, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_4mode_time_frequency(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((PyArrayObject *)__pyx_v_kvec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_4mode_time_frequency(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_kvec) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_kvec;
  __Pyx_Buffer __pyx_pybuffer_kvec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mode_time_frequency", 0);
  __pyx_pybuffer_kvec.pybuffer.buf = NULL;
  __pyx_pybuffer_kvec.refcount = 0;
  __pyx_pybuffernd_kvec.data = NULL;
  __pyx_pybuffernd_kvec.rcbuffer = &__pyx_pybuffer_kvec;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_kvec.rcbuffer->pybuffer, (PyObject*)__pyx_v_kvec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 182, __pyx_L1_error)
  }
  __pyx_pybuffernd_kvec.diminfo[0].strides = __pyx_pybuffernd_kvec.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_kvec.diminfo[0].shape = __pyx_pybuffernd_kvec.rcbuffer->pybuffer.shape[0];

  /* "cython/geo_wrap.pyx":183
 * 
 *     def mode_time_frequency(self, np.ndarray[ndim=1, dtype=np.int64_t] kvec):
 *         return np.dot(kvec, (self.frequencies))             # <<<<<<<<<<<<<<
 * 
 *     mode_frequency = mode_time_frequency
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_frequencies); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_kvec), __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_kvec), __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_kvec));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_kvec));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_kvec));
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":182
 *         return np.array([self.geocpp.getCarterFrequency(i) for i in range(1, 4)])
 * 
 *     def mode_time_frequency(self, np.ndarray[ndim=1, dtype=np.int64_t] kvec):             # <<<<<<<<<<<<<<
 *         return np.dot(kvec, (self.frequencies))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_kvec.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.mode_time_frequency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_kvec.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":187
 *     mode_frequency = mode_time_frequency
 * 
 *     def mode_carter_frequency(self, np.ndarray[ndim=1, dtype=np.int64_t] kvec):             # <<<<<<<<<<<<<<
 *         return np.dot(kvec,(self.carterfrequencies))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_7mode_carter_frequency(PyObject *__pyx_v_self, PyObject *__pyx_v_kvec); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_7mode_carter_frequency(PyObject *__pyx_v_self, PyObject *__pyx_v_kvec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mode_carter_frequency (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kvec), __pyx_ptype_5numpy_ndarray, 1, "kvec", 0))) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_6mode_carter_frequency(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((PyArrayObject *)__pyx_v_kvec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_6mode_carter_frequency(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_kvec) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_kvec;
  __Pyx_Buffer __pyx_pybuffer_kvec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mode_carter_frequency", 0);
  __pyx_pybuffer_kvec.pybuffer.buf = NULL;
  __pyx_pybuffer_kvec.refcount = 0;
  __pyx_pybuffernd_kvec.data = NULL;
  __pyx_pybuffernd_kvec.rcbuffer = &__pyx_pybuffer_kvec;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_kvec.rcbuffer->pybuffer, (PyObject*)__pyx_v_kvec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 187, __pyx_L1_error)
  }
  __pyx_pybuffernd_kvec.diminfo[0].strides = __pyx_pybuffernd_kvec.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_kvec.diminfo[0].shape = __pyx_pybuffernd_kvec.rcbuffer->pybuffer.shape[0];

  /* "cython/geo_wrap.pyx":188
 * 
 *     def mode_carter_frequency(self, np.ndarray[ndim=1, dtype=np.int64_t] kvec):
 *         return np.dot(kvec,(self.carterfrequencies))             # <<<<<<<<<<<<<<
 * 
 *     cdef void getTimePositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_carterfrequencies); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_kvec), __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_kvec), __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_kvec));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_kvec));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_kvec));
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":187
 *     mode_frequency = mode_time_frequency
 * 
 *     def mode_carter_frequency(self, np.ndarray[ndim=1, dtype=np.int64_t] kvec):             # <<<<<<<<<<<<<<
 *         return np.dot(kvec,(self.carterfrequencies))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_kvec.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.mode_carter_frequency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_kvec.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":190
 *         return np.dot(kvec,(self.carterfrequencies))
 * 
 *     cdef void getTimePositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             t[i] = self.geocpp.getTimePositionOfMinoTime(la[i])
 */

static void __pyx_f_11cybhpt_full_12KerrGeodesic_getTimePositionOfMinoTimeArray(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_t, __pyx_t_5numpy_float64_t *__pyx_v_la, int __pyx_v_n) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("getTimePositionOfMinoTimeArray", 0);

  /* "cython/geo_wrap.pyx":191
 * 
 *     cdef void getTimePositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             t[i] = self.geocpp.getTimePositionOfMinoTime(la[i])
 *     cdef void getRadialPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cython/geo_wrap.pyx":192
 *     cdef void getTimePositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):
 *             t[i] = self.geocpp.getTimePositionOfMinoTime(la[i])             # <<<<<<<<<<<<<<
 *     cdef void getRadialPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):
 */
    (__pyx_v_t[__pyx_v_i]) = __pyx_v_self->geocpp->getTimePositionOfMinoTime((__pyx_v_la[__pyx_v_i]));
  }

  /* "cython/geo_wrap.pyx":190
 *         return np.dot(kvec,(self.carterfrequencies))
 * 
 *     cdef void getTimePositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             t[i] = self.geocpp.getTimePositionOfMinoTime(la[i])
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/geo_wrap.pyx":193
 *         for i in range(n):
 *             t[i] = self.geocpp.getTimePositionOfMinoTime(la[i])
 *     cdef void getRadialPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             t[i] = self.geocpp.getRadialPositionOfMinoTime(la[i])
 */

static void __pyx_f_11cybhpt_full_12KerrGeodesic_getRadialPositionOfMinoTimeArray(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_t, __pyx_t_5numpy_float64_t *__pyx_v_la, int __pyx_v_n) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("getRadialPositionOfMinoTimeArray", 0);

  /* "cython/geo_wrap.pyx":194
 *             t[i] = self.geocpp.getTimePositionOfMinoTime(la[i])
 *     cdef void getRadialPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             t[i] = self.geocpp.getRadialPositionOfMinoTime(la[i])
 *     cdef void getPolarPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cython/geo_wrap.pyx":195
 *     cdef void getRadialPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):
 *             t[i] = self.geocpp.getRadialPositionOfMinoTime(la[i])             # <<<<<<<<<<<<<<
 *     cdef void getPolarPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):
 */
    (__pyx_v_t[__pyx_v_i]) = __pyx_v_self->geocpp->getRadialPositionOfMinoTime((__pyx_v_la[__pyx_v_i]));
  }

  /* "cython/geo_wrap.pyx":193
 *         for i in range(n):
 *             t[i] = self.geocpp.getTimePositionOfMinoTime(la[i])
 *     cdef void getRadialPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             t[i] = self.geocpp.getRadialPositionOfMinoTime(la[i])
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/geo_wrap.pyx":196
 *         for i in range(n):
 *             t[i] = self.geocpp.getRadialPositionOfMinoTime(la[i])
 *     cdef void getPolarPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             t[i] = self.geocpp.getPolarPositionOfMinoTime(la[i])
 */

static void __pyx_f_11cybhpt_full_12KerrGeodesic_getPolarPositionOfMinoTimeArray(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_t, __pyx_t_5numpy_float64_t *__pyx_v_la, int __pyx_v_n) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("getPolarPositionOfMinoTimeArray", 0);

  /* "cython/geo_wrap.pyx":197
 *             t[i] = self.geocpp.getRadialPositionOfMinoTime(la[i])
 *     cdef void getPolarPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             t[i] = self.geocpp.getPolarPositionOfMinoTime(la[i])
 *     cdef void getAzimuthalPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cython/geo_wrap.pyx":198
 *     cdef void getPolarPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):
 *             t[i] = self.geocpp.getPolarPositionOfMinoTime(la[i])             # <<<<<<<<<<<<<<
 *     cdef void getAzimuthalPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):
 */
    (__pyx_v_t[__pyx_v_i]) = __pyx_v_self->geocpp->getPolarPositionOfMinoTime((__pyx_v_la[__pyx_v_i]));
  }

  /* "cython/geo_wrap.pyx":196
 *         for i in range(n):
 *             t[i] = self.geocpp.getRadialPositionOfMinoTime(la[i])
 *     cdef void getPolarPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             t[i] = self.geocpp.getPolarPositionOfMinoTime(la[i])
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/geo_wrap.pyx":199
 *         for i in range(n):
 *             t[i] = self.geocpp.getPolarPositionOfMinoTime(la[i])
 *     cdef void getAzimuthalPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             t[i] = self.geocpp.getAzimuthalPositionOfMinoTime(la[i])
 */

static void __pyx_f_11cybhpt_full_12KerrGeodesic_getAzimuthalPositionOfMinoTimeArray(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_t, __pyx_t_5numpy_float64_t *__pyx_v_la, int __pyx_v_n) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("getAzimuthalPositionOfMinoTimeArray", 0);

  /* "cython/geo_wrap.pyx":200
 *             t[i] = self.geocpp.getPolarPositionOfMinoTime(la[i])
 *     cdef void getAzimuthalPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             t[i] = self.geocpp.getAzimuthalPositionOfMinoTime(la[i])
 * 
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cython/geo_wrap.pyx":201
 *     cdef void getAzimuthalPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):
 *         for i in range(n):
 *             t[i] = self.geocpp.getAzimuthalPositionOfMinoTime(la[i])             # <<<<<<<<<<<<<<
 * 
 *     def time_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 */
    (__pyx_v_t[__pyx_v_i]) = __pyx_v_self->geocpp->getAzimuthalPositionOfMinoTime((__pyx_v_la[__pyx_v_i]));
  }

  /* "cython/geo_wrap.pyx":199
 *         for i in range(n):
 *             t[i] = self.geocpp.getPolarPositionOfMinoTime(la[i])
 *     cdef void getAzimuthalPositionOfMinoTimeArray(self, np.float64_t *t, np.float64_t *la, int n):             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             t[i] = self.geocpp.getAzimuthalPositionOfMinoTime(la[i])
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/geo_wrap.pyx":203
 *             t[i] = self.geocpp.getAzimuthalPositionOfMinoTime(la[i])
 * 
 *     def time_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] t = np.empty(n, dtype = np.float64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_9time_position(PyObject *__pyx_v_self, PyObject *__pyx_v_la); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_9time_position(PyObject *__pyx_v_self, PyObject *__pyx_v_la) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_position (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_la), __pyx_ptype_5numpy_ndarray, 1, "la", 0))) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_8time_position(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((PyArrayObject *)__pyx_v_la));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_8time_position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la) {
  int __pyx_v_n;
  PyArrayObject *__pyx_v_t = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_la;
  __Pyx_Buffer __pyx_pybuffer_la;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_t;
  __Pyx_Buffer __pyx_pybuffer_t;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("time_position", 0);
  __pyx_pybuffer_t.pybuffer.buf = NULL;
  __pyx_pybuffer_t.refcount = 0;
  __pyx_pybuffernd_t.data = NULL;
  __pyx_pybuffernd_t.rcbuffer = &__pyx_pybuffer_t;
  __pyx_pybuffer_la.pybuffer.buf = NULL;
  __pyx_pybuffer_la.refcount = 0;
  __pyx_pybuffernd_la.data = NULL;
  __pyx_pybuffernd_la.rcbuffer = &__pyx_pybuffer_la;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_la.rcbuffer->pybuffer, (PyObject*)__pyx_v_la, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 203, __pyx_L1_error)
  }
  __pyx_pybuffernd_la.diminfo[0].strides = __pyx_pybuffernd_la.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_la.diminfo[0].shape = __pyx_pybuffernd_la.rcbuffer->pybuffer.shape[0];

  /* "cython/geo_wrap.pyx":204
 * 
 *     def time_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef int n = la.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] t = np.empty(n, dtype = np.float64)
 *         self.getTimePositionOfMinoTimeArray(&t[0], &la[0], n)
 */
  __pyx_v_n = (__pyx_v_la->dimensions[0]);

  /* "cython/geo_wrap.pyx":205
 *     def time_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] t = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         self.getTimePositionOfMinoTimeArray(&t[0], &la[0], n)
 *         # for some reason this is marginally slower than the line above with the cdef function
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 205, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_t.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_t = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_t.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 205, __pyx_L1_error)
    } else {__pyx_pybuffernd_t.diminfo[0].strides = __pyx_pybuffernd_t.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_t.diminfo[0].shape = __pyx_pybuffernd_t.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_t = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":206
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] t = np.empty(n, dtype = np.float64)
 *         self.getTimePositionOfMinoTimeArray(&t[0], &la[0], n)             # <<<<<<<<<<<<<<
 *         # for some reason this is marginally slower than the line above with the cdef function
 *         # for i in range(n):
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_t.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_t.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 206, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_la.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_la.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 206, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_11cybhpt_full_KerrGeodesic *)__pyx_v_self->__pyx_vtab)->getTimePositionOfMinoTimeArray(__pyx_v_self, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_t.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_t.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_la.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_la.diminfo[0].strides))), __pyx_v_n);

  /* "cython/geo_wrap.pyx":210
 *         # for i in range(n):
 *         #     t[i] = self.geocpp.getTimePositionOfMinoTime(la[i])
 *         return t             # <<<<<<<<<<<<<<
 * 
 *     def radial_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = ((PyObject *)__pyx_v_t);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":203
 *             t[i] = self.geocpp.getAzimuthalPositionOfMinoTime(la[i])
 * 
 *     def time_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] t = np.empty(n, dtype = np.float64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_t.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.time_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_t.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":212
 *         return t
 * 
 *     def radial_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_11radial_position(PyObject *__pyx_v_self, PyObject *__pyx_v_la); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_11radial_position(PyObject *__pyx_v_self, PyObject *__pyx_v_la) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radial_position (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_la), __pyx_ptype_5numpy_ndarray, 1, "la", 0))) __PYX_ERR(0, 212, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_10radial_position(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((PyArrayObject *)__pyx_v_la));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_10radial_position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la) {
  int __pyx_v_n;
  PyArrayObject *__pyx_v_x = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_la;
  __Pyx_Buffer __pyx_pybuffer_la;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_x;
  __Pyx_Buffer __pyx_pybuffer_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radial_position", 0);
  __pyx_pybuffer_x.pybuffer.buf = NULL;
  __pyx_pybuffer_x.refcount = 0;
  __pyx_pybuffernd_x.data = NULL;
  __pyx_pybuffernd_x.rcbuffer = &__pyx_pybuffer_x;
  __pyx_pybuffer_la.pybuffer.buf = NULL;
  __pyx_pybuffer_la.refcount = 0;
  __pyx_pybuffernd_la.data = NULL;
  __pyx_pybuffernd_la.rcbuffer = &__pyx_pybuffer_la;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_la.rcbuffer->pybuffer, (PyObject*)__pyx_v_la, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 212, __pyx_L1_error)
  }
  __pyx_pybuffernd_la.diminfo[0].strides = __pyx_pybuffernd_la.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_la.diminfo[0].shape = __pyx_pybuffernd_la.rcbuffer->pybuffer.shape[0];

  /* "cython/geo_wrap.pyx":213
 * 
 *     def radial_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef int n = la.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 *         self.getRadialPositionOfMinoTimeArray(&x[0], &la[0], n)
 */
  __pyx_v_n = (__pyx_v_la->dimensions[0]);

  /* "cython/geo_wrap.pyx":214
 *     def radial_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         self.getRadialPositionOfMinoTimeArray(&x[0], &la[0], n)
 *         return x
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 214, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_x.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_x = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_x.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 214, __pyx_L1_error)
    } else {__pyx_pybuffernd_x.diminfo[0].strides = __pyx_pybuffernd_x.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_x.diminfo[0].shape = __pyx_pybuffernd_x.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_x = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":215
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 *         self.getRadialPositionOfMinoTimeArray(&x[0], &la[0], n)             # <<<<<<<<<<<<<<
 *         return x
 * 
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_x.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_x.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 215, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_la.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_la.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 215, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_11cybhpt_full_KerrGeodesic *)__pyx_v_self->__pyx_vtab)->getRadialPositionOfMinoTimeArray(__pyx_v_self, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_x.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_x.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_la.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_la.diminfo[0].strides))), __pyx_v_n);

  /* "cython/geo_wrap.pyx":216
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 *         self.getRadialPositionOfMinoTimeArray(&x[0], &la[0], n)
 *         return x             # <<<<<<<<<<<<<<
 * 
 *     def polar_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_x));
  __pyx_r = ((PyObject *)__pyx_v_x);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":212
 *         return t
 * 
 *     def radial_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_x.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.radial_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_x.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":218
 *         return x
 * 
 *     def polar_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_13polar_position(PyObject *__pyx_v_self, PyObject *__pyx_v_la); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_13polar_position(PyObject *__pyx_v_self, PyObject *__pyx_v_la) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("polar_position (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_la), __pyx_ptype_5numpy_ndarray, 1, "la", 0))) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_12polar_position(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((PyArrayObject *)__pyx_v_la));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_12polar_position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la) {
  int __pyx_v_n;
  PyArrayObject *__pyx_v_x = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_la;
  __Pyx_Buffer __pyx_pybuffer_la;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_x;
  __Pyx_Buffer __pyx_pybuffer_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("polar_position", 0);
  __pyx_pybuffer_x.pybuffer.buf = NULL;
  __pyx_pybuffer_x.refcount = 0;
  __pyx_pybuffernd_x.data = NULL;
  __pyx_pybuffernd_x.rcbuffer = &__pyx_pybuffer_x;
  __pyx_pybuffer_la.pybuffer.buf = NULL;
  __pyx_pybuffer_la.refcount = 0;
  __pyx_pybuffernd_la.data = NULL;
  __pyx_pybuffernd_la.rcbuffer = &__pyx_pybuffer_la;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_la.rcbuffer->pybuffer, (PyObject*)__pyx_v_la, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 218, __pyx_L1_error)
  }
  __pyx_pybuffernd_la.diminfo[0].strides = __pyx_pybuffernd_la.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_la.diminfo[0].shape = __pyx_pybuffernd_la.rcbuffer->pybuffer.shape[0];

  /* "cython/geo_wrap.pyx":219
 * 
 *     def polar_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef int n = la.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 *         self.getPolarPositionOfMinoTimeArray(&x[0], &la[0], n)
 */
  __pyx_v_n = (__pyx_v_la->dimensions[0]);

  /* "cython/geo_wrap.pyx":220
 *     def polar_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         self.getPolarPositionOfMinoTimeArray(&x[0], &la[0], n)
 *         return x
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_x.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_x = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_x.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 220, __pyx_L1_error)
    } else {__pyx_pybuffernd_x.diminfo[0].strides = __pyx_pybuffernd_x.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_x.diminfo[0].shape = __pyx_pybuffernd_x.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_x = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":221
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 *         self.getPolarPositionOfMinoTimeArray(&x[0], &la[0], n)             # <<<<<<<<<<<<<<
 *         return x
 * 
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_x.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_x.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 221, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_la.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_la.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 221, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_11cybhpt_full_KerrGeodesic *)__pyx_v_self->__pyx_vtab)->getPolarPositionOfMinoTimeArray(__pyx_v_self, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_x.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_x.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_la.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_la.diminfo[0].strides))), __pyx_v_n);

  /* "cython/geo_wrap.pyx":222
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 *         self.getPolarPositionOfMinoTimeArray(&x[0], &la[0], n)
 *         return x             # <<<<<<<<<<<<<<
 * 
 *     def azimuthal_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_x));
  __pyx_r = ((PyObject *)__pyx_v_x);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":218
 *         return x
 * 
 *     def polar_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_x.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.polar_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_x.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":224
 *         return x
 * 
 *     def azimuthal_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_15azimuthal_position(PyObject *__pyx_v_self, PyObject *__pyx_v_la); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_15azimuthal_position(PyObject *__pyx_v_self, PyObject *__pyx_v_la) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("azimuthal_position (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_la), __pyx_ptype_5numpy_ndarray, 1, "la", 0))) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_14azimuthal_position(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((PyArrayObject *)__pyx_v_la));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_14azimuthal_position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la) {
  int __pyx_v_n;
  PyArrayObject *__pyx_v_x = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_la;
  __Pyx_Buffer __pyx_pybuffer_la;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_x;
  __Pyx_Buffer __pyx_pybuffer_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("azimuthal_position", 0);
  __pyx_pybuffer_x.pybuffer.buf = NULL;
  __pyx_pybuffer_x.refcount = 0;
  __pyx_pybuffernd_x.data = NULL;
  __pyx_pybuffernd_x.rcbuffer = &__pyx_pybuffer_x;
  __pyx_pybuffer_la.pybuffer.buf = NULL;
  __pyx_pybuffer_la.refcount = 0;
  __pyx_pybuffernd_la.data = NULL;
  __pyx_pybuffernd_la.rcbuffer = &__pyx_pybuffer_la;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_la.rcbuffer->pybuffer, (PyObject*)__pyx_v_la, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 224, __pyx_L1_error)
  }
  __pyx_pybuffernd_la.diminfo[0].strides = __pyx_pybuffernd_la.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_la.diminfo[0].shape = __pyx_pybuffernd_la.rcbuffer->pybuffer.shape[0];

  /* "cython/geo_wrap.pyx":225
 * 
 *     def azimuthal_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef int n = la.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 *         self.getAzimuthalPositionOfMinoTimeArray(&x[0], &la[0], n)
 */
  __pyx_v_n = (__pyx_v_la->dimensions[0]);

  /* "cython/geo_wrap.pyx":226
 *     def azimuthal_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         self.getAzimuthalPositionOfMinoTimeArray(&x[0], &la[0], n)
 *         return x
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_x.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_x = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_x.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 226, __pyx_L1_error)
    } else {__pyx_pybuffernd_x.diminfo[0].strides = __pyx_pybuffernd_x.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_x.diminfo[0].shape = __pyx_pybuffernd_x.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_x = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":227
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 *         self.getAzimuthalPositionOfMinoTimeArray(&x[0], &la[0], n)             # <<<<<<<<<<<<<<
 *         return x
 * 
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_x.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_x.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 227, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_la.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_la.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 227, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_11cybhpt_full_KerrGeodesic *)__pyx_v_self->__pyx_vtab)->getAzimuthalPositionOfMinoTimeArray(__pyx_v_self, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_x.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_x.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_la.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_la.diminfo[0].strides))), __pyx_v_n);

  /* "cython/geo_wrap.pyx":228
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 *         self.getAzimuthalPositionOfMinoTimeArray(&x[0], &la[0], n)
 *         return x             # <<<<<<<<<<<<<<
 * 
 *     def get_time_accumulation(self, int j):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_x));
  __pyx_r = ((PyObject *)__pyx_v_x);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":224
 *         return x
 * 
 *     def azimuthal_position(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef int n = la.shape[0]
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] x = np.empty(n, dtype = np.float64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_x.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.azimuthal_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_x.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":230
 *         return x
 * 
 *     def get_time_accumulation(self, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeAccumulation(j)
 *         cdef int n = deltaX_cpp.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_17get_time_accumulation(PyObject *__pyx_v_self, PyObject *__pyx_arg_j); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_17get_time_accumulation(PyObject *__pyx_v_self, PyObject *__pyx_arg_j) {
  int __pyx_v_j;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_time_accumulation (wrapper)", 0);
  assert(__pyx_arg_j); {
    __pyx_v_j = __Pyx_PyInt_As_int(__pyx_arg_j); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_time_accumulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_16get_time_accumulation(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((int)__pyx_v_j));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_16get_time_accumulation(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, int __pyx_v_j) {
  std::vector<double>  __pyx_v_deltaX_cpp;
  int __pyx_v_n;
  PyArrayObject *__pyx_v_deltaX = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_deltaX;
  __Pyx_Buffer __pyx_pybuffer_deltaX;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_time_accumulation", 0);
  __pyx_pybuffer_deltaX.pybuffer.buf = NULL;
  __pyx_pybuffer_deltaX.refcount = 0;
  __pyx_pybuffernd_deltaX.data = NULL;
  __pyx_pybuffernd_deltaX.rcbuffer = &__pyx_pybuffer_deltaX;

  /* "cython/geo_wrap.pyx":231
 * 
 *     def get_time_accumulation(self, int j):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeAccumulation(j)             # <<<<<<<<<<<<<<
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 */
  __pyx_v_deltaX_cpp = __pyx_v_self->geocpp->getTimeAccumulation(__pyx_v_j);

  /* "cython/geo_wrap.pyx":232
 *     def get_time_accumulation(self, int j):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeAccumulation(j)
 *         cdef int n = deltaX_cpp.size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 */
  __pyx_v_n = __pyx_v_deltaX_cpp.size();

  /* "cython/geo_wrap.pyx":233
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeAccumulation(j)
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_deltaX = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 233, __pyx_L1_error)
    } else {__pyx_pybuffernd_deltaX.diminfo[0].strides = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_deltaX.diminfo[0].shape = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_deltaX = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":234
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX
 */
  __pyx_t_7 = __pyx_v_n;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "cython/geo_wrap.pyx":235
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]             # <<<<<<<<<<<<<<
 *         return deltaX
 * 
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_deltaX.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_deltaX.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 235, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_deltaX.diminfo[0].strides) = (__pyx_v_deltaX_cpp[__pyx_v_i]);
  }

  /* "cython/geo_wrap.pyx":236
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX             # <<<<<<<<<<<<<<
 * 
 *     def get_radial_points(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_deltaX));
  __pyx_r = ((PyObject *)__pyx_v_deltaX);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":230
 *         return x
 * 
 *     def get_time_accumulation(self, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeAccumulation(j)
 *         cdef int n = deltaX_cpp.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_time_accumulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_deltaX);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":238
 *         return deltaX
 * 
 *     def get_radial_points(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialPosition()
 *         cdef int n = deltaX_cpp.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_19get_radial_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_19get_radial_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_radial_points (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_18get_radial_points(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_18get_radial_points(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  std::vector<double>  __pyx_v_deltaX_cpp;
  int __pyx_v_n;
  PyArrayObject *__pyx_v_deltaX = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_deltaX;
  __Pyx_Buffer __pyx_pybuffer_deltaX;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_radial_points", 0);
  __pyx_pybuffer_deltaX.pybuffer.buf = NULL;
  __pyx_pybuffer_deltaX.refcount = 0;
  __pyx_pybuffernd_deltaX.data = NULL;
  __pyx_pybuffernd_deltaX.rcbuffer = &__pyx_pybuffer_deltaX;

  /* "cython/geo_wrap.pyx":239
 * 
 *     def get_radial_points(self):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialPosition()             # <<<<<<<<<<<<<<
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 */
  __pyx_v_deltaX_cpp = __pyx_v_self->geocpp->getRadialPosition();

  /* "cython/geo_wrap.pyx":240
 *     def get_radial_points(self):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialPosition()
 *         cdef int n = deltaX_cpp.size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 */
  __pyx_v_n = __pyx_v_deltaX_cpp.size();

  /* "cython/geo_wrap.pyx":241
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialPosition()
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_deltaX = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 241, __pyx_L1_error)
    } else {__pyx_pybuffernd_deltaX.diminfo[0].strides = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_deltaX.diminfo[0].shape = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_deltaX = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":242
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX
 */
  __pyx_t_7 = __pyx_v_n;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "cython/geo_wrap.pyx":243
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]             # <<<<<<<<<<<<<<
 *         return deltaX
 * 
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_deltaX.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_deltaX.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 243, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_deltaX.diminfo[0].strides) = (__pyx_v_deltaX_cpp[__pyx_v_i]);
  }

  /* "cython/geo_wrap.pyx":244
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX             # <<<<<<<<<<<<<<
 * 
 *     def get_polar_points(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_deltaX));
  __pyx_r = ((PyObject *)__pyx_v_deltaX);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":238
 *         return deltaX
 * 
 *     def get_radial_points(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialPosition()
 *         cdef int n = deltaX_cpp.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_radial_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_deltaX);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":246
 *         return deltaX
 * 
 *     def get_polar_points(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarPosition()
 *         cdef int n = deltaX_cpp.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_21get_polar_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_21get_polar_points(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_polar_points (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_20get_polar_points(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_20get_polar_points(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  std::vector<double>  __pyx_v_deltaX_cpp;
  int __pyx_v_n;
  PyArrayObject *__pyx_v_deltaX = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_deltaX;
  __Pyx_Buffer __pyx_pybuffer_deltaX;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_polar_points", 0);
  __pyx_pybuffer_deltaX.pybuffer.buf = NULL;
  __pyx_pybuffer_deltaX.refcount = 0;
  __pyx_pybuffernd_deltaX.data = NULL;
  __pyx_pybuffernd_deltaX.rcbuffer = &__pyx_pybuffer_deltaX;

  /* "cython/geo_wrap.pyx":247
 * 
 *     def get_polar_points(self):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarPosition()             # <<<<<<<<<<<<<<
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 */
  __pyx_v_deltaX_cpp = __pyx_v_self->geocpp->getPolarPosition();

  /* "cython/geo_wrap.pyx":248
 *     def get_polar_points(self):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarPosition()
 *         cdef int n = deltaX_cpp.size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 */
  __pyx_v_n = __pyx_v_deltaX_cpp.size();

  /* "cython/geo_wrap.pyx":249
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarPosition()
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_deltaX = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 249, __pyx_L1_error)
    } else {__pyx_pybuffernd_deltaX.diminfo[0].strides = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_deltaX.diminfo[0].shape = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_deltaX = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":250
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX
 */
  __pyx_t_7 = __pyx_v_n;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "cython/geo_wrap.pyx":251
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]             # <<<<<<<<<<<<<<
 *         return deltaX
 * 
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_deltaX.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_deltaX.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 251, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_deltaX.diminfo[0].strides) = (__pyx_v_deltaX_cpp[__pyx_v_i]);
  }

  /* "cython/geo_wrap.pyx":252
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX             # <<<<<<<<<<<<<<
 * 
 *     def get_azimuthal_accumulation(self, int j):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_deltaX));
  __pyx_r = ((PyObject *)__pyx_v_deltaX);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":246
 *         return deltaX
 * 
 *     def get_polar_points(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarPosition()
 *         cdef int n = deltaX_cpp.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_polar_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_deltaX);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":254
 *         return deltaX
 * 
 *     def get_azimuthal_accumulation(self, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalAccumulation(j)
 *         cdef int n = deltaX_cpp.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_23get_azimuthal_accumulation(PyObject *__pyx_v_self, PyObject *__pyx_arg_j); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_23get_azimuthal_accumulation(PyObject *__pyx_v_self, PyObject *__pyx_arg_j) {
  int __pyx_v_j;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_azimuthal_accumulation (wrapper)", 0);
  assert(__pyx_arg_j); {
    __pyx_v_j = __Pyx_PyInt_As_int(__pyx_arg_j); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_azimuthal_accumulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_22get_azimuthal_accumulation(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((int)__pyx_v_j));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_22get_azimuthal_accumulation(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, int __pyx_v_j) {
  std::vector<double>  __pyx_v_deltaX_cpp;
  int __pyx_v_n;
  PyArrayObject *__pyx_v_deltaX = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_deltaX;
  __Pyx_Buffer __pyx_pybuffer_deltaX;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_azimuthal_accumulation", 0);
  __pyx_pybuffer_deltaX.pybuffer.buf = NULL;
  __pyx_pybuffer_deltaX.refcount = 0;
  __pyx_pybuffernd_deltaX.data = NULL;
  __pyx_pybuffernd_deltaX.rcbuffer = &__pyx_pybuffer_deltaX;

  /* "cython/geo_wrap.pyx":255
 * 
 *     def get_azimuthal_accumulation(self, int j):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalAccumulation(j)             # <<<<<<<<<<<<<<
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 */
  __pyx_v_deltaX_cpp = __pyx_v_self->geocpp->getAzimuthalAccumulation(__pyx_v_j);

  /* "cython/geo_wrap.pyx":256
 *     def get_azimuthal_accumulation(self, int j):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalAccumulation(j)
 *         cdef int n = deltaX_cpp.size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 */
  __pyx_v_n = __pyx_v_deltaX_cpp.size();

  /* "cython/geo_wrap.pyx":257
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalAccumulation(j)
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_deltaX = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 257, __pyx_L1_error)
    } else {__pyx_pybuffernd_deltaX.diminfo[0].strides = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_deltaX.diminfo[0].shape = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_deltaX = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":258
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX
 */
  __pyx_t_7 = __pyx_v_n;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "cython/geo_wrap.pyx":259
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]             # <<<<<<<<<<<<<<
 *         return deltaX
 * 
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_deltaX.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_deltaX.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 259, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_deltaX.diminfo[0].strides) = (__pyx_v_deltaX_cpp[__pyx_v_i]);
  }

  /* "cython/geo_wrap.pyx":260
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX             # <<<<<<<<<<<<<<
 * 
 *     def position(self, double la):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_deltaX));
  __pyx_r = ((PyObject *)__pyx_v_deltaX);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":254
 *         return deltaX
 * 
 *     def get_azimuthal_accumulation(self, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalAccumulation(j)
 *         cdef int n = deltaX_cpp.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_azimuthal_accumulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_deltaX);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":262
 *         return deltaX
 * 
 *     def position(self, double la):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getTimePositionOfMinoTime(la), self.geocpp.getRadialPositionOfMinoTime(la), self.geocpp.getPolarPositionOfMinoTime(la), self.geocpp.getAzimuthalPositionOfMinoTime(la)])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_25position(PyObject *__pyx_v_self, PyObject *__pyx_arg_la); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_25position(PyObject *__pyx_v_self, PyObject *__pyx_arg_la) {
  double __pyx_v_la;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("position (wrapper)", 0);
  assert(__pyx_arg_la); {
    __pyx_v_la = __pyx_PyFloat_AsDouble(__pyx_arg_la); if (unlikely((__pyx_v_la == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_24position(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((double)__pyx_v_la));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_24position(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, double __pyx_v_la) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("position", 0);

  /* "cython/geo_wrap.pyx":263
 * 
 *     def position(self, double la):
 *         return np.array([self.geocpp.getTimePositionOfMinoTime(la), self.geocpp.getRadialPositionOfMinoTime(la), self.geocpp.getPolarPositionOfMinoTime(la), self.geocpp.getAzimuthalPositionOfMinoTime(la)])             # <<<<<<<<<<<<<<
 * 
 *     def position_vec(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->geocpp->getTimePositionOfMinoTime(__pyx_v_la)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->geocpp->getRadialPositionOfMinoTime(__pyx_v_la)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->geocpp->getPolarPositionOfMinoTime(__pyx_v_la)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->geocpp->getAzimuthalPositionOfMinoTime(__pyx_v_la)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":262
 *         return deltaX
 * 
 *     def position(self, double la):             # <<<<<<<<<<<<<<
 *         return np.array([self.geocpp.getTimePositionOfMinoTime(la), self.geocpp.getRadialPositionOfMinoTime(la), self.geocpp.getPolarPositionOfMinoTime(la), self.geocpp.getAzimuthalPositionOfMinoTime(la)])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":265
 *         return np.array([self.geocpp.getTimePositionOfMinoTime(la), self.geocpp.getRadialPositionOfMinoTime(la), self.geocpp.getPolarPositionOfMinoTime(la), self.geocpp.getAzimuthalPositionOfMinoTime(la)])
 * 
 *     def position_vec(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=2, dtype=np.float64_t] xp = np.empty((la.shape[0], 4), dtype=np.float64)
 *         for i in range(la.shape[0]):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_27position_vec(PyObject *__pyx_v_self, PyObject *__pyx_v_la); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_27position_vec(PyObject *__pyx_v_self, PyObject *__pyx_v_la) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("position_vec (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_la), __pyx_ptype_5numpy_ndarray, 1, "la", 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_26position_vec(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((PyArrayObject *)__pyx_v_la));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_26position_vec(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, PyArrayObject *__pyx_v_la) {
  PyArrayObject *__pyx_v_xp = 0;
  npy_intp __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_la;
  __Pyx_Buffer __pyx_pybuffer_la;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_xp;
  __Pyx_Buffer __pyx_pybuffer_xp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  npy_intp __pyx_t_7;
  npy_intp __pyx_t_8;
  npy_intp __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("position_vec", 0);
  __pyx_pybuffer_xp.pybuffer.buf = NULL;
  __pyx_pybuffer_xp.refcount = 0;
  __pyx_pybuffernd_xp.data = NULL;
  __pyx_pybuffernd_xp.rcbuffer = &__pyx_pybuffer_xp;
  __pyx_pybuffer_la.pybuffer.buf = NULL;
  __pyx_pybuffer_la.refcount = 0;
  __pyx_pybuffernd_la.data = NULL;
  __pyx_pybuffernd_la.rcbuffer = &__pyx_pybuffer_la;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_la.rcbuffer->pybuffer, (PyObject*)__pyx_v_la, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 265, __pyx_L1_error)
  }
  __pyx_pybuffernd_la.diminfo[0].strides = __pyx_pybuffernd_la.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_la.diminfo[0].shape = __pyx_pybuffernd_la.rcbuffer->pybuffer.shape[0];

  /* "cython/geo_wrap.pyx":266
 * 
 *     def position_vec(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef np.ndarray[ndim=2, dtype=np.float64_t] xp = np.empty((la.shape[0], 4), dtype=np.float64)             # <<<<<<<<<<<<<<
 *         for i in range(la.shape[0]):
 *             xp[i] = self.position(la[i])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_la->dimensions[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_4);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xp.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_xp = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_xp.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 266, __pyx_L1_error)
    } else {__pyx_pybuffernd_xp.diminfo[0].strides = __pyx_pybuffernd_xp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_xp.diminfo[0].shape = __pyx_pybuffernd_xp.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_xp.diminfo[1].strides = __pyx_pybuffernd_xp.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_xp.diminfo[1].shape = __pyx_pybuffernd_xp.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_xp = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":267
 *     def position_vec(self, np.ndarray[ndim=1, dtype=np.float64_t] la):
 *         cdef np.ndarray[ndim=2, dtype=np.float64_t] xp = np.empty((la.shape[0], 4), dtype=np.float64)
 *         for i in range(la.shape[0]):             # <<<<<<<<<<<<<<
 *             xp[i] = self.position(la[i])
 *         return xp.T
 */
  __pyx_t_7 = (__pyx_v_la->dimensions[0]);
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "cython/geo_wrap.pyx":268
 *         cdef np.ndarray[ndim=2, dtype=np.float64_t] xp = np.empty((la.shape[0], 4), dtype=np.float64)
 *         for i in range(la.shape[0]):
 *             xp[i] = self.position(la[i])             # <<<<<<<<<<<<<<
 *         return xp.T
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_la.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_la.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 268, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_la.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_la.diminfo[0].strides))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_xp), __pyx_v_i, __pyx_t_5, npy_intp, 1, __Pyx_PyInt_From_Py_intptr_t, 0, 1, 1) < 0)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "cython/geo_wrap.pyx":269
 *         for i in range(la.shape[0]):
 *             xp[i] = self.position(la[i])
 *         return xp.T             # <<<<<<<<<<<<<<
 * 
 *     def mino_time(self, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_xp), __pyx_n_s_T); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":265
 *         return np.array([self.geocpp.getTimePositionOfMinoTime(la), self.geocpp.getRadialPositionOfMinoTime(la), self.geocpp.getPolarPositionOfMinoTime(la), self.geocpp.getAzimuthalPositionOfMinoTime(la)])
 * 
 *     def position_vec(self, np.ndarray[ndim=1, dtype=np.float64_t] la):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=2, dtype=np.float64_t] xp = np.empty((la.shape[0], 4), dtype=np.float64)
 *         for i in range(la.shape[0]):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xp.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.position_vec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_la.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xp.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_xp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":271
 *         return xp.T
 * 
 *     def mino_time(self, double t):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getMinoTimeOfTime(t)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_29mino_time(PyObject *__pyx_v_self, PyObject *__pyx_arg_t); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_29mino_time(PyObject *__pyx_v_self, PyObject *__pyx_arg_t) {
  double __pyx_v_t;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mino_time (wrapper)", 0);
  assert(__pyx_arg_t); {
    __pyx_v_t = __pyx_PyFloat_AsDouble(__pyx_arg_t); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.mino_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_28mino_time(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((double)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_28mino_time(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mino_time", 0);

  /* "cython/geo_wrap.pyx":272
 * 
 *     def mino_time(self, double t):
 *         return self.geocpp.getMinoTimeOfTime(t)             # <<<<<<<<<<<<<<
 * 
 *     def get_time_coefficients(self, int j):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geocpp->getMinoTimeOfTime(__pyx_v_t)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":271
 *         return xp.T
 * 
 *     def mino_time(self, double t):             # <<<<<<<<<<<<<<
 *         return self.geocpp.getMinoTimeOfTime(t)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.mino_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":274
 *         return self.geocpp.getMinoTimeOfTime(t)
 * 
 *     def get_time_coefficients(self, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeCoefficients(j)
 *         cdef int n = deltaX_cpp.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_31get_time_coefficients(PyObject *__pyx_v_self, PyObject *__pyx_arg_j); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_31get_time_coefficients(PyObject *__pyx_v_self, PyObject *__pyx_arg_j) {
  int __pyx_v_j;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_time_coefficients (wrapper)", 0);
  assert(__pyx_arg_j); {
    __pyx_v_j = __Pyx_PyInt_As_int(__pyx_arg_j); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_time_coefficients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_30get_time_coefficients(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((int)__pyx_v_j));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_30get_time_coefficients(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, int __pyx_v_j) {
  std::vector<double>  __pyx_v_deltaX_cpp;
  int __pyx_v_n;
  PyArrayObject *__pyx_v_deltaX = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_deltaX;
  __Pyx_Buffer __pyx_pybuffer_deltaX;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_time_coefficients", 0);
  __pyx_pybuffer_deltaX.pybuffer.buf = NULL;
  __pyx_pybuffer_deltaX.refcount = 0;
  __pyx_pybuffernd_deltaX.data = NULL;
  __pyx_pybuffernd_deltaX.rcbuffer = &__pyx_pybuffer_deltaX;

  /* "cython/geo_wrap.pyx":275
 * 
 *     def get_time_coefficients(self, int j):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeCoefficients(j)             # <<<<<<<<<<<<<<
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 */
  __pyx_v_deltaX_cpp = __pyx_v_self->geocpp->getTimeCoefficients(__pyx_v_j);

  /* "cython/geo_wrap.pyx":276
 *     def get_time_coefficients(self, int j):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeCoefficients(j)
 *         cdef int n = deltaX_cpp.size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 */
  __pyx_v_n = __pyx_v_deltaX_cpp.size();

  /* "cython/geo_wrap.pyx":277
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeCoefficients(j)
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_deltaX = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 277, __pyx_L1_error)
    } else {__pyx_pybuffernd_deltaX.diminfo[0].strides = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_deltaX.diminfo[0].shape = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_deltaX = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":278
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX
 */
  __pyx_t_7 = __pyx_v_n;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "cython/geo_wrap.pyx":279
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]             # <<<<<<<<<<<<<<
 *         return deltaX
 * 
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_deltaX.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_deltaX.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 279, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_deltaX.diminfo[0].strides) = (__pyx_v_deltaX_cpp[__pyx_v_i]);
  }

  /* "cython/geo_wrap.pyx":280
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX             # <<<<<<<<<<<<<<
 * 
 *     def get_radial_coefficients(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_deltaX));
  __pyx_r = ((PyObject *)__pyx_v_deltaX);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":274
 *         return self.geocpp.getMinoTimeOfTime(t)
 * 
 *     def get_time_coefficients(self, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getTimeCoefficients(j)
 *         cdef int n = deltaX_cpp.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_time_coefficients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_deltaX);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":282
 *         return deltaX
 * 
 *     def get_radial_coefficients(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialCoefficients()
 *         cdef int n = deltaX_cpp.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_33get_radial_coefficients(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_33get_radial_coefficients(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_radial_coefficients (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_32get_radial_coefficients(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_32get_radial_coefficients(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  std::vector<double>  __pyx_v_deltaX_cpp;
  int __pyx_v_n;
  PyArrayObject *__pyx_v_deltaX = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_deltaX;
  __Pyx_Buffer __pyx_pybuffer_deltaX;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_radial_coefficients", 0);
  __pyx_pybuffer_deltaX.pybuffer.buf = NULL;
  __pyx_pybuffer_deltaX.refcount = 0;
  __pyx_pybuffernd_deltaX.data = NULL;
  __pyx_pybuffernd_deltaX.rcbuffer = &__pyx_pybuffer_deltaX;

  /* "cython/geo_wrap.pyx":283
 * 
 *     def get_radial_coefficients(self):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialCoefficients()             # <<<<<<<<<<<<<<
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 */
  __pyx_v_deltaX_cpp = __pyx_v_self->geocpp->getRadialCoefficients();

  /* "cython/geo_wrap.pyx":284
 *     def get_radial_coefficients(self):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialCoefficients()
 *         cdef int n = deltaX_cpp.size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 */
  __pyx_v_n = __pyx_v_deltaX_cpp.size();

  /* "cython/geo_wrap.pyx":285
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialCoefficients()
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 285, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_deltaX = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 285, __pyx_L1_error)
    } else {__pyx_pybuffernd_deltaX.diminfo[0].strides = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_deltaX.diminfo[0].shape = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_deltaX = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":286
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX
 */
  __pyx_t_7 = __pyx_v_n;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "cython/geo_wrap.pyx":287
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]             # <<<<<<<<<<<<<<
 *         return deltaX
 * 
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_deltaX.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_deltaX.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 287, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_deltaX.diminfo[0].strides) = (__pyx_v_deltaX_cpp[__pyx_v_i]);
  }

  /* "cython/geo_wrap.pyx":288
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX             # <<<<<<<<<<<<<<
 * 
 *     def get_polar_coefficients(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_deltaX));
  __pyx_r = ((PyObject *)__pyx_v_deltaX);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":282
 *         return deltaX
 * 
 *     def get_radial_coefficients(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getRadialCoefficients()
 *         cdef int n = deltaX_cpp.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_radial_coefficients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_deltaX);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":290
 *         return deltaX
 * 
 *     def get_polar_coefficients(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarCoefficients()
 *         cdef int n = deltaX_cpp.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_35get_polar_coefficients(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_35get_polar_coefficients(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_polar_coefficients (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_34get_polar_coefficients(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_34get_polar_coefficients(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  std::vector<double>  __pyx_v_deltaX_cpp;
  int __pyx_v_n;
  PyArrayObject *__pyx_v_deltaX = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_deltaX;
  __Pyx_Buffer __pyx_pybuffer_deltaX;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_polar_coefficients", 0);
  __pyx_pybuffer_deltaX.pybuffer.buf = NULL;
  __pyx_pybuffer_deltaX.refcount = 0;
  __pyx_pybuffernd_deltaX.data = NULL;
  __pyx_pybuffernd_deltaX.rcbuffer = &__pyx_pybuffer_deltaX;

  /* "cython/geo_wrap.pyx":291
 * 
 *     def get_polar_coefficients(self):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarCoefficients()             # <<<<<<<<<<<<<<
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 */
  __pyx_v_deltaX_cpp = __pyx_v_self->geocpp->getPolarCoefficients();

  /* "cython/geo_wrap.pyx":292
 *     def get_polar_coefficients(self):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarCoefficients()
 *         cdef int n = deltaX_cpp.size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 */
  __pyx_v_n = __pyx_v_deltaX_cpp.size();

  /* "cython/geo_wrap.pyx":293
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarCoefficients()
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_deltaX = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 293, __pyx_L1_error)
    } else {__pyx_pybuffernd_deltaX.diminfo[0].strides = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_deltaX.diminfo[0].shape = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_deltaX = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":294
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX
 */
  __pyx_t_7 = __pyx_v_n;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "cython/geo_wrap.pyx":295
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]             # <<<<<<<<<<<<<<
 *         return deltaX
 * 
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_deltaX.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_deltaX.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 295, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_deltaX.diminfo[0].strides) = (__pyx_v_deltaX_cpp[__pyx_v_i]);
  }

  /* "cython/geo_wrap.pyx":296
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX             # <<<<<<<<<<<<<<
 * 
 *     def get_azimuthal_coefficients(self, int j):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_deltaX));
  __pyx_r = ((PyObject *)__pyx_v_deltaX);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":290
 *         return deltaX
 * 
 *     def get_polar_coefficients(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getPolarCoefficients()
 *         cdef int n = deltaX_cpp.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_polar_coefficients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_deltaX);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":298
 *         return deltaX
 * 
 *     def get_azimuthal_coefficients(self, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalCoefficients(j)
 *         cdef int n = deltaX_cpp.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_37get_azimuthal_coefficients(PyObject *__pyx_v_self, PyObject *__pyx_arg_j); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_37get_azimuthal_coefficients(PyObject *__pyx_v_self, PyObject *__pyx_arg_j) {
  int __pyx_v_j;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_azimuthal_coefficients (wrapper)", 0);
  assert(__pyx_arg_j); {
    __pyx_v_j = __Pyx_PyInt_As_int(__pyx_arg_j); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_azimuthal_coefficients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_36get_azimuthal_coefficients(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((int)__pyx_v_j));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_36get_azimuthal_coefficients(struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, int __pyx_v_j) {
  std::vector<double>  __pyx_v_deltaX_cpp;
  int __pyx_v_n;
  PyArrayObject *__pyx_v_deltaX = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_deltaX;
  __Pyx_Buffer __pyx_pybuffer_deltaX;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_azimuthal_coefficients", 0);
  __pyx_pybuffer_deltaX.pybuffer.buf = NULL;
  __pyx_pybuffer_deltaX.refcount = 0;
  __pyx_pybuffernd_deltaX.data = NULL;
  __pyx_pybuffernd_deltaX.rcbuffer = &__pyx_pybuffer_deltaX;

  /* "cython/geo_wrap.pyx":299
 * 
 *     def get_azimuthal_coefficients(self, int j):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalCoefficients(j)             # <<<<<<<<<<<<<<
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 */
  __pyx_v_deltaX_cpp = __pyx_v_self->geocpp->getAzimuthalCoefficients(__pyx_v_j);

  /* "cython/geo_wrap.pyx":300
 *     def get_azimuthal_coefficients(self, int j):
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalCoefficients(j)
 *         cdef int n = deltaX_cpp.size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 */
  __pyx_v_n = __pyx_v_deltaX_cpp.size();

  /* "cython/geo_wrap.pyx":301
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalCoefficients(j)
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 301, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_deltaX = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 301, __pyx_L1_error)
    } else {__pyx_pybuffernd_deltaX.diminfo[0].strides = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_deltaX.diminfo[0].shape = __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_deltaX = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cython/geo_wrap.pyx":302
 *         cdef int n = deltaX_cpp.size()
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX
 */
  __pyx_t_7 = __pyx_v_n;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "cython/geo_wrap.pyx":303
 *         cdef np.ndarray[ndim=1, dtype=np.float64_t] deltaX = np.empty(n, dtype = np.float64)
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]             # <<<<<<<<<<<<<<
 *         return deltaX
 * 
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_deltaX.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_deltaX.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 303, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_deltaX.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_deltaX.diminfo[0].strides) = (__pyx_v_deltaX_cpp[__pyx_v_i]);
  }

  /* "cython/geo_wrap.pyx":304
 *         for i in range(n):
 *             deltaX[i] = deltaX_cpp[i]
 *         return deltaX             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_deltaX));
  __pyx_r = ((PyObject *)__pyx_v_deltaX);
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":298
 *         return deltaX
 * 
 *     def get_azimuthal_coefficients(self, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[double] deltaX_cpp = self.geocpp.getAzimuthalCoefficients(j)
 *         cdef int n = deltaX_cpp.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.get_azimuthal_coefficients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_deltaX.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_deltaX);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_39__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_39__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_38__reduce_cython__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_41__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_12KerrGeodesic_41__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_12KerrGeodesic_40__setstate_cython__(((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12KerrGeodesic_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.KerrGeodesic.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":307
 * 
 * 
 * def kerr_orbital_constants_wrapper(double a, double p, double e, double x):             # <<<<<<<<<<<<<<
 *     cdef double En, Lz, Qc
 *     En = 0.
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13kerr_orbital_constants_wrapper(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_13kerr_orbital_constants_wrapper = {"kerr_orbital_constants_wrapper", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_13kerr_orbital_constants_wrapper, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_13kerr_orbital_constants_wrapper(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_p;
  double __pyx_v_e;
  double __pyx_v_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kerr_orbital_constants_wrapper (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_p,&__pyx_n_s_e,&__pyx_n_s_x,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_orbital_constants_wrapper", 1, 4, 4, 1); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_orbital_constants_wrapper", 1, 4, 4, 2); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_orbital_constants_wrapper", 1, 4, 4, 3); __PYX_ERR(0, 307, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kerr_orbital_constants_wrapper") < 0)) __PYX_ERR(0, 307, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
    __pyx_v_p = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_p == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
    __pyx_v_e = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_e == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kerr_orbital_constants_wrapper", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 307, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.kerr_orbital_constants_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_12kerr_orbital_constants_wrapper(__pyx_self, __pyx_v_a, __pyx_v_p, __pyx_v_e, __pyx_v_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_12kerr_orbital_constants_wrapper(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_p, double __pyx_v_e, double __pyx_v_x) {
  double __pyx_v_En;
  double __pyx_v_Lz;
  double __pyx_v_Qc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kerr_orbital_constants_wrapper", 0);

  /* "cython/geo_wrap.pyx":309
 * def kerr_orbital_constants_wrapper(double a, double p, double e, double x):
 *     cdef double En, Lz, Qc
 *     En = 0.             # <<<<<<<<<<<<<<
 *     Lz = 0.
 *     Qc = 0.
 */
  __pyx_v_En = 0.;

  /* "cython/geo_wrap.pyx":310
 *     cdef double En, Lz, Qc
 *     En = 0.
 *     Lz = 0.             # <<<<<<<<<<<<<<
 *     Qc = 0.
 *     kerr_geo_orbital_constants(En, Lz, Qc, a, p, e, x)
 */
  __pyx_v_Lz = 0.;

  /* "cython/geo_wrap.pyx":311
 *     En = 0.
 *     Lz = 0.
 *     Qc = 0.             # <<<<<<<<<<<<<<
 *     kerr_geo_orbital_constants(En, Lz, Qc, a, p, e, x)
 *     return np.array([En, Lz, Qc])
 */
  __pyx_v_Qc = 0.;

  /* "cython/geo_wrap.pyx":312
 *     Lz = 0.
 *     Qc = 0.
 *     kerr_geo_orbital_constants(En, Lz, Qc, a, p, e, x)             # <<<<<<<<<<<<<<
 *     return np.array([En, Lz, Qc])
 * 
 */
  kerr_geo_orbital_constants(__pyx_v_En, __pyx_v_Lz, __pyx_v_Qc, __pyx_v_a, __pyx_v_p, __pyx_v_e, __pyx_v_x);

  /* "cython/geo_wrap.pyx":313
 *     Qc = 0.
 *     kerr_geo_orbital_constants(En, Lz, Qc, a, p, e, x)
 *     return np.array([En, Lz, Qc])             # <<<<<<<<<<<<<<
 * 
 * def kerr_mino_frequencies_wrapper(double a, double p, double e, double x):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_En); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_Lz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_Qc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":307
 * 
 * 
 * def kerr_orbital_constants_wrapper(double a, double p, double e, double x):             # <<<<<<<<<<<<<<
 *     cdef double En, Lz, Qc
 *     En = 0.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cybhpt_full.kerr_orbital_constants_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/geo_wrap.pyx":315
 *     return np.array([En, Lz, Qc])
 * 
 * def kerr_mino_frequencies_wrapper(double a, double p, double e, double x):             # <<<<<<<<<<<<<<
 *     cdef double upT, upR, upTh, upPhi
 *     upT = 0.
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15kerr_mino_frequencies_wrapper(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_15kerr_mino_frequencies_wrapper = {"kerr_mino_frequencies_wrapper", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_15kerr_mino_frequencies_wrapper, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_15kerr_mino_frequencies_wrapper(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_p;
  double __pyx_v_e;
  double __pyx_v_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kerr_mino_frequencies_wrapper (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_p,&__pyx_n_s_e,&__pyx_n_s_x,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_mino_frequencies_wrapper", 1, 4, 4, 1); __PYX_ERR(0, 315, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_mino_frequencies_wrapper", 1, 4, 4, 2); __PYX_ERR(0, 315, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kerr_mino_frequencies_wrapper", 1, 4, 4, 3); __PYX_ERR(0, 315, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kerr_mino_frequencies_wrapper") < 0)) __PYX_ERR(0, 315, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 315, __pyx_L3_error)
    __pyx_v_p = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_p == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 315, __pyx_L3_error)
    __pyx_v_e = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_e == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 315, __pyx_L3_error)
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 315, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kerr_mino_frequencies_wrapper", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 315, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.kerr_mino_frequencies_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_14kerr_mino_frequencies_wrapper(__pyx_self, __pyx_v_a, __pyx_v_p, __pyx_v_e, __pyx_v_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_14kerr_mino_frequencies_wrapper(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_p, double __pyx_v_e, double __pyx_v_x) {
  double __pyx_v_upT;
  double __pyx_v_upR;
  double __pyx_v_upTh;
  double __pyx_v_upPhi;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kerr_mino_frequencies_wrapper", 0);

  /* "cython/geo_wrap.pyx":317
 * def kerr_mino_frequencies_wrapper(double a, double p, double e, double x):
 *     cdef double upT, upR, upTh, upPhi
 *     upT = 0.             # <<<<<<<<<<<<<<
 *     upR = 0.
 *     upTh = 0.
 */
  __pyx_v_upT = 0.;

  /* "cython/geo_wrap.pyx":318
 *     cdef double upT, upR, upTh, upPhi
 *     upT = 0.
 *     upR = 0.             # <<<<<<<<<<<<<<
 *     upTh = 0.
 *     upPhi = 0.
 */
  __pyx_v_upR = 0.;

  /* "cython/geo_wrap.pyx":319
 *     upT = 0.
 *     upR = 0.
 *     upTh = 0.             # <<<<<<<<<<<<<<
 *     upPhi = 0.
 *     kerr_geo_mino_frequencies(upT, upR, upTh, upPhi, a, p, e, x)
 */
  __pyx_v_upTh = 0.;

  /* "cython/geo_wrap.pyx":320
 *     upR = 0.
 *     upTh = 0.
 *     upPhi = 0.             # <<<<<<<<<<<<<<
 *     kerr_geo_mino_frequencies(upT, upR, upTh, upPhi, a, p, e, x)
 *     return np.array([upT, upR, upTh, upPhi])
 */
  __pyx_v_upPhi = 0.;

  /* "cython/geo_wrap.pyx":321
 *     upTh = 0.
 *     upPhi = 0.
 *     kerr_geo_mino_frequencies(upT, upR, upTh, upPhi, a, p, e, x)             # <<<<<<<<<<<<<<
 *     return np.array([upT, upR, upTh, upPhi])
 * 
 */
  kerr_geo_mino_frequencies(__pyx_v_upT, __pyx_v_upR, __pyx_v_upTh, __pyx_v_upPhi, __pyx_v_a, __pyx_v_p, __pyx_v_e, __pyx_v_x);

  /* "cython/geo_wrap.pyx":322
 *     upPhi = 0.
 *     kerr_geo_mino_frequencies(upT, upR, upTh, upPhi, a, p, e, x)
 *     return np.array([upT, upR, upTh, upPhi])             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_upT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_upR); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_upTh); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_upPhi); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/geo_wrap.pyx":315
 *     return np.array([En, Lz, Qc])
 * 
 * def kerr_mino_frequencies_wrapper(double a, double p, double e, double x):             # <<<<<<<<<<<<<<
 *     cdef double upT, upR, upTh, upPhi
 *     upT = 0.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cybhpt_full.kerr_mino_frequencies_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":71
 * 
 * 
 * def flip_spin_of_solutions(unicode bc, int s, double a, int m, double omega, double la, double r, cpp_complex[double] R, cpp_complex[double] Rp):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] R0, RP0
 *     flip_spin_of_radial_teukolsky_TS(R0, RP0, str_to_bc(bc), s, m, a, omega, la, r, R, Rp)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_17flip_spin_of_solutions(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_17flip_spin_of_solutions = {"flip_spin_of_solutions", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_17flip_spin_of_solutions, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_17flip_spin_of_solutions(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_s;
  double __pyx_v_a;
  int __pyx_v_m;
  double __pyx_v_omega;
  double __pyx_v_la;
  double __pyx_v_r;
  std::complex<double>  __pyx_v_R;
  std::complex<double>  __pyx_v_Rp;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flip_spin_of_solutions (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_s,&__pyx_n_s_a,&__pyx_n_s_m,&__pyx_n_s_omega,&__pyx_n_s_la,&__pyx_n_s_r,&__pyx_n_s_R,&__pyx_n_s_Rp,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flip_spin_of_solutions", 1, 9, 9, 1); __PYX_ERR(2, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flip_spin_of_solutions", 1, 9, 9, 2); __PYX_ERR(2, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flip_spin_of_solutions", 1, 9, 9, 3); __PYX_ERR(2, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flip_spin_of_solutions", 1, 9, 9, 4); __PYX_ERR(2, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_la)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flip_spin_of_solutions", 1, 9, 9, 5); __PYX_ERR(2, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flip_spin_of_solutions", 1, 9, 9, 6); __PYX_ERR(2, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flip_spin_of_solutions", 1, 9, 9, 7); __PYX_ERR(2, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Rp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flip_spin_of_solutions", 1, 9, 9, 8); __PYX_ERR(2, 71, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flip_spin_of_solutions") < 0)) __PYX_ERR(2, 71, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_s = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_s == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L3_error)
    __pyx_v_la = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_la == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L3_error)
    __pyx_v_R = __pyx_convert_complex_from_py_double(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L3_error)
    __pyx_v_Rp = __pyx_convert_complex_from_py_double(values[8]); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flip_spin_of_solutions", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 71, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.flip_spin_of_solutions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 71, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_16flip_spin_of_solutions(__pyx_self, __pyx_v_bc, __pyx_v_s, __pyx_v_a, __pyx_v_m, __pyx_v_omega, __pyx_v_la, __pyx_v_r, __pyx_v_R, __pyx_v_Rp);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_16flip_spin_of_solutions(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_bc, int __pyx_v_s, double __pyx_v_a, int __pyx_v_m, double __pyx_v_omega, double __pyx_v_la, double __pyx_v_r, std::complex<double>  __pyx_v_R, std::complex<double>  __pyx_v_Rp) {
  std::complex<double>  __pyx_v_R0;
  std::complex<double>  __pyx_v_RP0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flip_spin_of_solutions", 0);

  /* "cython/radialsolver_wrap.pyx":73
 * def flip_spin_of_solutions(unicode bc, int s, double a, int m, double omega, double la, double r, cpp_complex[double] R, cpp_complex[double] Rp):
 *     cdef cpp_complex[double] R0, RP0
 *     flip_spin_of_radial_teukolsky_TS(R0, RP0, str_to_bc(bc), s, m, a, omega, la, r, R, Rp)             # <<<<<<<<<<<<<<
 *     return (R0, RP0)
 * 
 */
  flip_spin_of_radial_teukolsky_TS(__pyx_v_R0, __pyx_v_RP0, __pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_s, __pyx_v_m, __pyx_v_a, __pyx_v_omega, __pyx_v_la, __pyx_v_r, __pyx_v_R, __pyx_v_Rp);

  /* "cython/radialsolver_wrap.pyx":74
 *     cdef cpp_complex[double] R0, RP0
 *     flip_spin_of_radial_teukolsky_TS(R0, RP0, str_to_bc(bc), s, m, a, omega, la, r, R, Rp)
 *     return (R0, RP0)             # <<<<<<<<<<<<<<
 * 
 * cdef BoundaryCondition str_to_bc(unicode bc_str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_R0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_complex_to_py_double(__pyx_v_RP0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":71
 * 
 * 
 * def flip_spin_of_solutions(unicode bc, int s, double a, int m, double omega, double la, double r, cpp_complex[double] R, cpp_complex[double] Rp):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] R0, RP0
 *     flip_spin_of_radial_teukolsky_TS(R0, RP0, str_to_bc(bc), s, m, a, omega, la, r, R, Rp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cybhpt_full.flip_spin_of_solutions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":76
 *     return (R0, RP0)
 * 
 * cdef BoundaryCondition str_to_bc(unicode bc_str):             # <<<<<<<<<<<<<<
 *     if bc_str in bc_dict.keys():
 *         return bc_dict[bc_str]
 */

static enum BoundaryCondition __pyx_f_11cybhpt_full_str_to_bc(PyObject *__pyx_v_bc_str) {
  enum BoundaryCondition __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  enum BoundaryCondition __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("str_to_bc", 0);

  /* "cython/radialsolver_wrap.pyx":77
 * 
 * cdef BoundaryCondition str_to_bc(unicode bc_str):
 *     if bc_str in bc_dict.keys():             # <<<<<<<<<<<<<<
 *         return bc_dict[bc_str]
 *     else:
 */
  if (unlikely(__pyx_v_11cybhpt_full_bc_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(2, 77, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_11cybhpt_full_bc_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_bc_str, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_3)) {

    /* "cython/radialsolver_wrap.pyx":78
 * cdef BoundaryCondition str_to_bc(unicode bc_str):
 *     if bc_str in bc_dict.keys():
 *         return bc_dict[bc_str]             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("{} is not a supported boundary condition.".format(bc_str))
 */
    if (unlikely(__pyx_v_11cybhpt_full_bc_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 78, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_11cybhpt_full_bc_dict, __pyx_v_bc_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((enum BoundaryCondition)__Pyx_PyInt_As_enum__BoundaryCondition(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    goto __pyx_L0;

    /* "cython/radialsolver_wrap.pyx":77
 * 
 * cdef BoundaryCondition str_to_bc(unicode bc_str):
 *     if bc_str in bc_dict.keys():             # <<<<<<<<<<<<<<
 *         return bc_dict[bc_str]
 *     else:
 */
  }

  /* "cython/radialsolver_wrap.pyx":80
 *         return bc_dict[bc_str]
 *     else:
 *         raise TypeError("{} is not a supported boundary condition.".format(bc_str))             # <<<<<<<<<<<<<<
 * 
 * cdef SolutionMethod str_to_method(unicode method_str):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_is_not_a_supported_boundary_con, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_bc_str) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_bc_str);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(2, 80, __pyx_L1_error)
  }

  /* "cython/radialsolver_wrap.pyx":76
 *     return (R0, RP0)
 * 
 * cdef BoundaryCondition str_to_bc(unicode bc_str):             # <<<<<<<<<<<<<<
 *     if bc_str in bc_dict.keys():
 *         return bc_dict[bc_str]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("cybhpt_full.str_to_bc", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum BoundaryCondition) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":82
 *         raise TypeError("{} is not a supported boundary condition.".format(bc_str))
 * 
 * cdef SolutionMethod str_to_method(unicode method_str):             # <<<<<<<<<<<<<<
 *     if method_str in method_dict.keys():
 *         return method_dict[method_str]
 */

static enum SolutionMethod __pyx_f_11cybhpt_full_str_to_method(PyObject *__pyx_v_method_str) {
  enum SolutionMethod __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  enum SolutionMethod __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("str_to_method", 0);

  /* "cython/radialsolver_wrap.pyx":83
 * 
 * cdef SolutionMethod str_to_method(unicode method_str):
 *     if method_str in method_dict.keys():             # <<<<<<<<<<<<<<
 *         return method_dict[method_str]
 *     else:
 */
  if (unlikely(__pyx_v_11cybhpt_full_method_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(2, 83, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_11cybhpt_full_method_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_method_str, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_3)) {

    /* "cython/radialsolver_wrap.pyx":84
 * cdef SolutionMethod str_to_method(unicode method_str):
 *     if method_str in method_dict.keys():
 *         return method_dict[method_str]             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("{} is not a supported solution method.".format(method_str))
 */
    if (unlikely(__pyx_v_11cybhpt_full_method_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 84, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_11cybhpt_full_method_dict, __pyx_v_method_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((enum SolutionMethod)__Pyx_PyInt_As_enum__SolutionMethod(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    goto __pyx_L0;

    /* "cython/radialsolver_wrap.pyx":83
 * 
 * cdef SolutionMethod str_to_method(unicode method_str):
 *     if method_str in method_dict.keys():             # <<<<<<<<<<<<<<
 *         return method_dict[method_str]
 *     else:
 */
  }

  /* "cython/radialsolver_wrap.pyx":86
 *         return method_dict[method_str]
 *     else:
 *         raise TypeError("{} is not a supported solution method.".format(method_str))             # <<<<<<<<<<<<<<
 * 
 * def teukolsky_starobinsky_transformation_amplitude(unicode bc, int s, int m, double a, double omega, double lambdaCH):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_is_not_a_supported_solution_met, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_method_str) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_method_str);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(2, 86, __pyx_L1_error)
  }

  /* "cython/radialsolver_wrap.pyx":82
 *         raise TypeError("{} is not a supported boundary condition.".format(bc_str))
 * 
 * cdef SolutionMethod str_to_method(unicode method_str):             # <<<<<<<<<<<<<<
 *     if method_str in method_dict.keys():
 *         return method_dict[method_str]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("cybhpt_full.str_to_method", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum SolutionMethod) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":88
 *         raise TypeError("{} is not a supported solution method.".format(method_str))
 * 
 * def teukolsky_starobinsky_transformation_amplitude(unicode bc, int s, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_amplitude(str_to_bc(bc), s, m, a, omega, lambdaCH)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_19teukolsky_starobinsky_transformation_amplitude(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_19teukolsky_starobinsky_transformation_amplitude = {"teukolsky_starobinsky_transformation_amplitude", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_19teukolsky_starobinsky_transformation_amplitude, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_19teukolsky_starobinsky_transformation_amplitude(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_s;
  int __pyx_v_m;
  double __pyx_v_a;
  double __pyx_v_omega;
  double __pyx_v_lambdaCH;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("teukolsky_starobinsky_transformation_amplitude (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_s,&__pyx_n_s_m,&__pyx_n_s_a,&__pyx_n_s_omega,&__pyx_n_s_lambdaCH,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_transformation_amplitude", 1, 6, 6, 1); __PYX_ERR(2, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_transformation_amplitude", 1, 6, 6, 2); __PYX_ERR(2, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_transformation_amplitude", 1, 6, 6, 3); __PYX_ERR(2, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_transformation_amplitude", 1, 6, 6, 4); __PYX_ERR(2, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambdaCH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_transformation_amplitude", 1, 6, 6, 5); __PYX_ERR(2, 88, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "teukolsky_starobinsky_transformation_amplitude") < 0)) __PYX_ERR(2, 88, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_s = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_s == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 88, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 88, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 88, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 88, __pyx_L3_error)
    __pyx_v_lambdaCH = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_lambdaCH == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 88, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_transformation_amplitude", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 88, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.teukolsky_starobinsky_transformation_amplitude", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 88, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_18teukolsky_starobinsky_transformation_amplitude(__pyx_self, __pyx_v_bc, __pyx_v_s, __pyx_v_m, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_18teukolsky_starobinsky_transformation_amplitude(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_bc, int __pyx_v_s, int __pyx_v_m, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("teukolsky_starobinsky_transformation_amplitude", 0);

  /* "cython/radialsolver_wrap.pyx":89
 * 
 * def teukolsky_starobinsky_transformation_amplitude(unicode bc, int s, int m, double a, double omega, double lambdaCH):
 *     return teukolsky_starobinsky_amplitude(str_to_bc(bc), s, m, a, omega, lambdaCH)             # <<<<<<<<<<<<<<
 * 
 * def teukolsky_starobinsky_const(int j, int m, double a, double omega, double lambdaCH):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(teukolsky_starobinsky_amplitude(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_s, __pyx_v_m, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":88
 *         raise TypeError("{} is not a supported solution method.".format(method_str))
 * 
 * def teukolsky_starobinsky_transformation_amplitude(unicode bc, int s, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_amplitude(str_to_bc(bc), s, m, a, omega, lambdaCH)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.teukolsky_starobinsky_transformation_amplitude", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":91
 *     return teukolsky_starobinsky_amplitude(str_to_bc(bc), s, m, a, omega, lambdaCH)
 * 
 * def teukolsky_starobinsky_const(int j, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_complex_constant(j, m, a, omega, lambdaCH)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_21teukolsky_starobinsky_const(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_21teukolsky_starobinsky_const = {"teukolsky_starobinsky_const", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_21teukolsky_starobinsky_const, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_21teukolsky_starobinsky_const(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_j;
  int __pyx_v_m;
  double __pyx_v_a;
  double __pyx_v_omega;
  double __pyx_v_lambdaCH;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("teukolsky_starobinsky_const (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_j,&__pyx_n_s_m,&__pyx_n_s_a,&__pyx_n_s_omega,&__pyx_n_s_lambdaCH,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const", 1, 5, 5, 1); __PYX_ERR(2, 91, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const", 1, 5, 5, 2); __PYX_ERR(2, 91, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const", 1, 5, 5, 3); __PYX_ERR(2, 91, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambdaCH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const", 1, 5, 5, 4); __PYX_ERR(2, 91, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "teukolsky_starobinsky_const") < 0)) __PYX_ERR(2, 91, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_j = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 91, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 91, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 91, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 91, __pyx_L3_error)
    __pyx_v_lambdaCH = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_lambdaCH == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 91, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 91, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.teukolsky_starobinsky_const", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_20teukolsky_starobinsky_const(__pyx_self, __pyx_v_j, __pyx_v_m, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_20teukolsky_starobinsky_const(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_j, int __pyx_v_m, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("teukolsky_starobinsky_const", 0);

  /* "cython/radialsolver_wrap.pyx":92
 * 
 * def teukolsky_starobinsky_const(int j, int m, double a, double omega, double lambdaCH):
 *     return teukolsky_starobinsky_complex_constant(j, m, a, omega, lambdaCH)             # <<<<<<<<<<<<<<
 * 
 * def teukolsky_starobinsky_const_squared(int s, int m, double a, double omega, double lambdaCH):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(teukolsky_starobinsky_complex_constant(__pyx_v_j, __pyx_v_m, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":91
 *     return teukolsky_starobinsky_amplitude(str_to_bc(bc), s, m, a, omega, lambdaCH)
 * 
 * def teukolsky_starobinsky_const(int j, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_complex_constant(j, m, a, omega, lambdaCH)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.teukolsky_starobinsky_const", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":94
 *     return teukolsky_starobinsky_complex_constant(j, m, a, omega, lambdaCH)
 * 
 * def teukolsky_starobinsky_const_squared(int s, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_constant(s, m, a, omega, lambdaCH)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_23teukolsky_starobinsky_const_squared(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_23teukolsky_starobinsky_const_squared = {"teukolsky_starobinsky_const_squared", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_23teukolsky_starobinsky_const_squared, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_23teukolsky_starobinsky_const_squared(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_s;
  int __pyx_v_m;
  double __pyx_v_a;
  double __pyx_v_omega;
  double __pyx_v_lambdaCH;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("teukolsky_starobinsky_const_squared (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_m,&__pyx_n_s_a,&__pyx_n_s_omega,&__pyx_n_s_lambdaCH,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const_squared", 1, 5, 5, 1); __PYX_ERR(2, 94, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const_squared", 1, 5, 5, 2); __PYX_ERR(2, 94, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const_squared", 1, 5, 5, 3); __PYX_ERR(2, 94, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambdaCH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const_squared", 1, 5, 5, 4); __PYX_ERR(2, 94, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "teukolsky_starobinsky_const_squared") < 0)) __PYX_ERR(2, 94, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_s = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_s == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 94, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 94, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 94, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 94, __pyx_L3_error)
    __pyx_v_lambdaCH = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_lambdaCH == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 94, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("teukolsky_starobinsky_const_squared", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 94, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.teukolsky_starobinsky_const_squared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_22teukolsky_starobinsky_const_squared(__pyx_self, __pyx_v_s, __pyx_v_m, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_22teukolsky_starobinsky_const_squared(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_s, int __pyx_v_m, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("teukolsky_starobinsky_const_squared", 0);

  /* "cython/radialsolver_wrap.pyx":95
 * 
 * def teukolsky_starobinsky_const_squared(int s, int m, double a, double omega, double lambdaCH):
 *     return teukolsky_starobinsky_constant(s, m, a, omega, lambdaCH)             # <<<<<<<<<<<<<<
 * 
 * cdef class RadialTeukolsky:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(teukolsky_starobinsky_constant(__pyx_v_s, __pyx_v_m, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":94
 *     return teukolsky_starobinsky_complex_constant(j, m, a, omega, lambdaCH)
 * 
 * def teukolsky_starobinsky_const_squared(int s, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_constant(s, m, a, omega, lambdaCH)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.teukolsky_starobinsky_const_squared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":100
 *     cdef RadialTeukolskyCPP *teukcpp
 * 
 *     def __cinit__(self, double a, int s, int l, int m, double omega, np.ndarray[ndim=1, dtype=np.float64_t] r not None):             # <<<<<<<<<<<<<<
 *         cdef int length_r = r.shape[0]
 *         cdef vector[double] rvec
 */

/* Python wrapper */
static int __pyx_pw_11cybhpt_full_15RadialTeukolsky_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11cybhpt_full_15RadialTeukolsky_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  int __pyx_v_s;
  int __pyx_v_l;
  int __pyx_v_m;
  double __pyx_v_omega;
  PyArrayObject *__pyx_v_r = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_s,&__pyx_n_s_l,&__pyx_n_s_m,&__pyx_n_s_omega,&__pyx_n_s_r,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 1); __PYX_ERR(2, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 2); __PYX_ERR(2, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 3); __PYX_ERR(2, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 4); __PYX_ERR(2, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 5); __PYX_ERR(2, 100, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 100, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 100, __pyx_L3_error)
    __pyx_v_s = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_s == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 100, __pyx_L3_error)
    __pyx_v_l = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_l == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 100, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 100, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 100, __pyx_L3_error)
    __pyx_v_r = ((PyArrayObject *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 100, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_5numpy_ndarray, 0, "r", 0))) __PYX_ERR(2, 100, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky___cinit__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), __pyx_v_a, __pyx_v_s, __pyx_v_l, __pyx_v_m, __pyx_v_omega, __pyx_v_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11cybhpt_full_15RadialTeukolsky___cinit__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, double __pyx_v_a, int __pyx_v_s, int __pyx_v_l, int __pyx_v_m, double __pyx_v_omega, PyArrayObject *__pyx_v_r) {
  int __pyx_v_length_r;
  std::vector<double>  __pyx_v_rvec;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_r;
  __Pyx_Buffer __pyx_pybuffer_r;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  RadialTeukolsky *__pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_r.pybuffer.buf = NULL;
  __pyx_pybuffer_r.refcount = 0;
  __pyx_pybuffernd_r.data = NULL;
  __pyx_pybuffernd_r.rcbuffer = &__pyx_pybuffer_r;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r.rcbuffer->pybuffer, (PyObject*)__pyx_v_r, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(2, 100, __pyx_L1_error)
  }
  __pyx_pybuffernd_r.diminfo[0].strides = __pyx_pybuffernd_r.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r.diminfo[0].shape = __pyx_pybuffernd_r.rcbuffer->pybuffer.shape[0];

  /* "cython/radialsolver_wrap.pyx":101
 * 
 *     def __cinit__(self, double a, int s, int l, int m, double omega, np.ndarray[ndim=1, dtype=np.float64_t] r not None):
 *         cdef int length_r = r.shape[0]             # <<<<<<<<<<<<<<
 *         cdef vector[double] rvec
 *         rvec = vector[double](length_r)
 */
  __pyx_v_length_r = (__pyx_v_r->dimensions[0]);

  /* "cython/radialsolver_wrap.pyx":103
 *         cdef int length_r = r.shape[0]
 *         cdef vector[double] rvec
 *         rvec = vector[double](length_r)             # <<<<<<<<<<<<<<
 *         rvec.assign(&r[0], &r[0] + length_r)
 *         self.teukcpp = new RadialTeukolskyCPP(a, s, l, m, omega, rvec)
 */
  try {
    __pyx_t_1 = std::vector<double> (__pyx_v_length_r);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 103, __pyx_L1_error)
  }
  __pyx_v_rvec = __pyx_t_1;

  /* "cython/radialsolver_wrap.pyx":104
 *         cdef vector[double] rvec
 *         rvec = vector[double](length_r)
 *         rvec.assign(&r[0], &r[0] + length_r)             # <<<<<<<<<<<<<<
 *         self.teukcpp = new RadialTeukolskyCPP(a, s, l, m, omega, rvec)
 *         if self.teukcpp == NULL:
 */
  __pyx_t_2 = 0;
  __pyx_t_3 = -1;
  if (__pyx_t_2 < 0) {
    __pyx_t_2 += __pyx_pybuffernd_r.diminfo[0].shape;
    if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
  } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_r.diminfo[0].shape)) __pyx_t_3 = 0;
  if (unlikely(__pyx_t_3 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_3);
    __PYX_ERR(2, 104, __pyx_L1_error)
  }
  __pyx_t_4 = 0;
  __pyx_t_3 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_r.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_3 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_r.diminfo[0].shape)) __pyx_t_3 = 0;
  if (unlikely(__pyx_t_3 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_3);
    __PYX_ERR(2, 104, __pyx_L1_error)
  }
  try {
    __pyx_v_rvec.assign((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_r.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_r.diminfo[0].strides))), ((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_r.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_r.diminfo[0].strides))) + __pyx_v_length_r));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 104, __pyx_L1_error)
  }

  /* "cython/radialsolver_wrap.pyx":105
 *         rvec = vector[double](length_r)
 *         rvec.assign(&r[0], &r[0] + length_r)
 *         self.teukcpp = new RadialTeukolskyCPP(a, s, l, m, omega, rvec)             # <<<<<<<<<<<<<<
 *         if self.teukcpp == NULL:
 *             raise MemoryError('Not enough memory.')
 */
  try {
    __pyx_t_5 = new RadialTeukolsky(__pyx_v_a, __pyx_v_s, __pyx_v_l, __pyx_v_m, __pyx_v_omega, __pyx_v_rvec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 105, __pyx_L1_error)
  }
  __pyx_v_self->teukcpp = __pyx_t_5;

  /* "cython/radialsolver_wrap.pyx":106
 *         rvec.assign(&r[0], &r[0] + length_r)
 *         self.teukcpp = new RadialTeukolskyCPP(a, s, l, m, omega, rvec)
 *         if self.teukcpp == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError('Not enough memory.')
 * 
 */
  __pyx_t_6 = ((__pyx_v_self->teukcpp == NULL) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "cython/radialsolver_wrap.pyx":107
 *         self.teukcpp = new RadialTeukolskyCPP(a, s, l, m, omega, rvec)
 *         if self.teukcpp == NULL:
 *             raise MemoryError('Not enough memory.')             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(2, 107, __pyx_L1_error)

    /* "cython/radialsolver_wrap.pyx":106
 *         rvec.assign(&r[0], &r[0] + length_r)
 *         self.teukcpp = new RadialTeukolskyCPP(a, s, l, m, omega, rvec)
 *         if self.teukcpp == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError('Not enough memory.')
 * 
 */
  }

  /* "cython/radialsolver_wrap.pyx":100
 *     cdef RadialTeukolskyCPP *teukcpp
 * 
 *     def __cinit__(self, double a, int s, int l, int m, double omega, np.ndarray[ndim=1, dtype=np.float64_t] r not None):             # <<<<<<<<<<<<<<
 *         cdef int length_r = r.shape[0]
 *         cdef vector[double] rvec
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":109
 *             raise MemoryError('Not enough memory.')
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.teukcpp
 * 
 */

/* Python wrapper */
static void __pyx_pw_11cybhpt_full_15RadialTeukolsky_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11cybhpt_full_15RadialTeukolsky_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11cybhpt_full_15RadialTeukolsky_2__dealloc__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11cybhpt_full_15RadialTeukolsky_2__dealloc__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cython/radialsolver_wrap.pyx":110
 * 
 *     def __dealloc__(self):
 *         del self.teukcpp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->teukcpp;

  /* "cython/radialsolver_wrap.pyx":109
 *             raise MemoryError('Not enough memory.')
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.teukcpp
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/radialsolver_wrap.pyx":113
 * 
 *     @property
 *     def blackholespin(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBlackHoleSpin()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_13blackholespin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_13blackholespin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_13blackholespin___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_13blackholespin___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":114
 *     @property
 *     def blackholespin(self):
 *         return self.teukcpp.getBlackHoleSpin()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getBlackHoleSpin()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":113
 * 
 *     @property
 *     def blackholespin(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBlackHoleSpin()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.blackholespin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":117
 * 
 *     @property
 *     def spinweight(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpinWeight()
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_10spinweight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_10spinweight_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_10spinweight___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_10spinweight___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":118
 *     @property
 *     def spinweight(self):
 *         return self.teukcpp.getSpinWeight()             # <<<<<<<<<<<<<<
 *     @property
 *     def s(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getSpinWeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":117
 * 
 *     @property
 *     def spinweight(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpinWeight()
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.spinweight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":120
 *         return self.teukcpp.getSpinWeight()
 *     @property
 *     def s(self):             # <<<<<<<<<<<<<<
 *         return self.spinweight
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_1s_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_1s_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_1s___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_1s___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":121
 *     @property
 *     def s(self):
 *         return self.spinweight             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_spinweight); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":120
 *         return self.teukcpp.getSpinWeight()
 *     @property
 *     def s(self):             # <<<<<<<<<<<<<<
 *         return self.spinweight
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.s.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":124
 * 
 *     @property
 *     def spheroidalmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpheroidalModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_14spheroidalmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_14spheroidalmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_14spheroidalmode___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_14spheroidalmode___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":125
 *     @property
 *     def spheroidalmode(self):
 *         return self.teukcpp.getSpheroidalModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getSpheroidalModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":124
 * 
 *     @property
 *     def spheroidalmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpheroidalModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.spheroidalmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":128
 * 
 *     @property
 *     def j(self):             # <<<<<<<<<<<<<<
 *         return self.spheroidalmode
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_1j_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_1j_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_1j___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_1j___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":129
 *     @property
 *     def j(self):
 *         return self.spheroidalmode             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_spheroidalmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":128
 * 
 *     @property
 *     def j(self):             # <<<<<<<<<<<<<<
 *         return self.spheroidalmode
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.j.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":132
 * 
 *     @property
 *     def azimuthalmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getAzimuthalModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_13azimuthalmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_13azimuthalmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_13azimuthalmode___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_13azimuthalmode___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":133
 *     @property
 *     def azimuthalmode(self):
 *         return self.teukcpp.getAzimuthalModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getAzimuthalModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":132
 * 
 *     @property
 *     def azimuthalmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getAzimuthalModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.azimuthalmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":136
 * 
 *     @property
 *     def m(self):             # <<<<<<<<<<<<<<
 *         return self.azimuthalmode
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_1m_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_1m_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_1m___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_1m___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":137
 *     @property
 *     def m(self):
 *         return self.azimuthalmode             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthalmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":136
 * 
 *     @property
 *     def m(self):             # <<<<<<<<<<<<<<
 *         return self.azimuthalmode
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.m.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":140
 * 
 *     @property
 *     def frequency(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getModeFrequency()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_9frequency_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_9frequency_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_9frequency___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_9frequency___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":141
 *     @property
 *     def frequency(self):
 *         return self.teukcpp.getModeFrequency()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getModeFrequency()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":140
 * 
 *     @property
 *     def frequency(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getModeFrequency()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.frequency.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":144
 * 
 *     @property
 *     def mode_frequency(self):             # <<<<<<<<<<<<<<
 *         return self.frequency
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_14mode_frequency_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_14mode_frequency_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_14mode_frequency___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_14mode_frequency___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":145
 *     @property
 *     def mode_frequency(self):
 *         return self.frequency             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_frequency); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":144
 * 
 *     @property
 *     def mode_frequency(self):             # <<<<<<<<<<<<<<
 *         return self.frequency
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.mode_frequency.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":148
 * 
 *     @property
 *     def omega(self):             # <<<<<<<<<<<<<<
 *         return self.frequency
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_5omega_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_5omega_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_5omega___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_5omega___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":149
 *     @property
 *     def omega(self):
 *         return self.frequency             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_frequency); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":148
 * 
 *     @property
 *     def omega(self):             # <<<<<<<<<<<<<<
 *         return self.frequency
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.omega.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":152
 * 
 *     @property
 *     def eigenvalue(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpinWeightedSpheroidalEigenvalue()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_10eigenvalue_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_10eigenvalue_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_10eigenvalue___get__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_10eigenvalue___get__(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/radialsolver_wrap.pyx":153
 *     @property
 *     def eigenvalue(self):
 *         return self.teukcpp.getSpinWeightedSpheroidalEigenvalue()             # <<<<<<<<<<<<<<
 * 
 *     def solve_bc(self, unicode method):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getSpinWeightedSpheroidalEigenvalue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":152
 * 
 *     @property
 *     def eigenvalue(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpinWeightedSpheroidalEigenvalue()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.eigenvalue.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":155
 *         return self.teukcpp.getSpinWeightedSpheroidalEigenvalue()
 * 
 *     def solve_bc(self, unicode method):             # <<<<<<<<<<<<<<
 *         self.teukcpp.generateRetardedBoundaryConditions(str_to_method(method))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_5solve_bc(PyObject *__pyx_v_self, PyObject *__pyx_v_method); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_5solve_bc(PyObject *__pyx_v_self, PyObject *__pyx_v_method) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve_bc (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_method), (&PyUnicode_Type), 1, "method", 1))) __PYX_ERR(2, 155, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_4solve_bc(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), ((PyObject*)__pyx_v_method));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_4solve_bc(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_method) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve_bc", 0);

  /* "cython/radialsolver_wrap.pyx":156
 * 
 *     def solve_bc(self, unicode method):
 *         self.teukcpp.generateRetardedBoundaryConditions(str_to_method(method))             # <<<<<<<<<<<<<<
 * 
 *     def set_bc(self, unicode bc, cpp_complex[double] R, cpp_complex[double] Rp, double r):
 */
  __pyx_v_self->teukcpp->generateRetardedBoundaryConditions(__pyx_f_11cybhpt_full_str_to_method(__pyx_v_method));

  /* "cython/radialsolver_wrap.pyx":155
 *         return self.teukcpp.getSpinWeightedSpheroidalEigenvalue()
 * 
 *     def solve_bc(self, unicode method):             # <<<<<<<<<<<<<<
 *         self.teukcpp.generateRetardedBoundaryConditions(str_to_method(method))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":158
 *         self.teukcpp.generateRetardedBoundaryConditions(str_to_method(method))
 * 
 *     def set_bc(self, unicode bc, cpp_complex[double] R, cpp_complex[double] Rp, double r):             # <<<<<<<<<<<<<<
 *         self.teukcpp.setBoundaryConditions(str_to_bc(bc), R, Rp, r)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_7set_bc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_7set_bc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  std::complex<double>  __pyx_v_R;
  std::complex<double>  __pyx_v_Rp;
  double __pyx_v_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_bc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_R,&__pyx_n_s_Rp,&__pyx_n_s_r,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_bc", 1, 4, 4, 1); __PYX_ERR(2, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Rp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_bc", 1, 4, 4, 2); __PYX_ERR(2, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_bc", 1, 4, 4, 3); __PYX_ERR(2, 158, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_bc") < 0)) __PYX_ERR(2, 158, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_R = __pyx_convert_complex_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 158, __pyx_L3_error)
    __pyx_v_Rp = __pyx_convert_complex_from_py_double(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 158, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 158, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_bc", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.set_bc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 158, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_6set_bc(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), __pyx_v_bc, __pyx_v_R, __pyx_v_Rp, __pyx_v_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_6set_bc(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, std::complex<double>  __pyx_v_R, std::complex<double>  __pyx_v_Rp, double __pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_bc", 0);

  /* "cython/radialsolver_wrap.pyx":159
 * 
 *     def set_bc(self, unicode bc, cpp_complex[double] R, cpp_complex[double] Rp, double r):
 *         self.teukcpp.setBoundaryConditions(str_to_bc(bc), R, Rp, r)             # <<<<<<<<<<<<<<
 * 
 *     def solve(self, unicode method="AUTO", unicode bc="None"):
 */
  __pyx_v_self->teukcpp->setBoundaryConditions(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_R, __pyx_v_Rp, __pyx_v_r);

  /* "cython/radialsolver_wrap.pyx":158
 *         self.teukcpp.generateRetardedBoundaryConditions(str_to_method(method))
 * 
 *     def set_bc(self, unicode bc, cpp_complex[double] R, cpp_complex[double] Rp, double r):             # <<<<<<<<<<<<<<
 *         self.teukcpp.setBoundaryConditions(str_to_bc(bc), R, Rp, r)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":161
 *         self.teukcpp.setBoundaryConditions(str_to_bc(bc), R, Rp, r)
 * 
 *     def solve(self, unicode method="AUTO", unicode bc="None"):             # <<<<<<<<<<<<<<
 *         if bc == "None":
 *             self.teukcpp.generateSolutions(str_to_method(method))
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_9solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_9solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_method = 0;
  PyObject *__pyx_v_bc = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_method,&__pyx_n_s_bc,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject*)__pyx_n_u_AUTO);
    values[1] = ((PyObject*)__pyx_n_u_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_method);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solve") < 0)) __PYX_ERR(2, 161, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_method = ((PyObject*)values[0]);
    __pyx_v_bc = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solve", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 161, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_method), (&PyUnicode_Type), 1, "method", 1))) __PYX_ERR(2, 161, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 161, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_8solve(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), __pyx_v_method, __pyx_v_bc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_8solve(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_method, PyObject *__pyx_v_bc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "cython/radialsolver_wrap.pyx":162
 * 
 *     def solve(self, unicode method="AUTO", unicode bc="None"):
 *         if bc == "None":             # <<<<<<<<<<<<<<
 *             self.teukcpp.generateSolutions(str_to_method(method))
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_bc, __pyx_n_u_None, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 162, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cython/radialsolver_wrap.pyx":163
 *     def solve(self, unicode method="AUTO", unicode bc="None"):
 *         if bc == "None":
 *             self.teukcpp.generateSolutions(str_to_method(method))             # <<<<<<<<<<<<<<
 *         else:
 *             self.teukcpp.generateSolutions(str_to_bc(bc), str_to_method(method))
 */
    __pyx_v_self->teukcpp->generateSolutions(__pyx_f_11cybhpt_full_str_to_method(__pyx_v_method));

    /* "cython/radialsolver_wrap.pyx":162
 * 
 *     def solve(self, unicode method="AUTO", unicode bc="None"):
 *         if bc == "None":             # <<<<<<<<<<<<<<
 *             self.teukcpp.generateSolutions(str_to_method(method))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cython/radialsolver_wrap.pyx":165
 *             self.teukcpp.generateSolutions(str_to_method(method))
 *         else:
 *             self.teukcpp.generateSolutions(str_to_bc(bc), str_to_method(method))             # <<<<<<<<<<<<<<
 * 
 *     def flip_spinweight(self):
 */
  /*else*/ {
    __pyx_v_self->teukcpp->generateSolutions(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_f_11cybhpt_full_str_to_method(__pyx_v_method));
  }
  __pyx_L3:;

  /* "cython/radialsolver_wrap.pyx":161
 *         self.teukcpp.setBoundaryConditions(str_to_bc(bc), R, Rp, r)
 * 
 *     def solve(self, unicode method="AUTO", unicode bc="None"):             # <<<<<<<<<<<<<<
 *         if bc == "None":
 *             self.teukcpp.generateSolutions(str_to_method(method))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":167
 *             self.teukcpp.generateSolutions(str_to_bc(bc), str_to_method(method))
 * 
 *     def flip_spinweight(self):             # <<<<<<<<<<<<<<
 *         self.teukcpp.flipSpinWeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_11flip_spinweight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_11flip_spinweight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flip_spinweight (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_10flip_spinweight(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_10flip_spinweight(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flip_spinweight", 0);

  /* "cython/radialsolver_wrap.pyx":168
 * 
 *     def flip_spinweight(self):
 *         self.teukcpp.flipSpinWeight()             # <<<<<<<<<<<<<<
 * 
 *     def radialpoint(self, int pos):
 */
  __pyx_v_self->teukcpp->flipSpinWeight();

  /* "cython/radialsolver_wrap.pyx":167
 *             self.teukcpp.generateSolutions(str_to_bc(bc), str_to_method(method))
 * 
 *     def flip_spinweight(self):             # <<<<<<<<<<<<<<
 *         self.teukcpp.flipSpinWeight()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":170
 *         self.teukcpp.flipSpinWeight()
 * 
 *     def radialpoint(self, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialPoints(pos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_13radialpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_13radialpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos) {
  int __pyx_v_pos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radialpoint (wrapper)", 0);
  assert(__pyx_arg_pos); {
    __pyx_v_pos = __Pyx_PyInt_As_int(__pyx_arg_pos); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 170, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.radialpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_12radialpoint(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), ((int)__pyx_v_pos));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_12radialpoint(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, int __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radialpoint", 0);

  /* "cython/radialsolver_wrap.pyx":171
 * 
 *     def radialpoint(self, int pos):
 *         return self.teukcpp.getRadialPoints(pos)             # <<<<<<<<<<<<<<
 * 
 *     def boundarypoint(self, unicode bc):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getRadialPoints(__pyx_v_pos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":170
 *         self.teukcpp.flipSpinWeight()
 * 
 *     def radialpoint(self, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialPoints(pos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.radialpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":173
 *         return self.teukcpp.getRadialPoints(pos)
 * 
 *     def boundarypoint(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBoundaryPoint(str_to_bc(bc))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_15boundarypoint(PyObject *__pyx_v_self, PyObject *__pyx_v_bc); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_15boundarypoint(PyObject *__pyx_v_self, PyObject *__pyx_v_bc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("boundarypoint (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 173, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_14boundarypoint(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), ((PyObject*)__pyx_v_bc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_14boundarypoint(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("boundarypoint", 0);

  /* "cython/radialsolver_wrap.pyx":174
 * 
 *     def boundarypoint(self, unicode bc):
 *         return self.teukcpp.getBoundaryPoint(str_to_bc(bc))             # <<<<<<<<<<<<<<
 * 
 *     def boundarysolution(self, unicode bc):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getBoundaryPoint(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc))); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":173
 *         return self.teukcpp.getRadialPoints(pos)
 * 
 *     def boundarypoint(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBoundaryPoint(str_to_bc(bc))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.boundarypoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":176
 *         return self.teukcpp.getBoundaryPoint(str_to_bc(bc))
 * 
 *     def boundarysolution(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBoundarySolution(str_to_bc(bc)).getValue()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_17boundarysolution(PyObject *__pyx_v_self, PyObject *__pyx_v_bc); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_17boundarysolution(PyObject *__pyx_v_self, PyObject *__pyx_v_bc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("boundarysolution (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 176, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_16boundarysolution(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), ((PyObject*)__pyx_v_bc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_16boundarysolution(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("boundarysolution", 0);

  /* "cython/radialsolver_wrap.pyx":177
 * 
 *     def boundarysolution(self, unicode bc):
 *         return self.teukcpp.getBoundarySolution(str_to_bc(bc)).getValue()             # <<<<<<<<<<<<<<
 * 
 *     def boundaryderivative(self, unicode bc):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getBoundarySolution(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc)).getValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":176
 *         return self.teukcpp.getBoundaryPoint(str_to_bc(bc))
 * 
 *     def boundarysolution(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBoundarySolution(str_to_bc(bc)).getValue()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.boundarysolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":179
 *         return self.teukcpp.getBoundarySolution(str_to_bc(bc)).getValue()
 * 
 *     def boundaryderivative(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBoundaryDerivative(str_to_bc(bc)).getValue()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_19boundaryderivative(PyObject *__pyx_v_self, PyObject *__pyx_v_bc); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_19boundaryderivative(PyObject *__pyx_v_self, PyObject *__pyx_v_bc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("boundaryderivative (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 179, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_18boundaryderivative(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), ((PyObject*)__pyx_v_bc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_18boundaryderivative(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("boundaryderivative", 0);

  /* "cython/radialsolver_wrap.pyx":180
 * 
 *     def boundaryderivative(self, unicode bc):
 *         return self.teukcpp.getBoundaryDerivative(str_to_bc(bc)).getValue()             # <<<<<<<<<<<<<<
 * 
 *     def solution(self, unicode bc, int pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getBoundaryDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc)).getValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":179
 *         return self.teukcpp.getBoundarySolution(str_to_bc(bc)).getValue()
 * 
 *     def boundaryderivative(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBoundaryDerivative(str_to_bc(bc)).getValue()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.boundaryderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":182
 *         return self.teukcpp.getBoundaryDerivative(str_to_bc(bc)).getValue()
 * 
 *     def solution(self, unicode bc, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSolution(str_to_bc(bc), pos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_21solution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_21solution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_pos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solution", 1, 2, 2, 1); __PYX_ERR(2, 182, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solution") < 0)) __PYX_ERR(2, 182, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 182, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solution", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 182, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.solution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 182, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_20solution(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), __pyx_v_bc, __pyx_v_pos);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_20solution(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solution", 0);

  /* "cython/radialsolver_wrap.pyx":183
 * 
 *     def solution(self, unicode bc, int pos):
 *         return self.teukcpp.getSolution(str_to_bc(bc), pos)             # <<<<<<<<<<<<<<
 * 
 *     def derivative(self, unicode bc, int pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getSolution(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_pos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":182
 *         return self.teukcpp.getBoundaryDerivative(str_to_bc(bc)).getValue()
 * 
 *     def solution(self, unicode bc, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSolution(str_to_bc(bc), pos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.solution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":185
 *         return self.teukcpp.getSolution(str_to_bc(bc), pos)
 * 
 *     def derivative(self, unicode bc, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getDerivative(str_to_bc(bc), pos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_23derivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_23derivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_pos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("derivative (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("derivative", 1, 2, 2, 1); __PYX_ERR(2, 185, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "derivative") < 0)) __PYX_ERR(2, 185, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 185, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("derivative", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 185, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.derivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 185, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_22derivative(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), __pyx_v_bc, __pyx_v_pos);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_22derivative(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("derivative", 0);

  /* "cython/radialsolver_wrap.pyx":186
 * 
 *     def derivative(self, unicode bc, int pos):
 *         return self.teukcpp.getDerivative(str_to_bc(bc), pos)             # <<<<<<<<<<<<<<
 * 
 *     def second_derivative(self, unicode bc, int pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_pos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":185
 *         return self.teukcpp.getSolution(str_to_bc(bc), pos)
 * 
 *     def derivative(self, unicode bc, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getDerivative(str_to_bc(bc), pos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.derivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":188
 *         return self.teukcpp.getDerivative(str_to_bc(bc), pos)
 * 
 *     def second_derivative(self, unicode bc, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSecondDerivative(str_to_bc(bc), pos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_25second_derivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_25second_derivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_pos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("second_derivative (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("second_derivative", 1, 2, 2, 1); __PYX_ERR(2, 188, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "second_derivative") < 0)) __PYX_ERR(2, 188, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 188, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("second_derivative", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 188, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.second_derivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 188, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_24second_derivative(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), __pyx_v_bc, __pyx_v_pos);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_24second_derivative(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("second_derivative", 0);

  /* "cython/radialsolver_wrap.pyx":189
 * 
 *     def second_derivative(self, unicode bc, int pos):
 *         return self.teukcpp.getSecondDerivative(str_to_bc(bc), pos)             # <<<<<<<<<<<<<<
 * 
 *     def derivative2(self, unicode bc, int pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getSecondDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_pos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":188
 *         return self.teukcpp.getDerivative(str_to_bc(bc), pos)
 * 
 *     def second_derivative(self, unicode bc, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSecondDerivative(str_to_bc(bc), pos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.second_derivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/radialsolver_wrap.pyx":191
 *         return self.teukcpp.getSecondDerivative(str_to_bc(bc), pos)
 * 
 *     def derivative2(self, unicode bc, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSecondDerivative(str_to_bc(bc), pos)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_27derivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_27derivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_pos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("derivative2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("derivative2", 1, 2, 2, 1); __PYX_ERR(2, 191, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "derivative2") < 0)) __PYX_ERR(2, 191, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 191, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("derivative2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 191, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.derivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(2, 191, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_26derivative2(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), __pyx_v_bc, __pyx_v_pos);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_26derivative2(struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("derivative2", 0);

  /* "cython/radialsolver_wrap.pyx":192
 * 
 *     def derivative2(self, unicode bc, int pos):
 *         return self.teukcpp.getSecondDerivative(str_to_bc(bc), pos)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getSecondDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_pos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/radialsolver_wrap.pyx":191
 *         return self.teukcpp.getSecondDerivative(str_to_bc(bc), pos)
 * 
 *     def derivative2(self, unicode bc, int pos):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSecondDerivative(str_to_bc(bc), pos)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.derivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_28__reduce_cython__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_15RadialTeukolsky_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_15RadialTeukolsky_30__setstate_cython__(((struct __pyx_obj_11cybhpt_full_RadialTeukolsky *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_15RadialTeukolsky_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_RadialTeukolsky *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RadialTeukolsky.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":153
 * }
 * 
 * cdef Gauge str_to_gauge(unicode gauge_str) except *:             # <<<<<<<<<<<<<<
 *     if gauge_str in gauge_dict.keys():
 *         return gauge_dict[gauge_str]
 */

static enum Gauge __pyx_f_11cybhpt_full_str_to_gauge(PyObject *__pyx_v_gauge_str) {
  enum Gauge __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  enum Gauge __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("str_to_gauge", 0);

  /* "cython/teukolsky_wrap.pyx":154
 * 
 * cdef Gauge str_to_gauge(unicode gauge_str) except *:
 *     if gauge_str in gauge_dict.keys():             # <<<<<<<<<<<<<<
 *         return gauge_dict[gauge_str]
 *     else:
 */
  if (unlikely(__pyx_v_11cybhpt_full_gauge_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(3, 154, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_11cybhpt_full_gauge_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_gauge_str, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "cython/teukolsky_wrap.pyx":155
 * cdef Gauge str_to_gauge(unicode gauge_str) except *:
 *     if gauge_str in gauge_dict.keys():
 *         return gauge_dict[gauge_str]             # <<<<<<<<<<<<<<
 *     else:
 *         print("Error")
 */
    if (unlikely(__pyx_v_11cybhpt_full_gauge_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(3, 155, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_11cybhpt_full_gauge_dict, __pyx_v_gauge_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((enum Gauge)__Pyx_PyInt_As_enum__Gauge(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 155, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    goto __pyx_L0;

    /* "cython/teukolsky_wrap.pyx":154
 * 
 * cdef Gauge str_to_gauge(unicode gauge_str) except *:
 *     if gauge_str in gauge_dict.keys():             # <<<<<<<<<<<<<<
 *         return gauge_dict[gauge_str]
 *     else:
 */
  }

  /* "cython/teukolsky_wrap.pyx":157
 *         return gauge_dict[gauge_str]
 *     else:
 *         print("Error")             # <<<<<<<<<<<<<<
 *         TypeError("{} is not a supported gauge.".format(gauge_str))
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cython/teukolsky_wrap.pyx":158
 *     else:
 *         print("Error")
 *         TypeError("{} is not a supported gauge.".format(gauge_str))             # <<<<<<<<<<<<<<
 * 
 * cdef class TeukolskyMode:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_is_not_a_supported_gauge, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_gauge_str) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_gauge_str);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "cython/teukolsky_wrap.pyx":153
 * }
 * 
 * cdef Gauge str_to_gauge(unicode gauge_str) except *:             # <<<<<<<<<<<<<<
 *     if gauge_str in gauge_dict.keys():
 *         return gauge_dict[gauge_str]
 */

  /* function exit code */
  __pyx_r = (enum Gauge) 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cybhpt_full.str_to_gauge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum Gauge) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":165
 *     cdef int sampleTh
 * 
 *     def __cinit__(self, int s, int j, int m, int k, int n, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *         self.teukcpp = new TeukolskyModeCPP(s, j, m, k, n, dereference(geo.geocpp))
 *         self.sampleR = 1
 */

/* Python wrapper */
static int __pyx_pw_11cybhpt_full_13TeukolskyMode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11cybhpt_full_13TeukolskyMode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_s;
  int __pyx_v_j;
  int __pyx_v_m;
  int __pyx_v_k;
  int __pyx_v_n;
  struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_j,&__pyx_n_s_m,&__pyx_n_s_k,&__pyx_n_s_n,&__pyx_n_s_geo,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 1); __PYX_ERR(3, 165, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 2); __PYX_ERR(3, 165, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 3); __PYX_ERR(3, 165, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 4); __PYX_ERR(3, 165, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 5); __PYX_ERR(3, 165, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 165, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_s = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_s == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 165, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 165, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 165, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 165, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 165, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 165, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_11cybhpt_full_KerrGeodesic, 1, "geo", 0))) __PYX_ERR(3, 165, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode___cinit__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), __pyx_v_s, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_n, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11cybhpt_full_13TeukolskyMode___cinit__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_s, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, int __pyx_v_n, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cython/teukolsky_wrap.pyx":166
 * 
 *     def __cinit__(self, int s, int j, int m, int k, int n, KerrGeodesic geo):
 *         self.teukcpp = new TeukolskyModeCPP(s, j, m, k, n, dereference(geo.geocpp))             # <<<<<<<<<<<<<<
 *         self.sampleR = 1
 *         self.sampleTh = 1
 */
  __pyx_v_self->teukcpp = new TeukolskyMode(__pyx_v_s, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_n, (*__pyx_v_geo->geocpp));

  /* "cython/teukolsky_wrap.pyx":167
 *     def __cinit__(self, int s, int j, int m, int k, int n, KerrGeodesic geo):
 *         self.teukcpp = new TeukolskyModeCPP(s, j, m, k, n, dereference(geo.geocpp))
 *         self.sampleR = 1             # <<<<<<<<<<<<<<
 *         self.sampleTh = 1
 * 
 */
  __pyx_v_self->sampleR = 1;

  /* "cython/teukolsky_wrap.pyx":168
 *         self.teukcpp = new TeukolskyModeCPP(s, j, m, k, n, dereference(geo.geocpp))
 *         self.sampleR = 1
 *         self.sampleTh = 1             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->sampleTh = 1;

  /* "cython/teukolsky_wrap.pyx":165
 *     cdef int sampleTh
 * 
 *     def __cinit__(self, int s, int j, int m, int k, int n, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *         self.teukcpp = new TeukolskyModeCPP(s, j, m, k, n, dereference(geo.geocpp))
 *         self.sampleR = 1
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":170
 *         self.sampleTh = 1
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.teukcpp
 * 
 */

/* Python wrapper */
static void __pyx_pw_11cybhpt_full_13TeukolskyMode_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11cybhpt_full_13TeukolskyMode_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11cybhpt_full_13TeukolskyMode_2__dealloc__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11cybhpt_full_13TeukolskyMode_2__dealloc__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cython/teukolsky_wrap.pyx":171
 * 
 *     def __dealloc__(self):
 *         del self.teukcpp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->teukcpp;

  /* "cython/teukolsky_wrap.pyx":170
 *         self.sampleTh = 1
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.teukcpp
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/teukolsky_wrap.pyx":174
 * 
 *     @property
 *     def spinweight(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpinWeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_10spinweight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_10spinweight_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_10spinweight___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_10spinweight___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":175
 *     @property
 *     def spinweight(self):
 *         return self.teukcpp.getSpinWeight()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getSpinWeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":174
 * 
 *     @property
 *     def spinweight(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpinWeight()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.spinweight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":178
 * 
 *     @property
 *     def spheroidalmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpheroidalModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_14spheroidalmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_14spheroidalmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_14spheroidalmode___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_14spheroidalmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":179
 *     @property
 *     def spheroidalmode(self):
 *         return self.teukcpp.getSpheroidalModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getSpheroidalModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":178
 * 
 *     @property
 *     def spheroidalmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getSpheroidalModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.spheroidalmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":182
 * 
 *     @property
 *     def azimuthalmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getAzimuthalModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_13azimuthalmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_13azimuthalmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_13azimuthalmode___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_13azimuthalmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":183
 *     @property
 *     def azimuthalmode(self):
 *         return self.teukcpp.getAzimuthalModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getAzimuthalModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":182
 * 
 *     @property
 *     def azimuthalmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getAzimuthalModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.azimuthalmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":186
 * 
 *     @property
 *     def radialmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_10radialmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_10radialmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_10radialmode___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_10radialmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":187
 *     @property
 *     def radialmode(self):
 *         return self.teukcpp.getRadialModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getRadialModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":186
 * 
 *     @property
 *     def radialmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":190
 * 
 *     @property
 *     def polarmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_9polarmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_9polarmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_9polarmode___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_9polarmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":191
 *     @property
 *     def polarmode(self):
 *         return self.teukcpp.getPolarModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getPolarModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":190
 * 
 *     @property
 *     def polarmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":194
 * 
 *     @property
 *     def blackholespin(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBlackHoleSpin()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_13blackholespin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_13blackholespin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_13blackholespin___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_13blackholespin___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":195
 *     @property
 *     def blackholespin(self):
 *         return self.teukcpp.getBlackHoleSpin()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getBlackHoleSpin()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":194
 * 
 *     @property
 *     def blackholespin(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getBlackHoleSpin()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.blackholespin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":198
 * 
 *     @property
 *     def frequency(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getFrequency()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_9frequency_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_9frequency_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_9frequency___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_9frequency___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":199
 *     @property
 *     def frequency(self):
 *         return self.teukcpp.getFrequency()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getFrequency()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":198
 * 
 *     @property
 *     def frequency(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getFrequency()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.frequency.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":202
 * 
 *     @property
 *     def horizonfrequency(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getHorizonFrequency()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_16horizonfrequency_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_16horizonfrequency_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_16horizonfrequency___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_16horizonfrequency___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":203
 *     @property
 *     def horizonfrequency(self):
 *         return self.teukcpp.getHorizonFrequency()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getHorizonFrequency()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":202
 * 
 *     @property
 *     def horizonfrequency(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getHorizonFrequency()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.horizonfrequency.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":206
 * 
 *     @property
 *     def eigenvalue(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getEigenvalue()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_10eigenvalue_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_10eigenvalue_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_10eigenvalue___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_10eigenvalue___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":207
 *     @property
 *     def eigenvalue(self):
 *         return self.teukcpp.getEigenvalue()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getEigenvalue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":206
 * 
 *     @property
 *     def eigenvalue(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getEigenvalue()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.eigenvalue.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":210
 * 
 *     @property
 *     def mincouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getMinCouplingModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_15mincouplingmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_15mincouplingmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_15mincouplingmode___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_15mincouplingmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":211
 *     @property
 *     def mincouplingmode(self):
 *         return self.teukcpp.getMinCouplingModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getMinCouplingModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":210
 * 
 *     @property
 *     def mincouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getMinCouplingModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.mincouplingmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":214
 * 
 *     @property
 *     def maxcouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getMaxCouplingModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_15maxcouplingmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_15maxcouplingmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_15maxcouplingmode___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_15maxcouplingmode___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":215
 *     @property
 *     def maxcouplingmode(self):
 *         return self.teukcpp.getMaxCouplingModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     # some useful aliases
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->teukcpp->getMaxCouplingModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":214
 * 
 *     @property
 *     def maxcouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getMaxCouplingModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.maxcouplingmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":219
 *     # some useful aliases
 *     @property
 *     def j(self):             # <<<<<<<<<<<<<<
 *         return self.spheroidalmode
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1j_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1j_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_1j___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1j___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":220
 *     @property
 *     def j(self):
 *         return self.spheroidalmode             # <<<<<<<<<<<<<<
 *     @property
 *     def m(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_spheroidalmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":219
 *     # some useful aliases
 *     @property
 *     def j(self):             # <<<<<<<<<<<<<<
 *         return self.spheroidalmode
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.j.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":222
 *         return self.spheroidalmode
 *     @property
 *     def m(self):             # <<<<<<<<<<<<<<
 *         return self.azimuthalmode
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1m_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1m_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_1m___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1m___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":223
 *     @property
 *     def m(self):
 *         return self.azimuthalmode             # <<<<<<<<<<<<<<
 *     @property
 *     def k(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthalmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":222
 *         return self.spheroidalmode
 *     @property
 *     def m(self):             # <<<<<<<<<<<<<<
 *         return self.azimuthalmode
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.m.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":225
 *         return self.azimuthalmode
 *     @property
 *     def k(self):             # <<<<<<<<<<<<<<
 *         return self.polarmode
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1k_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1k_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_1k___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1k___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":226
 *     @property
 *     def k(self):
 *         return self.polarmode             # <<<<<<<<<<<<<<
 *     @property
 *     def n(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_polarmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":225
 *         return self.azimuthalmode
 *     @property
 *     def k(self):             # <<<<<<<<<<<<<<
 *         return self.polarmode
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.k.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":228
 *         return self.polarmode
 *     @property
 *     def n(self):             # <<<<<<<<<<<<<<
 *         return self.radialmode
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1n_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1n_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_1n___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1n___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":229
 *     @property
 *     def n(self):
 *         return self.radialmode             # <<<<<<<<<<<<<<
 *     @property
 *     def omega(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_radialmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":228
 *         return self.polarmode
 *     @property
 *     def n(self):             # <<<<<<<<<<<<<<
 *         return self.radialmode
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.n.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":231
 *         return self.radialmode
 *     @property
 *     def omega(self):             # <<<<<<<<<<<<<<
 *         return self.frequency
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_5omega_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_5omega_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_5omega___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_5omega___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":232
 *     @property
 *     def omega(self):
 *         return self.frequency             # <<<<<<<<<<<<<<
 *     @property
 *     def a(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_frequency); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":231
 *         return self.radialmode
 *     @property
 *     def omega(self):             # <<<<<<<<<<<<<<
 *         return self.frequency
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.omega.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":234
 *         return self.frequency
 *     @property
 *     def a(self):             # <<<<<<<<<<<<<<
 *         return self.blackholespin
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1a_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_1a_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_1a___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_1a___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":235
 *     @property
 *     def a(self):
 *         return self.blackholespin             # <<<<<<<<<<<<<<
 *     @property
 *     def radialpoints(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_blackholespin); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":234
 *         return self.frequency
 *     @property
 *     def a(self):             # <<<<<<<<<<<<<<
 *         return self.blackholespin
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.a.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":237
 *         return self.blackholespin
 *     @property
 *     def radialpoints(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.teukcpp.getRadialPoints(i) for i in range(self.sampleR)])
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_12radialpoints_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_12radialpoints_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_12radialpoints___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_12radialpoints___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  int __pyx_8genexpr5__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":238
 *     @property
 *     def radialpoints(self):
 *         return np.array([self.teukcpp.getRadialPoints(i) for i in range(self.sampleR)])             # <<<<<<<<<<<<<<
 *     @property
 *     def polarpoints(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_v_self->sampleR;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_8genexpr5__pyx_v_i = __pyx_t_6;
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getRadialPoints(__pyx_8genexpr5__pyx_v_i)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) __PYX_ERR(3, 238, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  } /* exit inner scope */
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":237
 *         return self.blackholespin
 *     @property
 *     def radialpoints(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.teukcpp.getRadialPoints(i) for i in range(self.sampleR)])
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialpoints.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":240
 *         return np.array([self.teukcpp.getRadialPoints(i) for i in range(self.sampleR)])
 *     @property
 *     def polarpoints(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.teukcpp.getPolarPoints(i) for i in range(self.sampleTh)])
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_11polarpoints_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_11polarpoints_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_11polarpoints___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_11polarpoints___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  int __pyx_8genexpr6__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":241
 *     @property
 *     def polarpoints(self):
 *         return np.array([self.teukcpp.getPolarPoints(i) for i in range(self.sampleTh)])             # <<<<<<<<<<<<<<
 *     @property
 *     def radialsolutions(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_v_self->sampleTh;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_8genexpr6__pyx_v_i = __pyx_t_6;
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getPolarPoints(__pyx_8genexpr6__pyx_v_i)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) __PYX_ERR(3, 241, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  } /* exit inner scope */
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":240
 *         return np.array([self.teukcpp.getRadialPoints(i) for i in range(self.sampleR)])
 *     @property
 *     def polarpoints(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.teukcpp.getPolarPoints(i) for i in range(self.sampleTh)])
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarpoints.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":243
 *         return np.array([self.teukcpp.getPolarPoints(i) for i in range(self.sampleTh)])
 *     @property
 *     def radialsolutions(self):             # <<<<<<<<<<<<<<
 *         return {
 *                 "In":np.array([self.teukcpp.getHomogeneousRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_15radialsolutions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_15radialsolutions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_15radialsolutions___get__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_15radialsolutions___get__(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  int __pyx_8genexpr7__pyx_v_i;
  int __pyx_8genexpr8__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":244
 *     @property
 *     def radialsolutions(self):
 *         return {             # <<<<<<<<<<<<<<
 *                 "In":np.array([self.teukcpp.getHomogeneousRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 *                 "Up":np.array([self.teukcpp.getHomogeneousRadialSolution(BoundaryCondition.Up, i) for i in range(self.sampleR)])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cython/teukolsky_wrap.pyx":245
 *     def radialsolutions(self):
 *         return {
 *                 "In":np.array([self.teukcpp.getHomogeneousRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),             # <<<<<<<<<<<<<<
 *                 "Up":np.array([self.teukcpp.getHomogeneousRadialSolution(BoundaryCondition.Up, i) for i in range(self.sampleR)])
 *         }
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_v_self->sampleR;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_8genexpr7__pyx_v_i = __pyx_t_7;
      __pyx_t_8 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getHomogeneousRadialSolution(In, __pyx_8genexpr7__pyx_v_i)); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(3, 245, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  } /* exit inner scope */
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_In, __pyx_t_2) < 0) __PYX_ERR(3, 245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":246
 *         return {
 *                 "In":np.array([self.teukcpp.getHomogeneousRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 *                 "Up":np.array([self.teukcpp.getHomogeneousRadialSolution(BoundaryCondition.Up, i) for i in range(self.sampleR)])             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_v_self->sampleR;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_8genexpr8__pyx_v_i = __pyx_t_7;
      __pyx_t_8 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getHomogeneousRadialSolution(Up, __pyx_8genexpr8__pyx_v_i)); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(3, 246, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  } /* exit inner scope */
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_Up, __pyx_t_2) < 0) __PYX_ERR(3, 245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":243
 *         return np.array([self.teukcpp.getPolarPoints(i) for i in range(self.sampleTh)])
 *     @property
 *     def radialsolutions(self):             # <<<<<<<<<<<<<<
 *         return {
 *                 "In":np.array([self.teukcpp.getHomogeneousRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialsolutions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":249
 *         }
 * 
 *     def teukolsky_amplitude(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getTeukolskyAmplitude(str_to_bc(bc))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_5teukolsky_amplitude(PyObject *__pyx_v_self, PyObject *__pyx_v_bc); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_5teukolsky_amplitude(PyObject *__pyx_v_self, PyObject *__pyx_v_bc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("teukolsky_amplitude (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 249, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_4teukolsky_amplitude(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), ((PyObject*)__pyx_v_bc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_4teukolsky_amplitude(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("teukolsky_amplitude", 0);

  /* "cython/teukolsky_wrap.pyx":250
 * 
 *     def teukolsky_amplitude(self, unicode bc):
 *         return self.teukcpp.getTeukolskyAmplitude(str_to_bc(bc))             # <<<<<<<<<<<<<<
 * 
 *     def teukolsky_amplitude_precision(self, unicode bc):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getTeukolskyAmplitude(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":249
 *         }
 * 
 *     def teukolsky_amplitude(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getTeukolskyAmplitude(str_to_bc(bc))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.teukolsky_amplitude", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":252
 *         return self.teukcpp.getTeukolskyAmplitude(str_to_bc(bc))
 * 
 *     def teukolsky_amplitude_precision(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getTeukolskyAmplitudePrecision(str_to_bc(bc))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_7teukolsky_amplitude_precision(PyObject *__pyx_v_self, PyObject *__pyx_v_bc); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_7teukolsky_amplitude_precision(PyObject *__pyx_v_self, PyObject *__pyx_v_bc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("teukolsky_amplitude_precision (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 252, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_6teukolsky_amplitude_precision(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), ((PyObject*)__pyx_v_bc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_6teukolsky_amplitude_precision(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("teukolsky_amplitude_precision", 0);

  /* "cython/teukolsky_wrap.pyx":253
 * 
 *     def teukolsky_amplitude_precision(self, unicode bc):
 *         return self.teukcpp.getTeukolskyAmplitudePrecision(str_to_bc(bc))             # <<<<<<<<<<<<<<
 * 
 *     def couplingcoefficient(self, int l):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getTeukolskyAmplitudePrecision(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":252
 *         return self.teukcpp.getTeukolskyAmplitude(str_to_bc(bc))
 * 
 *     def teukolsky_amplitude_precision(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getTeukolskyAmplitudePrecision(str_to_bc(bc))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.teukolsky_amplitude_precision", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":255
 *         return self.teukcpp.getTeukolskyAmplitudePrecision(str_to_bc(bc))
 * 
 *     def couplingcoefficient(self, int l):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getCouplingCoefficient(l)
 *     def radialpoint(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_9couplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_arg_l); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_9couplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_arg_l) {
  int __pyx_v_l;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("couplingcoefficient (wrapper)", 0);
  assert(__pyx_arg_l); {
    __pyx_v_l = __Pyx_PyInt_As_int(__pyx_arg_l); if (unlikely((__pyx_v_l == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 255, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.couplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_8couplingcoefficient(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), ((int)__pyx_v_l));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_8couplingcoefficient(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("couplingcoefficient", 0);

  /* "cython/teukolsky_wrap.pyx":256
 * 
 *     def couplingcoefficient(self, int l):
 *         return self.teukcpp.getCouplingCoefficient(l)             # <<<<<<<<<<<<<<
 *     def radialpoint(self, int i):
 *         return self.teukcpp.getRadialPoints(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getCouplingCoefficient(__pyx_v_l)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":255
 *         return self.teukcpp.getTeukolskyAmplitudePrecision(str_to_bc(bc))
 * 
 *     def couplingcoefficient(self, int l):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getCouplingCoefficient(l)
 *     def radialpoint(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.couplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":257
 *     def couplingcoefficient(self, int l):
 *         return self.teukcpp.getCouplingCoefficient(l)
 *     def radialpoint(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_11radialpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_11radialpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radialpoint (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 257, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_10radialpoint(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_10radialpoint(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radialpoint", 0);

  /* "cython/teukolsky_wrap.pyx":258
 *         return self.teukcpp.getCouplingCoefficient(l)
 *     def radialpoint(self, int i):
 *         return self.teukcpp.getRadialPoints(i)             # <<<<<<<<<<<<<<
 *     def radialsolution(self, unicode bc, int i):
 *         return self.teukcpp.getRadialSolution(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getRadialPoints(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":257
 *     def couplingcoefficient(self, int l):
 *         return self.teukcpp.getCouplingCoefficient(l)
 *     def radialpoint(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":259
 *     def radialpoint(self, int i):
 *         return self.teukcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_13radialsolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_13radialsolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radialsolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radialsolution", 1, 2, 2, 1); __PYX_ERR(3, 259, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radialsolution") < 0)) __PYX_ERR(3, 259, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 259, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radialsolution", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 259, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 259, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_12radialsolution(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_12radialsolution(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radialsolution", 0);

  /* "cython/teukolsky_wrap.pyx":260
 *         return self.teukcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):
 *         return self.teukcpp.getRadialSolution(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def radialderivative(self, unicode bc, int i):
 *         return self.teukcpp.getRadialDerivative(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getRadialSolution(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":259
 *     def radialpoint(self, int i):
 *         return self.teukcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":261
 *     def radialsolution(self, unicode bc, int i):
 *         return self.teukcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_15radialderivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_15radialderivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radialderivative (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radialderivative", 1, 2, 2, 1); __PYX_ERR(3, 261, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radialderivative") < 0)) __PYX_ERR(3, 261, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 261, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radialderivative", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 261, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 261, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_14radialderivative(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_14radialderivative(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radialderivative", 0);

  /* "cython/teukolsky_wrap.pyx":262
 *         return self.teukcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):
 *         return self.teukcpp.getRadialDerivative(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def radialderivative2(self, unicode bc, int i):
 *         return self.teukolsky_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getRadialDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":261
 *     def radialsolution(self, unicode bc, int i):
 *         return self.teukcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":263
 *     def radialderivative(self, unicode bc, int i):
 *         return self.teukcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukolsky_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_17radialderivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_17radialderivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radialderivative2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radialderivative2", 1, 2, 2, 1); __PYX_ERR(3, 263, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radialderivative2") < 0)) __PYX_ERR(3, 263, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 263, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radialderivative2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 263, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 263, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_16radialderivative2(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_16radialderivative2(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radialderivative2", 0);

  /* "cython/teukolsky_wrap.pyx":264
 *         return self.teukcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):
 *         return self.teukolsky_amplitude(bc)*self.homogeneousradialderivative2(bc, i)             # <<<<<<<<<<<<<<
 *     def homogeneousradialsolution(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_teukolsky_amplitude); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_bc) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_bc);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_homogeneousradialderivative2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_bc, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 264, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_bc, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 264, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_bc);
    __Pyx_GIVEREF(__pyx_v_bc);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_bc);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":263
 *     def radialderivative(self, unicode bc, int i):
 *         return self.teukcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukolsky_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.radialderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":265
 *     def radialderivative2(self, unicode bc, int i):
 *         return self.teukolsky_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_19homogeneousradialsolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_19homogeneousradialsolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("homogeneousradialsolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("homogeneousradialsolution", 1, 2, 2, 1); __PYX_ERR(3, 265, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "homogeneousradialsolution") < 0)) __PYX_ERR(3, 265, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 265, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("homogeneousradialsolution", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 265, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.homogeneousradialsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 265, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_18homogeneousradialsolution(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_18homogeneousradialsolution(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("homogeneousradialsolution", 0);

  /* "cython/teukolsky_wrap.pyx":266
 *         return self.teukolsky_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def homogeneousradialderivative(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getHomogeneousRadialSolution(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":265
 *     def radialderivative2(self, unicode bc, int i):
 *         return self.teukolsky_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.homogeneousradialsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":267
 *     def homogeneousradialsolution(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_21homogeneousradialderivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_21homogeneousradialderivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("homogeneousradialderivative (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("homogeneousradialderivative", 1, 2, 2, 1); __PYX_ERR(3, 267, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "homogeneousradialderivative") < 0)) __PYX_ERR(3, 267, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 267, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("homogeneousradialderivative", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 267, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.homogeneousradialderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 267, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_20homogeneousradialderivative(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_20homogeneousradialderivative(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("homogeneousradialderivative", 0);

  /* "cython/teukolsky_wrap.pyx":268
 *         return self.teukcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousSecondRadialDerivative(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getHomogeneousRadialDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":267
 *     def homogeneousradialsolution(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.homogeneousradialderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":269
 *     def homogeneousradialderivative(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getHomogeneousSecondRadialDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_23homogeneousradialderivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_23homogeneousradialderivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("homogeneousradialderivative2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("homogeneousradialderivative2", 1, 2, 2, 1); __PYX_ERR(3, 269, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "homogeneousradialderivative2") < 0)) __PYX_ERR(3, 269, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 269, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("homogeneousradialderivative2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 269, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.homogeneousradialderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 269, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_22homogeneousradialderivative2(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_22homogeneousradialderivative2(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("homogeneousradialderivative2", 0);

  /* "cython/teukolsky_wrap.pyx":270
 *         return self.teukcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousSecondRadialDerivative(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def polarpoint(self, int i):
 *         return self.teukcpp.getPolarPoints(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->teukcpp->getHomogeneousSecondRadialDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":269
 *     def homogeneousradialderivative(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getHomogeneousSecondRadialDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.homogeneousradialderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":271
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousSecondRadialDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_25polarpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_25polarpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("polarpoint (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 271, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_24polarpoint(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_24polarpoint(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("polarpoint", 0);

  /* "cython/teukolsky_wrap.pyx":272
 *         return self.teukcpp.getHomogeneousSecondRadialDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):
 *         return self.teukcpp.getPolarPoints(i)             # <<<<<<<<<<<<<<
 *     def polarsolution(self, int i):
 *         return self.teukcpp.getPolarSolution(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getPolarPoints(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":271
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 *         return self.teukcpp.getHomogeneousSecondRadialDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":273
 *     def polarpoint(self, int i):
 *         return self.teukcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_27polarsolution(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_27polarsolution(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("polarsolution (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 273, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_26polarsolution(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_26polarsolution(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("polarsolution", 0);

  /* "cython/teukolsky_wrap.pyx":274
 *         return self.teukcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):
 *         return self.teukcpp.getPolarSolution(i)             # <<<<<<<<<<<<<<
 *     def polarderivative(self, int i):
 *         return self.teukcpp.getPolarDerivative(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getPolarSolution(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":273
 *     def polarpoint(self, int i):
 *         return self.teukcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":275
 *     def polarsolution(self, int i):
 *         return self.teukcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_29polarderivative(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_29polarderivative(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("polarderivative (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 275, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_28polarderivative(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_28polarderivative(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("polarderivative", 0);

  /* "cython/teukolsky_wrap.pyx":276
 *         return self.teukcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):
 *         return self.teukcpp.getPolarDerivative(i)             # <<<<<<<<<<<<<<
 *     def polarderivative2(self, int i):
 *         return self.teukcpp.getPolarSecondDerivative(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getPolarDerivative(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":275
 *     def polarsolution(self, int i):
 *         return self.teukcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":277
 *     def polarderivative(self, int i):
 *         return self.teukcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarSecondDerivative(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_31polarderivative2(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_31polarderivative2(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("polarderivative2 (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 277, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_30polarderivative2(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_30polarderivative2(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("polarderivative2", 0);

  /* "cython/teukolsky_wrap.pyx":278
 *         return self.teukcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):
 *         return self.teukcpp.getPolarSecondDerivative(i)             # <<<<<<<<<<<<<<
 * 
 *     def solve(self, KerrGeodesic geo, unicode method = "AUTO", int nsample = 256, teuk=None, swsh=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->teukcpp->getPolarSecondDerivative(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":277
 *     def polarderivative(self, int i):
 *         return self.teukcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):             # <<<<<<<<<<<<<<
 *         return self.teukcpp.getPolarSecondDerivative(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.polarderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":280
 *         return self.teukcpp.getPolarSecondDerivative(i)
 * 
 *     def solve(self, KerrGeodesic geo, unicode method = "AUTO", int nsample = 256, teuk=None, swsh=None):             # <<<<<<<<<<<<<<
 *         self.teukcpp.generateSolutions(dereference(geo.geocpp), str_to_method(method), nsample)
 *         self.sampleR = self.teukcpp.getRadialSampleNumber()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_33solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_33solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo = 0;
  PyObject *__pyx_v_method = 0;
  int __pyx_v_nsample;
  CYTHON_UNUSED PyObject *__pyx_v_teuk = 0;
  CYTHON_UNUSED PyObject *__pyx_v_swsh = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_geo,&__pyx_n_s_method,&__pyx_n_s_nsample,&__pyx_n_s_teuk,&__pyx_n_s_swsh,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject*)__pyx_n_u_AUTO);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_method);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nsample);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_teuk);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_swsh);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solve") < 0)) __PYX_ERR(3, 280, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_geo = ((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)values[0]);
    __pyx_v_method = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_nsample = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nsample == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 280, __pyx_L3_error)
    } else {
      __pyx_v_nsample = ((int)0x100);
    }
    __pyx_v_teuk = values[3];
    __pyx_v_swsh = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solve", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 280, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_11cybhpt_full_KerrGeodesic, 1, "geo", 0))) __PYX_ERR(3, 280, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_method), (&PyUnicode_Type), 1, "method", 1))) __PYX_ERR(3, 280, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_32solve(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), __pyx_v_geo, __pyx_v_method, __pyx_v_nsample, __pyx_v_teuk, __pyx_v_swsh);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_32solve(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo, PyObject *__pyx_v_method, int __pyx_v_nsample, CYTHON_UNUSED PyObject *__pyx_v_teuk, CYTHON_UNUSED PyObject *__pyx_v_swsh) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve", 0);

  /* "cython/teukolsky_wrap.pyx":281
 * 
 *     def solve(self, KerrGeodesic geo, unicode method = "AUTO", int nsample = 256, teuk=None, swsh=None):
 *         self.teukcpp.generateSolutions(dereference(geo.geocpp), str_to_method(method), nsample)             # <<<<<<<<<<<<<<
 *         self.sampleR = self.teukcpp.getRadialSampleNumber()
 *         self.sampleTh = self.teukcpp.getPolarSampleNumber()
 */
  (void)(__pyx_v_self->teukcpp->generateSolutions((*__pyx_v_geo->geocpp), __pyx_f_11cybhpt_full_str_to_method(__pyx_v_method), __pyx_v_nsample));

  /* "cython/teukolsky_wrap.pyx":282
 *     def solve(self, KerrGeodesic geo, unicode method = "AUTO", int nsample = 256, teuk=None, swsh=None):
 *         self.teukcpp.generateSolutions(dereference(geo.geocpp), str_to_method(method), nsample)
 *         self.sampleR = self.teukcpp.getRadialSampleNumber()             # <<<<<<<<<<<<<<
 *         self.sampleTh = self.teukcpp.getPolarSampleNumber()
 * 
 */
  __pyx_v_self->sampleR = __pyx_v_self->teukcpp->getRadialSampleNumber();

  /* "cython/teukolsky_wrap.pyx":283
 *         self.teukcpp.generateSolutions(dereference(geo.geocpp), str_to_method(method), nsample)
 *         self.sampleR = self.teukcpp.getRadialSampleNumber()
 *         self.sampleTh = self.teukcpp.getPolarSampleNumber()             # <<<<<<<<<<<<<<
 * 
 *     def flip_spinweight_frequency(self):
 */
  __pyx_v_self->sampleTh = __pyx_v_self->teukcpp->getPolarSampleNumber();

  /* "cython/teukolsky_wrap.pyx":280
 *         return self.teukcpp.getPolarSecondDerivative(i)
 * 
 *     def solve(self, KerrGeodesic geo, unicode method = "AUTO", int nsample = 256, teuk=None, swsh=None):             # <<<<<<<<<<<<<<
 *         self.teukcpp.generateSolutions(dereference(geo.geocpp), str_to_method(method), nsample)
 *         self.sampleR = self.teukcpp.getRadialSampleNumber()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":285
 *         self.sampleTh = self.teukcpp.getPolarSampleNumber()
 * 
 *     def flip_spinweight_frequency(self):             # <<<<<<<<<<<<<<
 *         self.teukcpp.flipSpinWeightAndFrequency()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_35flip_spinweight_frequency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_35flip_spinweight_frequency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flip_spinweight_frequency (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_34flip_spinweight_frequency(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_34flip_spinweight_frequency(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flip_spinweight_frequency", 0);

  /* "cython/teukolsky_wrap.pyx":286
 * 
 *     def flip_spinweight_frequency(self):
 *         self.teukcpp.flipSpinWeightAndFrequency()             # <<<<<<<<<<<<<<
 * 
 *     def flip_spinweight(self):
 */
  (void)(__pyx_v_self->teukcpp->flipSpinWeightAndFrequency());

  /* "cython/teukolsky_wrap.pyx":285
 *         self.sampleTh = self.teukcpp.getPolarSampleNumber()
 * 
 *     def flip_spinweight_frequency(self):             # <<<<<<<<<<<<<<
 *         self.teukcpp.flipSpinWeightAndFrequency()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":288
 *         self.teukcpp.flipSpinWeightAndFrequency()
 * 
 *     def flip_spinweight(self):             # <<<<<<<<<<<<<<
 *         self.teukcpp.flipSpinWeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_37flip_spinweight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_37flip_spinweight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flip_spinweight (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_36flip_spinweight(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_36flip_spinweight(struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flip_spinweight", 0);

  /* "cython/teukolsky_wrap.pyx":289
 * 
 *     def flip_spinweight(self):
 *         self.teukcpp.flipSpinWeight()             # <<<<<<<<<<<<<<
 * 
 * cdef class HertzMode:
 */
  (void)(__pyx_v_self->teukcpp->flipSpinWeight());

  /* "cython/teukolsky_wrap.pyx":288
 *         self.teukcpp.flipSpinWeightAndFrequency()
 * 
 *     def flip_spinweight(self):             # <<<<<<<<<<<<<<
 *         self.teukcpp.flipSpinWeight()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_39__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_39__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_38__reduce_cython__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_41__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_13TeukolskyMode_41__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_13TeukolskyMode_40__setstate_cython__(((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_13TeukolskyMode_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.TeukolskyMode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":298
 *     cdef int sampleTh
 * 
 *     def __init__(self, TeukolskyMode teuk, unicode gauge):             # <<<<<<<<<<<<<<
 *         if np.abs(teuk.spinweight) != 2:
 *             raise ValueError("Hertz mode only accepts Teukolsky solutions with spin-weight -2,+2.")
 */

/* Python wrapper */
static int __pyx_pw_11cybhpt_full_9HertzMode_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11cybhpt_full_9HertzMode_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_teuk = 0;
  PyObject *__pyx_v_gauge = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_teuk,&__pyx_n_s_gauge,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_teuk)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gauge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(3, 298, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(3, 298, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_teuk = ((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)values[0]);
    __pyx_v_gauge = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 298, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_teuk), __pyx_ptype_11cybhpt_full_TeukolskyMode, 1, "teuk", 0))) __PYX_ERR(3, 298, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gauge), (&PyUnicode_Type), 1, "gauge", 1))) __PYX_ERR(3, 298, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode___init__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), __pyx_v_teuk, __pyx_v_gauge);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11cybhpt_full_9HertzMode___init__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_teuk, PyObject *__pyx_v_gauge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  enum Gauge __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cython/teukolsky_wrap.pyx":299
 * 
 *     def __init__(self, TeukolskyMode teuk, unicode gauge):
 *         if np.abs(teuk.spinweight) != 2:             # <<<<<<<<<<<<<<
 *             raise ValueError("Hertz mode only accepts Teukolsky solutions with spin-weight -2,+2.")
 *         self.gauge_cpp = str_to_gauge(gauge)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_abs); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_teuk), __pyx_n_s_spinweight); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(3, 299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "cython/teukolsky_wrap.pyx":300
 *     def __init__(self, TeukolskyMode teuk, unicode gauge):
 *         if np.abs(teuk.spinweight) != 2:
 *             raise ValueError("Hertz mode only accepts Teukolsky solutions with spin-weight -2,+2.")             # <<<<<<<<<<<<<<
 *         self.gauge_cpp = str_to_gauge(gauge)
 *         self.gauge_str = gauge
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 300, __pyx_L1_error)

    /* "cython/teukolsky_wrap.pyx":299
 * 
 *     def __init__(self, TeukolskyMode teuk, unicode gauge):
 *         if np.abs(teuk.spinweight) != 2:             # <<<<<<<<<<<<<<
 *             raise ValueError("Hertz mode only accepts Teukolsky solutions with spin-weight -2,+2.")
 *         self.gauge_cpp = str_to_gauge(gauge)
 */
  }

  /* "cython/teukolsky_wrap.pyx":301
 *         if np.abs(teuk.spinweight) != 2:
 *             raise ValueError("Hertz mode only accepts Teukolsky solutions with spin-weight -2,+2.")
 *         self.gauge_cpp = str_to_gauge(gauge)             # <<<<<<<<<<<<<<
 *         self.gauge_str = gauge
 *         self.hertzcpp = new HertzModeCPP(dereference(teuk.teukcpp), self.gauge_cpp)
 */
  __pyx_t_6 = __pyx_f_11cybhpt_full_str_to_gauge(__pyx_v_gauge); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 301, __pyx_L1_error)
  __pyx_v_self->gauge_cpp = __pyx_t_6;

  /* "cython/teukolsky_wrap.pyx":302
 *             raise ValueError("Hertz mode only accepts Teukolsky solutions with spin-weight -2,+2.")
 *         self.gauge_cpp = str_to_gauge(gauge)
 *         self.gauge_str = gauge             # <<<<<<<<<<<<<<
 *         self.hertzcpp = new HertzModeCPP(dereference(teuk.teukcpp), self.gauge_cpp)
 *         self.sampleR = teuk.sampleR
 */
  __Pyx_INCREF(__pyx_v_gauge);
  __Pyx_GIVEREF(__pyx_v_gauge);
  __Pyx_GOTREF(__pyx_v_self->gauge_str);
  __Pyx_DECREF(__pyx_v_self->gauge_str);
  __pyx_v_self->gauge_str = __pyx_v_gauge;

  /* "cython/teukolsky_wrap.pyx":303
 *         self.gauge_cpp = str_to_gauge(gauge)
 *         self.gauge_str = gauge
 *         self.hertzcpp = new HertzModeCPP(dereference(teuk.teukcpp), self.gauge_cpp)             # <<<<<<<<<<<<<<
 *         self.sampleR = teuk.sampleR
 *         self.sampleTh = teuk.sampleTh
 */
  __pyx_v_self->hertzcpp = new HertzMode((*__pyx_v_teuk->teukcpp), __pyx_v_self->gauge_cpp);

  /* "cython/teukolsky_wrap.pyx":304
 *         self.gauge_str = gauge
 *         self.hertzcpp = new HertzModeCPP(dereference(teuk.teukcpp), self.gauge_cpp)
 *         self.sampleR = teuk.sampleR             # <<<<<<<<<<<<<<
 *         self.sampleTh = teuk.sampleTh
 * 
 */
  __pyx_t_7 = __pyx_v_teuk->sampleR;
  __pyx_v_self->sampleR = __pyx_t_7;

  /* "cython/teukolsky_wrap.pyx":305
 *         self.hertzcpp = new HertzModeCPP(dereference(teuk.teukcpp), self.gauge_cpp)
 *         self.sampleR = teuk.sampleR
 *         self.sampleTh = teuk.sampleTh             # <<<<<<<<<<<<<<
 * 
 *     def solve(self):
 */
  __pyx_t_7 = __pyx_v_teuk->sampleTh;
  __pyx_v_self->sampleTh = __pyx_t_7;

  /* "cython/teukolsky_wrap.pyx":298
 *     cdef int sampleTh
 * 
 *     def __init__(self, TeukolskyMode teuk, unicode gauge):             # <<<<<<<<<<<<<<
 *         if np.abs(teuk.spinweight) != 2:
 *             raise ValueError("Hertz mode only accepts Teukolsky solutions with spin-weight -2,+2.")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":307
 *         self.sampleTh = teuk.sampleTh
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         self.hertzcpp.generateSolutions()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_3solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_3solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_2solve(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_2solve(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve", 0);

  /* "cython/teukolsky_wrap.pyx":308
 * 
 *     def solve(self):
 *         self.hertzcpp.generateSolutions()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  (void)(__pyx_v_self->hertzcpp->generateSolutions());

  /* "cython/teukolsky_wrap.pyx":307
 *         self.sampleTh = teuk.sampleTh
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         self.hertzcpp.generateSolutions()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":310
 *         self.hertzcpp.generateSolutions()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.hertzcpp
 * 
 */

/* Python wrapper */
static void __pyx_pw_11cybhpt_full_9HertzMode_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11cybhpt_full_9HertzMode_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11cybhpt_full_9HertzMode_4__dealloc__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11cybhpt_full_9HertzMode_4__dealloc__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cython/teukolsky_wrap.pyx":311
 * 
 *     def __dealloc__(self):
 *         del self.hertzcpp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->hertzcpp;

  /* "cython/teukolsky_wrap.pyx":310
 *         self.hertzcpp.generateSolutions()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.hertzcpp
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/teukolsky_wrap.pyx":314
 * 
 *     @property
 *     def gauge(self):             # <<<<<<<<<<<<<<
 *         return self.gauge_str
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_5gauge_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_5gauge_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_5gauge___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_5gauge___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":315
 *     @property
 *     def gauge(self):
 *         return self.gauge_str             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->gauge_str);
  __pyx_r = __pyx_v_self->gauge_str;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":314
 * 
 *     @property
 *     def gauge(self):             # <<<<<<<<<<<<<<
 *         return self.gauge_str
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":318
 * 
 *     @property
 *     def spinweight(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getSpinWeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_10spinweight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_10spinweight_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_10spinweight___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_10spinweight___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":319
 *     @property
 *     def spinweight(self):
 *         return self.hertzcpp.getSpinWeight()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->hertzcpp->getSpinWeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":318
 * 
 *     @property
 *     def spinweight(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getSpinWeight()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.spinweight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":322
 * 
 *     @property
 *     def spheroidalmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getSpheroidalModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_14spheroidalmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_14spheroidalmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_14spheroidalmode___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_14spheroidalmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":323
 *     @property
 *     def spheroidalmode(self):
 *         return self.hertzcpp.getSpheroidalModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->hertzcpp->getSpheroidalModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":322
 * 
 *     @property
 *     def spheroidalmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getSpheroidalModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.spheroidalmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":326
 * 
 *     @property
 *     def azimuthalmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getAzimuthalModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_13azimuthalmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_13azimuthalmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_13azimuthalmode___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_13azimuthalmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":327
 *     @property
 *     def azimuthalmode(self):
 *         return self.hertzcpp.getAzimuthalModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->hertzcpp->getAzimuthalModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":326
 * 
 *     @property
 *     def azimuthalmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getAzimuthalModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.azimuthalmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":330
 * 
 *     @property
 *     def radialmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getRadialModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_10radialmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_10radialmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_10radialmode___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_10radialmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":331
 *     @property
 *     def radialmode(self):
 *         return self.hertzcpp.getRadialModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->hertzcpp->getRadialModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":330
 * 
 *     @property
 *     def radialmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getRadialModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":334
 * 
 *     @property
 *     def polarmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_9polarmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_9polarmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_9polarmode___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_9polarmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":335
 *     @property
 *     def polarmode(self):
 *         return self.hertzcpp.getPolarModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->hertzcpp->getPolarModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":334
 * 
 *     @property
 *     def polarmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.polarmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":338
 * 
 *     @property
 *     def blackholespin(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getBlackHoleSpin()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_13blackholespin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_13blackholespin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_13blackholespin___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_13blackholespin___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":339
 *     @property
 *     def blackholespin(self):
 *         return self.hertzcpp.getBlackHoleSpin()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getBlackHoleSpin()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":338
 * 
 *     @property
 *     def blackholespin(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getBlackHoleSpin()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.blackholespin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":342
 * 
 *     @property
 *     def frequency(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getFrequency()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_9frequency_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_9frequency_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_9frequency___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_9frequency___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":343
 *     @property
 *     def frequency(self):
 *         return self.hertzcpp.getFrequency()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getFrequency()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":342
 * 
 *     @property
 *     def frequency(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getFrequency()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.frequency.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":346
 * 
 *     @property
 *     def horizonfrequency(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHorizonFrequency()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_16horizonfrequency_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_16horizonfrequency_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_16horizonfrequency___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_16horizonfrequency___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":347
 *     @property
 *     def horizonfrequency(self):
 *         return self.hertzcpp.getHorizonFrequency()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getHorizonFrequency()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":346
 * 
 *     @property
 *     def horizonfrequency(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHorizonFrequency()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.horizonfrequency.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":350
 * 
 *     @property
 *     def eigenvalue(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getEigenvalue()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_10eigenvalue_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_10eigenvalue_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_10eigenvalue___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_10eigenvalue___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":351
 *     @property
 *     def eigenvalue(self):
 *         return self.hertzcpp.getEigenvalue()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getEigenvalue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":350
 * 
 *     @property
 *     def eigenvalue(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getEigenvalue()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.eigenvalue.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":354
 * 
 *     @property
 *     def mincouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getMinCouplingModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_15mincouplingmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_15mincouplingmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_15mincouplingmode___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_15mincouplingmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":355
 *     @property
 *     def mincouplingmode(self):
 *         return self.hertzcpp.getMinCouplingModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->hertzcpp->getMinCouplingModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":354
 * 
 *     @property
 *     def mincouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getMinCouplingModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.mincouplingmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":358
 * 
 *     @property
 *     def maxcouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getMaxCouplingModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_15maxcouplingmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_15maxcouplingmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_15maxcouplingmode___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_15maxcouplingmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":359
 *     @property
 *     def maxcouplingmode(self):
 *         return self.hertzcpp.getMaxCouplingModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->hertzcpp->getMaxCouplingModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":358
 * 
 *     @property
 *     def maxcouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getMaxCouplingModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.maxcouplingmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":362
 * 
 *     @property
 *     def minscalarcouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getMinScalarCouplingModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_21minscalarcouplingmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_21minscalarcouplingmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_21minscalarcouplingmode___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_21minscalarcouplingmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":363
 *     @property
 *     def minscalarcouplingmode(self):
 *         return self.hertzcpp.getMinScalarCouplingModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->hertzcpp->getMinScalarCouplingModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":362
 * 
 *     @property
 *     def minscalarcouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getMinScalarCouplingModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.minscalarcouplingmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":366
 * 
 *     @property
 *     def maxscalarcouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getMaxScalarCouplingModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_21maxscalarcouplingmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_21maxscalarcouplingmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_21maxscalarcouplingmode___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_21maxscalarcouplingmode___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":367
 *     @property
 *     def maxscalarcouplingmode(self):
 *         return self.hertzcpp.getMaxScalarCouplingModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     # some useful aliases
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->hertzcpp->getMaxScalarCouplingModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":366
 * 
 *     @property
 *     def maxscalarcouplingmode(self):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getMaxScalarCouplingModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.maxscalarcouplingmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":371
 *     # some useful aliases
 *     @property
 *     def j(self):             # <<<<<<<<<<<<<<
 *         return self.spheroidalmode
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1j_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1j_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_1j___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1j___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":372
 *     @property
 *     def j(self):
 *         return self.spheroidalmode             # <<<<<<<<<<<<<<
 *     @property
 *     def m(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_spheroidalmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":371
 *     # some useful aliases
 *     @property
 *     def j(self):             # <<<<<<<<<<<<<<
 *         return self.spheroidalmode
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.j.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":374
 *         return self.spheroidalmode
 *     @property
 *     def m(self):             # <<<<<<<<<<<<<<
 *         return self.azimuthalmode
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1m_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1m_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_1m___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1m___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":375
 *     @property
 *     def m(self):
 *         return self.azimuthalmode             # <<<<<<<<<<<<<<
 *     @property
 *     def k(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthalmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":374
 *         return self.spheroidalmode
 *     @property
 *     def m(self):             # <<<<<<<<<<<<<<
 *         return self.azimuthalmode
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.m.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":377
 *         return self.azimuthalmode
 *     @property
 *     def k(self):             # <<<<<<<<<<<<<<
 *         return self.polarmode
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1k_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1k_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_1k___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1k___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":378
 *     @property
 *     def k(self):
 *         return self.polarmode             # <<<<<<<<<<<<<<
 *     @property
 *     def n(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_polarmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":377
 *         return self.azimuthalmode
 *     @property
 *     def k(self):             # <<<<<<<<<<<<<<
 *         return self.polarmode
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.k.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":380
 *         return self.polarmode
 *     @property
 *     def n(self):             # <<<<<<<<<<<<<<
 *         return self.radialmode
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1n_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1n_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_1n___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1n___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":381
 *     @property
 *     def n(self):
 *         return self.radialmode             # <<<<<<<<<<<<<<
 *     @property
 *     def omega(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_radialmode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":380
 *         return self.polarmode
 *     @property
 *     def n(self):             # <<<<<<<<<<<<<<
 *         return self.radialmode
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.n.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":383
 *         return self.radialmode
 *     @property
 *     def omega(self):             # <<<<<<<<<<<<<<
 *         return self.frequency
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_5omega_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_5omega_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_5omega___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_5omega___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":384
 *     @property
 *     def omega(self):
 *         return self.frequency             # <<<<<<<<<<<<<<
 *     @property
 *     def a(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_frequency); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":383
 *         return self.radialmode
 *     @property
 *     def omega(self):             # <<<<<<<<<<<<<<
 *         return self.frequency
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.omega.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":386
 *         return self.frequency
 *     @property
 *     def a(self):             # <<<<<<<<<<<<<<
 *         return self.blackholespin
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1a_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_1a_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_1a___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_1a___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":387
 *     @property
 *     def a(self):
 *         return self.blackholespin             # <<<<<<<<<<<<<<
 * 
 *     def hertz_amplitude(self, unicode bc):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_blackholespin); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":386
 *         return self.frequency
 *     @property
 *     def a(self):             # <<<<<<<<<<<<<<
 *         return self.blackholespin
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.a.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":389
 *         return self.blackholespin
 * 
 *     def hertz_amplitude(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHertzAmplitude(str_to_bc(bc))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_7hertz_amplitude(PyObject *__pyx_v_self, PyObject *__pyx_v_bc); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_7hertz_amplitude(PyObject *__pyx_v_self, PyObject *__pyx_v_bc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hertz_amplitude (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 389, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_6hertz_amplitude(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), ((PyObject*)__pyx_v_bc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_6hertz_amplitude(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hertz_amplitude", 0);

  /* "cython/teukolsky_wrap.pyx":390
 * 
 *     def hertz_amplitude(self, unicode bc):
 *         return self.hertzcpp.getHertzAmplitude(str_to_bc(bc))             # <<<<<<<<<<<<<<
 * 
 *     def couplingcoefficient(self, int l):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getHertzAmplitude(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":389
 *         return self.blackholespin
 * 
 *     def hertz_amplitude(self, unicode bc):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHertzAmplitude(str_to_bc(bc))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.hertz_amplitude", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":392
 *         return self.hertzcpp.getHertzAmplitude(str_to_bc(bc))
 * 
 *     def couplingcoefficient(self, int l):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getCouplingCoefficient(l)
 *     def scalarcouplingcoefficient(self, int l):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_9couplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_arg_l); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_9couplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_arg_l) {
  int __pyx_v_l;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("couplingcoefficient (wrapper)", 0);
  assert(__pyx_arg_l); {
    __pyx_v_l = __Pyx_PyInt_As_int(__pyx_arg_l); if (unlikely((__pyx_v_l == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 392, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.couplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_8couplingcoefficient(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), ((int)__pyx_v_l));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_8couplingcoefficient(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("couplingcoefficient", 0);

  /* "cython/teukolsky_wrap.pyx":393
 * 
 *     def couplingcoefficient(self, int l):
 *         return self.hertzcpp.getCouplingCoefficient(l)             # <<<<<<<<<<<<<<
 *     def scalarcouplingcoefficient(self, int l):
 *         return self.hertzcpp.getScalarCouplingCoefficient(l)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getCouplingCoefficient(__pyx_v_l)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":392
 *         return self.hertzcpp.getHertzAmplitude(str_to_bc(bc))
 * 
 *     def couplingcoefficient(self, int l):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getCouplingCoefficient(l)
 *     def scalarcouplingcoefficient(self, int l):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.couplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":394
 *     def couplingcoefficient(self, int l):
 *         return self.hertzcpp.getCouplingCoefficient(l)
 *     def scalarcouplingcoefficient(self, int l):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getScalarCouplingCoefficient(l)
 *     def radialpoint(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_11scalarcouplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_arg_l); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_11scalarcouplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_arg_l) {
  int __pyx_v_l;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scalarcouplingcoefficient (wrapper)", 0);
  assert(__pyx_arg_l); {
    __pyx_v_l = __Pyx_PyInt_As_int(__pyx_arg_l); if (unlikely((__pyx_v_l == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 394, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.scalarcouplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_10scalarcouplingcoefficient(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), ((int)__pyx_v_l));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_10scalarcouplingcoefficient(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scalarcouplingcoefficient", 0);

  /* "cython/teukolsky_wrap.pyx":395
 *         return self.hertzcpp.getCouplingCoefficient(l)
 *     def scalarcouplingcoefficient(self, int l):
 *         return self.hertzcpp.getScalarCouplingCoefficient(l)             # <<<<<<<<<<<<<<
 *     def radialpoint(self, int i):
 *         return self.hertzcpp.getRadialPoints(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getScalarCouplingCoefficient(__pyx_v_l)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":394
 *     def couplingcoefficient(self, int l):
 *         return self.hertzcpp.getCouplingCoefficient(l)
 *     def scalarcouplingcoefficient(self, int l):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getScalarCouplingCoefficient(l)
 *     def radialpoint(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.scalarcouplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":396
 *     def scalarcouplingcoefficient(self, int l):
 *         return self.hertzcpp.getScalarCouplingCoefficient(l)
 *     def radialpoint(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_13radialpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_13radialpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radialpoint (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 396, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_12radialpoint(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_12radialpoint(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radialpoint", 0);

  /* "cython/teukolsky_wrap.pyx":397
 *         return self.hertzcpp.getScalarCouplingCoefficient(l)
 *     def radialpoint(self, int i):
 *         return self.hertzcpp.getRadialPoints(i)             # <<<<<<<<<<<<<<
 *     def radialsolution(self, unicode bc, int i):
 *         return self.hertzcpp.getRadialSolution(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getRadialPoints(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":396
 *     def scalarcouplingcoefficient(self, int l):
 *         return self.hertzcpp.getScalarCouplingCoefficient(l)
 *     def radialpoint(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":398
 *     def radialpoint(self, int i):
 *         return self.hertzcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_15radialsolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_15radialsolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radialsolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radialsolution", 1, 2, 2, 1); __PYX_ERR(3, 398, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radialsolution") < 0)) __PYX_ERR(3, 398, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 398, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radialsolution", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 398, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 398, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_14radialsolution(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_14radialsolution(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radialsolution", 0);

  /* "cython/teukolsky_wrap.pyx":399
 *         return self.hertzcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):
 *         return self.hertzcpp.getRadialSolution(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def radialderivative(self, unicode bc, int i):
 *         return self.hertzcpp.getRadialDerivative(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getRadialSolution(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":398
 *     def radialpoint(self, int i):
 *         return self.hertzcpp.getRadialPoints(i)
 *     def radialsolution(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":400
 *     def radialsolution(self, unicode bc, int i):
 *         return self.hertzcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_17radialderivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_17radialderivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radialderivative (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radialderivative", 1, 2, 2, 1); __PYX_ERR(3, 400, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radialderivative") < 0)) __PYX_ERR(3, 400, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 400, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radialderivative", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 400, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 400, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_16radialderivative(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_16radialderivative(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radialderivative", 0);

  /* "cython/teukolsky_wrap.pyx":401
 *         return self.hertzcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):
 *         return self.hertzcpp.getRadialDerivative(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def radialderivative2(self, unicode bc, int i):
 *         return self.hertz_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getRadialDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":400
 *     def radialsolution(self, unicode bc, int i):
 *         return self.hertzcpp.getRadialSolution(str_to_bc(bc), i)
 *     def radialderivative(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":402
 *     def radialderivative(self, unicode bc, int i):
 *         return self.hertzcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertz_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_19radialderivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_19radialderivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radialderivative2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radialderivative2", 1, 2, 2, 1); __PYX_ERR(3, 402, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radialderivative2") < 0)) __PYX_ERR(3, 402, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 402, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radialderivative2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 402, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 402, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_18radialderivative2(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_18radialderivative2(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radialderivative2", 0);

  /* "cython/teukolsky_wrap.pyx":403
 *         return self.hertzcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):
 *         return self.hertz_amplitude(bc)*self.homogeneousradialderivative2(bc, i)             # <<<<<<<<<<<<<<
 *     def homogeneousradialsolution(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hertz_amplitude); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_bc) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_bc);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_homogeneousradialderivative2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_bc, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 403, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_bc, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 403, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_bc);
    __Pyx_GIVEREF(__pyx_v_bc);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_bc);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":402
 *     def radialderivative(self, unicode bc, int i):
 *         return self.hertzcpp.getRadialDerivative(str_to_bc(bc), i)
 *     def radialderivative2(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertz_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":404
 *     def radialderivative2(self, unicode bc, int i):
 *         return self.hertz_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_21homogeneousradialsolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_21homogeneousradialsolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("homogeneousradialsolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("homogeneousradialsolution", 1, 2, 2, 1); __PYX_ERR(3, 404, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "homogeneousradialsolution") < 0)) __PYX_ERR(3, 404, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 404, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("homogeneousradialsolution", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 404, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.homogeneousradialsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 404, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_20homogeneousradialsolution(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_20homogeneousradialsolution(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("homogeneousradialsolution", 0);

  /* "cython/teukolsky_wrap.pyx":405
 *         return self.hertz_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def homogeneousradialderivative(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getHomogeneousRadialSolution(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":404
 *     def radialderivative2(self, unicode bc, int i):
 *         return self.hertz_amplitude(bc)*self.homogeneousradialderivative2(bc, i)
 *     def homogeneousradialsolution(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.homogeneousradialsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":406
 *     def homogeneousradialsolution(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_23homogeneousradialderivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_23homogeneousradialderivative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("homogeneousradialderivative (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("homogeneousradialderivative", 1, 2, 2, 1); __PYX_ERR(3, 406, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "homogeneousradialderivative") < 0)) __PYX_ERR(3, 406, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 406, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("homogeneousradialderivative", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 406, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.homogeneousradialderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 406, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_22homogeneousradialderivative(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_22homogeneousradialderivative(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("homogeneousradialderivative", 0);

  /* "cython/teukolsky_wrap.pyx":407
 *         return self.hertzcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialSecondDerivative(str_to_bc(bc), i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getHomogeneousRadialDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":406
 *     def homogeneousradialsolution(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialSolution(str_to_bc(bc), i)
 *     def homogeneousradialderivative(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.homogeneousradialderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":408
 *     def homogeneousradialderivative(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHomogeneousRadialSecondDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_25homogeneousradialderivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_25homogeneousradialderivative2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bc = 0;
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("homogeneousradialderivative2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bc,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("homogeneousradialderivative2", 1, 2, 2, 1); __PYX_ERR(3, 408, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "homogeneousradialderivative2") < 0)) __PYX_ERR(3, 408, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bc = ((PyObject*)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 408, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("homogeneousradialderivative2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 408, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.homogeneousradialderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bc), (&PyUnicode_Type), 1, "bc", 1))) __PYX_ERR(3, 408, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_24homogeneousradialderivative2(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), __pyx_v_bc, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_24homogeneousradialderivative2(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, PyObject *__pyx_v_bc, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("homogeneousradialderivative2", 0);

  /* "cython/teukolsky_wrap.pyx":409
 *         return self.hertzcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialSecondDerivative(str_to_bc(bc), i)             # <<<<<<<<<<<<<<
 *     def polarpoint(self, int i):
 *         return self.hertzcpp.getPolarPoints(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getHomogeneousRadialSecondDerivative(__pyx_f_11cybhpt_full_str_to_bc(__pyx_v_bc), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":408
 *     def homogeneousradialderivative(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialDerivative(str_to_bc(bc), i)
 *     def homogeneousradialderivative2(self, unicode bc, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getHomogeneousRadialSecondDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.homogeneousradialderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":410
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialSecondDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_27polarpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_27polarpoint(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("polarpoint (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 410, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.polarpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_26polarpoint(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_26polarpoint(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("polarpoint", 0);

  /* "cython/teukolsky_wrap.pyx":411
 *         return self.hertzcpp.getHomogeneousRadialSecondDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):
 *         return self.hertzcpp.getPolarPoints(i)             # <<<<<<<<<<<<<<
 *     def polarsolution(self, int i):
 *         return self.hertzcpp.getPolarSolution(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getPolarPoints(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":410
 *     def homogeneousradialderivative2(self, unicode bc, int i):
 *         return self.hertzcpp.getHomogeneousRadialSecondDerivative(str_to_bc(bc), i)
 *     def polarpoint(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.polarpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":412
 *     def polarpoint(self, int i):
 *         return self.hertzcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_29polarsolution(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_29polarsolution(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("polarsolution (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 412, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.polarsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_28polarsolution(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_28polarsolution(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("polarsolution", 0);

  /* "cython/teukolsky_wrap.pyx":413
 *         return self.hertzcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):
 *         return self.hertzcpp.getPolarSolution(i)             # <<<<<<<<<<<<<<
 *     def polarderivative(self, int i):
 *         return self.hertzcpp.getPolarDerivative(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getPolarSolution(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":412
 *     def polarpoint(self, int i):
 *         return self.hertzcpp.getPolarPoints(i)
 *     def polarsolution(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.polarsolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":414
 *     def polarsolution(self, int i):
 *         return self.hertzcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_31polarderivative(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_31polarderivative(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("polarderivative (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 414, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.polarderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_30polarderivative(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_30polarderivative(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("polarderivative", 0);

  /* "cython/teukolsky_wrap.pyx":415
 *         return self.hertzcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):
 *         return self.hertzcpp.getPolarDerivative(i)             # <<<<<<<<<<<<<<
 *     def polarderivative2(self, int i):
 *         return self.hertzcpp.getPolarSecondDerivative(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getPolarDerivative(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":414
 *     def polarsolution(self, int i):
 *         return self.hertzcpp.getPolarSolution(i)
 *     def polarderivative(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.polarderivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":416
 *     def polarderivative(self, int i):
 *         return self.hertzcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarSecondDerivative(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_33polarderivative2(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_33polarderivative2(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("polarderivative2 (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 416, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.HertzMode.polarderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_32polarderivative2(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_32polarderivative2(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("polarderivative2", 0);

  /* "cython/teukolsky_wrap.pyx":417
 *         return self.hertzcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):
 *         return self.hertzcpp.getPolarSecondDerivative(i)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hertzcpp->getPolarSecondDerivative(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":416
 *     def polarderivative(self, int i):
 *         return self.hertzcpp.getPolarDerivative(i)
 *     def polarderivative2(self, int i):             # <<<<<<<<<<<<<<
 *         return self.hertzcpp.getPolarSecondDerivative(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.polarderivative2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":420
 * 
 *     @property
 *     def radialpoints(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.radialpoint(i) for i in range(self.sampleR)])
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_12radialpoints_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_12radialpoints_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_12radialpoints___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_12radialpoints___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  int __pyx_8genexpr9__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":421
 *     @property
 *     def radialpoints(self):
 *         return np.array([self.radialpoint(i) for i in range(self.sampleR)])             # <<<<<<<<<<<<<<
 *     @property
 *     def radialsolutions(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_v_self->sampleR;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_8genexpr9__pyx_v_i = __pyx_t_6;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_radialpoint); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_8genexpr9__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) __PYX_ERR(3, 421, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  } /* exit inner scope */
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":420
 * 
 *     @property
 *     def radialpoints(self):             # <<<<<<<<<<<<<<
 *         return np.array([self.radialpoint(i) for i in range(self.sampleR)])
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialpoints.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":423
 *         return np.array([self.radialpoint(i) for i in range(self.sampleR)])
 *     @property
 *     def radialsolutions(self):             # <<<<<<<<<<<<<<
 *         return {
 *                 "In":np.array([self.hertzcpp.getRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_15radialsolutions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_15radialsolutions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_15radialsolutions___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_15radialsolutions___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  int __pyx_9genexpr10__pyx_v_i;
  int __pyx_9genexpr11__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":424
 *     @property
 *     def radialsolutions(self):
 *         return {             # <<<<<<<<<<<<<<
 *                 "In":np.array([self.hertzcpp.getRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 *                 "Up":np.array([self.hertzcpp.getRadialSolution(BoundaryCondition.Up, i) for i in range(self.sampleR)])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cython/teukolsky_wrap.pyx":425
 *     def radialsolutions(self):
 *         return {
 *                 "In":np.array([self.hertzcpp.getRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),             # <<<<<<<<<<<<<<
 *                 "Up":np.array([self.hertzcpp.getRadialSolution(BoundaryCondition.Up, i) for i in range(self.sampleR)])
 *         }
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_v_self->sampleR;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_9genexpr10__pyx_v_i = __pyx_t_7;
      __pyx_t_8 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getRadialSolution(In, __pyx_9genexpr10__pyx_v_i)); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(3, 425, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  } /* exit inner scope */
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_In, __pyx_t_2) < 0) __PYX_ERR(3, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":426
 *         return {
 *                 "In":np.array([self.hertzcpp.getRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 *                 "Up":np.array([self.hertzcpp.getRadialSolution(BoundaryCondition.Up, i) for i in range(self.sampleR)])             # <<<<<<<<<<<<<<
 *         }
 *     @property
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_v_self->sampleR;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_9genexpr11__pyx_v_i = __pyx_t_7;
      __pyx_t_8 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getRadialSolution(Up, __pyx_9genexpr11__pyx_v_i)); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 426, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(3, 426, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  } /* exit inner scope */
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_Up, __pyx_t_2) < 0) __PYX_ERR(3, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":423
 *         return np.array([self.radialpoint(i) for i in range(self.sampleR)])
 *     @property
 *     def radialsolutions(self):             # <<<<<<<<<<<<<<
 *         return {
 *                 "In":np.array([self.hertzcpp.getRadialSolution(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialsolutions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":429
 *         }
 *     @property
 *     def radialderivatives(self):             # <<<<<<<<<<<<<<
 *         return {
 *                 "In":np.array([self.hertzcpp.getRadialDerivative(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_17radialderivatives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_17radialderivatives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_17radialderivatives___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_17radialderivatives___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  int __pyx_9genexpr12__pyx_v_i;
  int __pyx_9genexpr13__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":430
 *     @property
 *     def radialderivatives(self):
 *         return {             # <<<<<<<<<<<<<<
 *                 "In":np.array([self.hertzcpp.getRadialDerivative(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 *                 "Up":np.array([self.hertzcpp.getRadialDerivative(BoundaryCondition.Up, i) for i in range(self.sampleR)])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cython/teukolsky_wrap.pyx":431
 *     def radialderivatives(self):
 *         return {
 *                 "In":np.array([self.hertzcpp.getRadialDerivative(BoundaryCondition.In, i) for i in range(self.sampleR)]),             # <<<<<<<<<<<<<<
 *                 "Up":np.array([self.hertzcpp.getRadialDerivative(BoundaryCondition.Up, i) for i in range(self.sampleR)])
 *         }
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_v_self->sampleR;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_9genexpr12__pyx_v_i = __pyx_t_7;
      __pyx_t_8 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getRadialDerivative(In, __pyx_9genexpr12__pyx_v_i)); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(3, 431, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  } /* exit inner scope */
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_In, __pyx_t_2) < 0) __PYX_ERR(3, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":432
 *         return {
 *                 "In":np.array([self.hertzcpp.getRadialDerivative(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 *                 "Up":np.array([self.hertzcpp.getRadialDerivative(BoundaryCondition.Up, i) for i in range(self.sampleR)])             # <<<<<<<<<<<<<<
 *         }
 *     @property
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_v_self->sampleR;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_9genexpr13__pyx_v_i = __pyx_t_7;
      __pyx_t_8 = __pyx_convert_complex_to_py_double(__pyx_v_self->hertzcpp->getRadialDerivative(Up, __pyx_9genexpr13__pyx_v_i)); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(3, 432, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  } /* exit inner scope */
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_Up, __pyx_t_2) < 0) __PYX_ERR(3, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":429
 *         }
 *     @property
 *     def radialderivatives(self):             # <<<<<<<<<<<<<<
 *         return {
 *                 "In":np.array([self.hertzcpp.getRadialDerivative(BoundaryCondition.In, i) for i in range(self.sampleR)]),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialderivatives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":435
 *         }
 *     @property
 *     def radialderivatives2(self):             # <<<<<<<<<<<<<<
 *         return {
 *                 "In":np.array([self.radialderivative2('In', i) for i in range(self.sampleR)]),
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_18radialderivatives2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_18radialderivatives2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_18radialderivatives2___get__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_18radialderivatives2___get__(struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  int __pyx_9genexpr14__pyx_v_i;
  int __pyx_9genexpr15__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/teukolsky_wrap.pyx":436
 *     @property
 *     def radialderivatives2(self):
 *         return {             # <<<<<<<<<<<<<<
 *                 "In":np.array([self.radialderivative2('In', i) for i in range(self.sampleR)]),
 *                 "Up":np.array([self.radialderivative2('Up', i) for i in range(self.sampleR)])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cython/teukolsky_wrap.pyx":437
 *     def radialderivatives2(self):
 *         return {
 *                 "In":np.array([self.radialderivative2('In', i) for i in range(self.sampleR)]),             # <<<<<<<<<<<<<<
 *                 "Up":np.array([self.radialderivative2('Up', i) for i in range(self.sampleR)])
 *         }
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_v_self->sampleR;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_9genexpr14__pyx_v_i = __pyx_t_7;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_radialderivative2); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 437, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_9genexpr14__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 437, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_n_u_In, __pyx_t_10};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 437, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_n_u_In, __pyx_t_10};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 437, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      {
        __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 437, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_INCREF(__pyx_n_u_In);
        __Pyx_GIVEREF(__pyx_n_u_In);
        PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_n_u_In);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 437, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(3, 437, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  } /* exit inner scope */
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_In, __pyx_t_2) < 0) __PYX_ERR(3, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":438
 *         return {
 *                 "In":np.array([self.radialderivative2('In', i) for i in range(self.sampleR)]),
 *                 "Up":np.array([self.radialderivative2('Up', i) for i in range(self.sampleR)])             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_v_self->sampleR;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_9genexpr15__pyx_v_i = __pyx_t_7;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_radialderivative2); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_9genexpr15__pyx_v_i); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_10 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_n_u_Up, __pyx_t_13};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 438, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_n_u_Up, __pyx_t_13};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 438, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 438, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_10) {
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
        }
        __Pyx_INCREF(__pyx_n_u_Up);
        __Pyx_GIVEREF(__pyx_n_u_Up);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_12, __pyx_n_u_Up);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_12, __pyx_t_13);
        __pyx_t_13 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 438, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(3, 438, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  } /* exit inner scope */
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_Up, __pyx_t_2) < 0) __PYX_ERR(3, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":435
 *         }
 *     @property
 *     def radialderivatives2(self):             # <<<<<<<<<<<<<<
 *         return {
 *                 "In":np.array([self.radialderivative2('In', i) for i in range(self.sampleR)]),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.radialderivatives2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_34__reduce_cython__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_9HertzMode_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_9HertzMode_36__setstate_cython__(((struct __pyx_obj_11cybhpt_full_HertzMode *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_9HertzMode_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.HertzMode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":441
 *         }
 * 
 * def test_hertz_mode_cython(int j, int m, int k, int n, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *     test_hertz_mode(j, m, k, n, dereference(geo.geocpp))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_25test_hertz_mode_cython(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_25test_hertz_mode_cython = {"test_hertz_mode_cython", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_25test_hertz_mode_cython, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_25test_hertz_mode_cython(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_j;
  int __pyx_v_m;
  int __pyx_v_k;
  int __pyx_v_n;
  struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_hertz_mode_cython (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_j,&__pyx_n_s_m,&__pyx_n_s_k,&__pyx_n_s_n,&__pyx_n_s_geo,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_hertz_mode_cython", 1, 5, 5, 1); __PYX_ERR(3, 441, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_hertz_mode_cython", 1, 5, 5, 2); __PYX_ERR(3, 441, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_hertz_mode_cython", 1, 5, 5, 3); __PYX_ERR(3, 441, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_hertz_mode_cython", 1, 5, 5, 4); __PYX_ERR(3, 441, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "test_hertz_mode_cython") < 0)) __PYX_ERR(3, 441, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_j = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 441, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 441, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 441, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 441, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("test_hertz_mode_cython", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 441, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.test_hertz_mode_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_11cybhpt_full_KerrGeodesic, 1, "geo", 0))) __PYX_ERR(3, 441, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_24test_hertz_mode_cython(__pyx_self, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_n, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_24test_hertz_mode_cython(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, int __pyx_v_n, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_hertz_mode_cython", 0);

  /* "cython/teukolsky_wrap.pyx":442
 * 
 * def test_hertz_mode_cython(int j, int m, int k, int n, KerrGeodesic geo):
 *     test_hertz_mode(j, m, k, n, dereference(geo.geocpp))             # <<<<<<<<<<<<<<
 * 
 * cdef dict basis_dict = {
 */
  test_hertz_mode(__pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_n, (*__pyx_v_geo->geocpp));

  /* "cython/teukolsky_wrap.pyx":441
 *         }
 * 
 * def test_hertz_mode_cython(int j, int m, int k, int n, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *     test_hertz_mode(j, m, k, n, dereference(geo.geocpp))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":449
 * }
 * 
 * def teuk_to_hertz_ORG(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_27teuk_to_hertz_ORG(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_27teuk_to_hertz_ORG = {"teuk_to_hertz_ORG", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_27teuk_to_hertz_ORG, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_27teuk_to_hertz_ORG(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::complex<double>  __pyx_v_ZIn;
  std::complex<double>  __pyx_v_ZUp;
  int __pyx_v_j;
  int __pyx_v_m;
  int __pyx_v_k;
  double __pyx_v_a;
  double __pyx_v_omega;
  double __pyx_v_lambdaCH;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("teuk_to_hertz_ORG (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ZIn,&__pyx_n_s_ZUp,&__pyx_n_s_j,&__pyx_n_s_m,&__pyx_n_s_k,&__pyx_n_s_a,&__pyx_n_s_omega,&__pyx_n_s_lambdaCH,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ZIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ZUp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ORG", 1, 8, 8, 1); __PYX_ERR(3, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ORG", 1, 8, 8, 2); __PYX_ERR(3, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ORG", 1, 8, 8, 3); __PYX_ERR(3, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ORG", 1, 8, 8, 4); __PYX_ERR(3, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ORG", 1, 8, 8, 5); __PYX_ERR(3, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ORG", 1, 8, 8, 6); __PYX_ERR(3, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambdaCH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ORG", 1, 8, 8, 7); __PYX_ERR(3, 449, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "teuk_to_hertz_ORG") < 0)) __PYX_ERR(3, 449, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_ZIn = __pyx_convert_complex_from_py_double(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 449, __pyx_L3_error)
    __pyx_v_ZUp = __pyx_convert_complex_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 449, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 449, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 449, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 449, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 449, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 449, __pyx_L3_error)
    __pyx_v_lambdaCH = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_lambdaCH == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 449, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ORG", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 449, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.teuk_to_hertz_ORG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_26teuk_to_hertz_ORG(__pyx_self, __pyx_v_ZIn, __pyx_v_ZUp, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_26teuk_to_hertz_ORG(CYTHON_UNUSED PyObject *__pyx_self, std::complex<double>  __pyx_v_ZIn, std::complex<double>  __pyx_v_ZUp, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH) {
  std::complex<double>  __pyx_v_PsiIn;
  std::complex<double>  __pyx_v_PsiUp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("teuk_to_hertz_ORG", 0);

  /* "cython/teukolsky_wrap.pyx":452
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 *     teukolsky_to_hertz_ORG(PsiIn, PsiUp, ZIn, ZUp, j, m, k, a, omega, lambdaCH)             # <<<<<<<<<<<<<<
 *     return (PsiIn, PsiUp)
 * 
 */
  teukolsky_to_hertz_ORG(__pyx_v_PsiIn, __pyx_v_PsiUp, __pyx_v_ZIn, __pyx_v_ZUp, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* "cython/teukolsky_wrap.pyx":453
 *     cdef cpp_complex[double] PsiUp
 *     teukolsky_to_hertz_ORG(PsiIn, PsiUp, ZIn, ZUp, j, m, k, a, omega, lambdaCH)
 *     return (PsiIn, PsiUp)             # <<<<<<<<<<<<<<
 * 
 * def teuk_to_hertz_IRG(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_PsiIn); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_complex_to_py_double(__pyx_v_PsiUp); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":449
 * }
 * 
 * def teuk_to_hertz_ORG(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cybhpt_full.teuk_to_hertz_ORG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":455
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_IRG(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_29teuk_to_hertz_IRG(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_29teuk_to_hertz_IRG = {"teuk_to_hertz_IRG", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_29teuk_to_hertz_IRG, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_29teuk_to_hertz_IRG(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::complex<double>  __pyx_v_ZIn;
  std::complex<double>  __pyx_v_ZUp;
  int __pyx_v_j;
  int __pyx_v_m;
  int __pyx_v_k;
  double __pyx_v_a;
  double __pyx_v_omega;
  double __pyx_v_lambdaCH;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("teuk_to_hertz_IRG (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ZIn,&__pyx_n_s_ZUp,&__pyx_n_s_j,&__pyx_n_s_m,&__pyx_n_s_k,&__pyx_n_s_a,&__pyx_n_s_omega,&__pyx_n_s_lambdaCH,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ZIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ZUp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_IRG", 1, 8, 8, 1); __PYX_ERR(3, 455, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_IRG", 1, 8, 8, 2); __PYX_ERR(3, 455, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_IRG", 1, 8, 8, 3); __PYX_ERR(3, 455, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_IRG", 1, 8, 8, 4); __PYX_ERR(3, 455, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_IRG", 1, 8, 8, 5); __PYX_ERR(3, 455, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_IRG", 1, 8, 8, 6); __PYX_ERR(3, 455, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambdaCH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_IRG", 1, 8, 8, 7); __PYX_ERR(3, 455, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "teuk_to_hertz_IRG") < 0)) __PYX_ERR(3, 455, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_ZIn = __pyx_convert_complex_from_py_double(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 455, __pyx_L3_error)
    __pyx_v_ZUp = __pyx_convert_complex_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 455, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 455, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 455, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 455, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 455, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 455, __pyx_L3_error)
    __pyx_v_lambdaCH = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_lambdaCH == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 455, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_IRG", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 455, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.teuk_to_hertz_IRG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_28teuk_to_hertz_IRG(__pyx_self, __pyx_v_ZIn, __pyx_v_ZUp, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_28teuk_to_hertz_IRG(CYTHON_UNUSED PyObject *__pyx_self, std::complex<double>  __pyx_v_ZIn, std::complex<double>  __pyx_v_ZUp, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH) {
  std::complex<double>  __pyx_v_PsiIn;
  std::complex<double>  __pyx_v_PsiUp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("teuk_to_hertz_IRG", 0);

  /* "cython/teukolsky_wrap.pyx":458
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 *     teukolsky_to_hertz_IRG(PsiIn, PsiUp, ZIn, ZUp, j, m, k, a, omega, lambdaCH)             # <<<<<<<<<<<<<<
 *     return (PsiIn, PsiUp)
 * 
 */
  teukolsky_to_hertz_IRG(__pyx_v_PsiIn, __pyx_v_PsiUp, __pyx_v_ZIn, __pyx_v_ZUp, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* "cython/teukolsky_wrap.pyx":459
 *     cdef cpp_complex[double] PsiUp
 *     teukolsky_to_hertz_IRG(PsiIn, PsiUp, ZIn, ZUp, j, m, k, a, omega, lambdaCH)
 *     return (PsiIn, PsiUp)             # <<<<<<<<<<<<<<
 * 
 * def teuk_to_hertz_SAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_PsiIn); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_complex_to_py_double(__pyx_v_PsiUp); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":455
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_IRG(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cybhpt_full.teuk_to_hertz_IRG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":461
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_SAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_31teuk_to_hertz_SAAB(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_31teuk_to_hertz_SAAB = {"teuk_to_hertz_SAAB", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_31teuk_to_hertz_SAAB, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_31teuk_to_hertz_SAAB(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::complex<double>  __pyx_v_ZIn;
  std::complex<double>  __pyx_v_ZUp;
  int __pyx_v_j;
  int __pyx_v_m;
  int __pyx_v_k;
  double __pyx_v_a;
  double __pyx_v_omega;
  double __pyx_v_lambdaCH;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("teuk_to_hertz_SAAB (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ZIn,&__pyx_n_s_ZUp,&__pyx_n_s_j,&__pyx_n_s_m,&__pyx_n_s_k,&__pyx_n_s_a,&__pyx_n_s_omega,&__pyx_n_s_lambdaCH,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ZIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ZUp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_SAAB", 1, 8, 8, 1); __PYX_ERR(3, 461, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_SAAB", 1, 8, 8, 2); __PYX_ERR(3, 461, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_SAAB", 1, 8, 8, 3); __PYX_ERR(3, 461, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_SAAB", 1, 8, 8, 4); __PYX_ERR(3, 461, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_SAAB", 1, 8, 8, 5); __PYX_ERR(3, 461, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_SAAB", 1, 8, 8, 6); __PYX_ERR(3, 461, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambdaCH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_SAAB", 1, 8, 8, 7); __PYX_ERR(3, 461, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "teuk_to_hertz_SAAB") < 0)) __PYX_ERR(3, 461, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_ZIn = __pyx_convert_complex_from_py_double(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 461, __pyx_L3_error)
    __pyx_v_ZUp = __pyx_convert_complex_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 461, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 461, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 461, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 461, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 461, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 461, __pyx_L3_error)
    __pyx_v_lambdaCH = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_lambdaCH == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 461, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_SAAB", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 461, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.teuk_to_hertz_SAAB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_30teuk_to_hertz_SAAB(__pyx_self, __pyx_v_ZIn, __pyx_v_ZUp, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_30teuk_to_hertz_SAAB(CYTHON_UNUSED PyObject *__pyx_self, std::complex<double>  __pyx_v_ZIn, std::complex<double>  __pyx_v_ZUp, int __pyx_v_j, int __pyx_v_m, int __pyx_v_k, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH) {
  std::complex<double>  __pyx_v_PsiIn;
  std::complex<double>  __pyx_v_PsiUp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("teuk_to_hertz_SAAB", 0);

  /* "cython/teukolsky_wrap.pyx":464
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 *     teukolsky_to_hertz_SAAB(PsiIn, PsiUp, ZIn, ZUp, j, m, k, a, omega, lambdaCH)             # <<<<<<<<<<<<<<
 *     return (PsiIn, PsiUp)
 * 
 */
  teukolsky_to_hertz_SAAB(__pyx_v_PsiIn, __pyx_v_PsiUp, __pyx_v_ZIn, __pyx_v_ZUp, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* "cython/teukolsky_wrap.pyx":465
 *     cdef cpp_complex[double] PsiUp
 *     teukolsky_to_hertz_SAAB(PsiIn, PsiUp, ZIn, ZUp, j, m, k, a, omega, lambdaCH)
 *     return (PsiIn, PsiUp)             # <<<<<<<<<<<<<<
 * 
 * def teuk_to_hertz_ASAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_PsiIn); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_complex_to_py_double(__pyx_v_PsiUp); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":461
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_SAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cybhpt_full.teuk_to_hertz_SAAB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":467
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_ASAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_33teuk_to_hertz_ASAAB(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_33teuk_to_hertz_ASAAB = {"teuk_to_hertz_ASAAB", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_33teuk_to_hertz_ASAAB, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_33teuk_to_hertz_ASAAB(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::complex<double>  __pyx_v_ZIn;
  std::complex<double>  __pyx_v_ZUp;
  int __pyx_v_j;
  int __pyx_v_m;
  CYTHON_UNUSED int __pyx_v_k;
  double __pyx_v_a;
  double __pyx_v_omega;
  double __pyx_v_lambdaCH;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("teuk_to_hertz_ASAAB (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ZIn,&__pyx_n_s_ZUp,&__pyx_n_s_j,&__pyx_n_s_m,&__pyx_n_s_k,&__pyx_n_s_a,&__pyx_n_s_omega,&__pyx_n_s_lambdaCH,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ZIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ZUp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ASAAB", 1, 8, 8, 1); __PYX_ERR(3, 467, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ASAAB", 1, 8, 8, 2); __PYX_ERR(3, 467, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ASAAB", 1, 8, 8, 3); __PYX_ERR(3, 467, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ASAAB", 1, 8, 8, 4); __PYX_ERR(3, 467, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ASAAB", 1, 8, 8, 5); __PYX_ERR(3, 467, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ASAAB", 1, 8, 8, 6); __PYX_ERR(3, 467, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambdaCH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ASAAB", 1, 8, 8, 7); __PYX_ERR(3, 467, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "teuk_to_hertz_ASAAB") < 0)) __PYX_ERR(3, 467, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_ZIn = __pyx_convert_complex_from_py_double(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 467, __pyx_L3_error)
    __pyx_v_ZUp = __pyx_convert_complex_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 467, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 467, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 467, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 467, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 467, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 467, __pyx_L3_error)
    __pyx_v_lambdaCH = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_lambdaCH == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 467, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("teuk_to_hertz_ASAAB", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 467, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.teuk_to_hertz_ASAAB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_32teuk_to_hertz_ASAAB(__pyx_self, __pyx_v_ZIn, __pyx_v_ZUp, __pyx_v_j, __pyx_v_m, __pyx_v_k, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_32teuk_to_hertz_ASAAB(CYTHON_UNUSED PyObject *__pyx_self, std::complex<double>  __pyx_v_ZIn, std::complex<double>  __pyx_v_ZUp, int __pyx_v_j, int __pyx_v_m, CYTHON_UNUSED int __pyx_v_k, double __pyx_v_a, double __pyx_v_omega, double __pyx_v_lambdaCH) {
  std::complex<double>  __pyx_v_PsiIn;
  std::complex<double>  __pyx_v_PsiUp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("teuk_to_hertz_ASAAB", 0);

  /* "cython/teukolsky_wrap.pyx":470
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 *     teukolsky_to_hertz_ASAAB(PsiIn, PsiUp, ZIn, ZUp, j, m, a, omega, lambdaCH)             # <<<<<<<<<<<<<<
 *     return (PsiIn, PsiUp)
 * 
 */
  teukolsky_to_hertz_ASAAB(__pyx_v_PsiIn, __pyx_v_PsiUp, __pyx_v_ZIn, __pyx_v_ZUp, __pyx_v_j, __pyx_v_m, __pyx_v_a, __pyx_v_omega, __pyx_v_lambdaCH);

  /* "cython/teukolsky_wrap.pyx":471
 *     cdef cpp_complex[double] PsiUp
 *     teukolsky_to_hertz_ASAAB(PsiIn, PsiUp, ZIn, ZUp, j, m, a, omega, lambdaCH)
 *     return (PsiIn, PsiUp)             # <<<<<<<<<<<<<<
 * 
 * cdef dict metric_component_gauge_dict = {
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_PsiIn); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_complex_to_py_double(__pyx_v_PsiUp); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":467
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_ASAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cybhpt_full.teuk_to_hertz_ASAAB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":530
 * }
 * 
 * def metric_11(double a, double r, double z):             # <<<<<<<<<<<<<<
 *     cdef vector[double] rvec = vector[double](1)
 *     cdef vector[double] zvec = vector[double](1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_35metric_11(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_35metric_11 = {"metric_11", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_35metric_11, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_35metric_11(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_r;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("metric_11 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_r,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_11", 1, 3, 3, 1); __PYX_ERR(3, 530, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_11", 1, 3, 3, 2); __PYX_ERR(3, 530, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "metric_11") < 0)) __PYX_ERR(3, 530, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 530, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 530, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 530, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("metric_11", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 530, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.metric_11", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_34metric_11(__pyx_self, __pyx_v_a, __pyx_v_r, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_34metric_11(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z) {
  std::vector<double>  __pyx_v_rvec;
  std::vector<double>  __pyx_v_zvec;
  std::vector<std::vector<std::vector<std::complex<double> > > >  __pyx_v_coeffs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("metric_11", 0);

  /* "cython/teukolsky_wrap.pyx":531
 * 
 * def metric_11(double a, double r, double z):
 *     cdef vector[double] rvec = vector[double](1)             # <<<<<<<<<<<<<<
 *     cdef vector[double] zvec = vector[double](1)
 *     rvec[0] = r
 */
  try {
    __pyx_t_1 = std::vector<double> (1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 531, __pyx_L1_error)
  }
  __pyx_v_rvec = __pyx_t_1;

  /* "cython/teukolsky_wrap.pyx":532
 * def metric_11(double a, double r, double z):
 *     cdef vector[double] rvec = vector[double](1)
 *     cdef vector[double] zvec = vector[double](1)             # <<<<<<<<<<<<<<
 *     rvec[0] = r
 *     zvec[0] = z
 */
  try {
    __pyx_t_1 = std::vector<double> (1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 532, __pyx_L1_error)
  }
  __pyx_v_zvec = __pyx_t_1;

  /* "cython/teukolsky_wrap.pyx":533
 *     cdef vector[double] rvec = vector[double](1)
 *     cdef vector[double] zvec = vector[double](1)
 *     rvec[0] = r             # <<<<<<<<<<<<<<
 *     zvec[0] = z
 *     cdef cpp_complex[double] temp
 */
  (__pyx_v_rvec[0]) = __pyx_v_r;

  /* "cython/teukolsky_wrap.pyx":534
 *     cdef vector[double] zvec = vector[double](1)
 *     rvec[0] = r
 *     zvec[0] = z             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] temp
 * 
 */
  (__pyx_v_zvec[0]) = __pyx_v_z;

  /* "cython/teukolsky_wrap.pyx":537
 *     cdef cpp_complex[double] temp
 * 
 *     cdef vector[vector[vector[cpp_complex[double]]]] coeffs = metric_coefficients_ORG_11(a, rvec, zvec)             # <<<<<<<<<<<<<<
 * 
 *     return np.array(coeffs).squeeze()
 */
  __pyx_v_coeffs = metric_coefficients_ORG_11(__pyx_v_a, __pyx_v_rvec, __pyx_v_zvec);

  /* "cython/teukolsky_wrap.pyx":539
 *     cdef vector[vector[vector[cpp_complex[double]]]] coeffs = metric_coefficients_ORG_11(a, rvec, zvec)
 * 
 *     return np.array(coeffs).squeeze()             # <<<<<<<<<<<<<<
 * 
 * def metric_coefficient_S4(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e____3e___(__pyx_v_coeffs); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_squeeze); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":530
 * }
 * 
 * def metric_11(double a, double r, double z):             # <<<<<<<<<<<<<<
 *     cdef vector[double] rvec = vector[double](1)
 *     cdef vector[double] zvec = vector[double](1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cybhpt_full.metric_11", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":541
 *     return np.array(coeffs).squeeze()
 * 
 * def metric_coefficient_S4(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_ORG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_37metric_coefficient_S4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_37metric_coefficient_S4 = {"metric_coefficient_S4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_37metric_coefficient_S4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_37metric_coefficient_S4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_alpha;
  int __pyx_v_beta;
  int __pyx_v_nt;
  int __pyx_v_nr;
  int __pyx_v_nz;
  int __pyx_v_np;
  double __pyx_v_a;
  double __pyx_v_r;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("metric_coefficient_S4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alpha,&__pyx_n_s_beta,&__pyx_n_s_nt,&__pyx_n_s_nr,&__pyx_n_s_nz,&__pyx_n_s_np,&__pyx_n_s_a,&__pyx_n_s_r,&__pyx_n_s_z,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S4", 1, 9, 9, 1); __PYX_ERR(3, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S4", 1, 9, 9, 2); __PYX_ERR(3, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S4", 1, 9, 9, 3); __PYX_ERR(3, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S4", 1, 9, 9, 4); __PYX_ERR(3, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S4", 1, 9, 9, 5); __PYX_ERR(3, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S4", 1, 9, 9, 6); __PYX_ERR(3, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S4", 1, 9, 9, 7); __PYX_ERR(3, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S4", 1, 9, 9, 8); __PYX_ERR(3, 541, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "metric_coefficient_S4") < 0)) __PYX_ERR(3, 541, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_alpha = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_alpha == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 541, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_beta == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 541, __pyx_L3_error)
    __pyx_v_nt = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nt == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 541, __pyx_L3_error)
    __pyx_v_nr = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nr == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 541, __pyx_L3_error)
    __pyx_v_nz = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_nz == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 541, __pyx_L3_error)
    __pyx_v_np = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_np == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 541, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 541, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 541, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 541, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("metric_coefficient_S4", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 541, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.metric_coefficient_S4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_36metric_coefficient_S4(__pyx_self, __pyx_v_alpha, __pyx_v_beta, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_np, __pyx_v_a, __pyx_v_r, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_36metric_coefficient_S4(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_alpha, int __pyx_v_beta, int __pyx_v_nt, int __pyx_v_nr, int __pyx_v_nz, int __pyx_v_np, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("metric_coefficient_S4", 0);

  /* "cython/teukolsky_wrap.pyx":542
 * 
 * def metric_coefficient_S4(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):
 *     return metric_coefficient_ORG(alpha, beta, nt, nr, nz, np, a, r, z)             # <<<<<<<<<<<<<<
 * 
 * def metric_coefficient_S0(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(metric_coefficient_ORG(__pyx_v_alpha, __pyx_v_beta, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_np, __pyx_v_a, __pyx_v_r, __pyx_v_z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":541
 *     return np.array(coeffs).squeeze()
 * 
 * def metric_coefficient_S4(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_ORG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.metric_coefficient_S4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":544
 *     return metric_coefficient_ORG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 * def metric_coefficient_S0(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_IRG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_39metric_coefficient_S0(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_39metric_coefficient_S0 = {"metric_coefficient_S0", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_39metric_coefficient_S0, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_39metric_coefficient_S0(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_alpha;
  int __pyx_v_beta;
  int __pyx_v_nt;
  int __pyx_v_nr;
  int __pyx_v_nz;
  int __pyx_v_np;
  double __pyx_v_a;
  double __pyx_v_r;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("metric_coefficient_S0 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alpha,&__pyx_n_s_beta,&__pyx_n_s_nt,&__pyx_n_s_nr,&__pyx_n_s_nz,&__pyx_n_s_np,&__pyx_n_s_a,&__pyx_n_s_r,&__pyx_n_s_z,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S0", 1, 9, 9, 1); __PYX_ERR(3, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S0", 1, 9, 9, 2); __PYX_ERR(3, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S0", 1, 9, 9, 3); __PYX_ERR(3, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S0", 1, 9, 9, 4); __PYX_ERR(3, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S0", 1, 9, 9, 5); __PYX_ERR(3, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S0", 1, 9, 9, 6); __PYX_ERR(3, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S0", 1, 9, 9, 7); __PYX_ERR(3, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficient_S0", 1, 9, 9, 8); __PYX_ERR(3, 544, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "metric_coefficient_S0") < 0)) __PYX_ERR(3, 544, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_alpha = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_alpha == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 544, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_beta == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 544, __pyx_L3_error)
    __pyx_v_nt = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nt == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 544, __pyx_L3_error)
    __pyx_v_nr = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nr == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 544, __pyx_L3_error)
    __pyx_v_nz = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_nz == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 544, __pyx_L3_error)
    __pyx_v_np = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_np == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 544, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 544, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 544, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 544, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("metric_coefficient_S0", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 544, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.metric_coefficient_S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_38metric_coefficient_S0(__pyx_self, __pyx_v_alpha, __pyx_v_beta, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_np, __pyx_v_a, __pyx_v_r, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_38metric_coefficient_S0(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_alpha, int __pyx_v_beta, int __pyx_v_nt, int __pyx_v_nr, int __pyx_v_nz, int __pyx_v_np, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("metric_coefficient_S0", 0);

  /* "cython/teukolsky_wrap.pyx":545
 * 
 * def metric_coefficient_S0(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):
 *     return metric_coefficient_IRG(alpha, beta, nt, nr, nz, np, a, r, z)             # <<<<<<<<<<<<<<
 * 
 * cdef class MetricModeGenerator:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(metric_coefficient_IRG(__pyx_v_alpha, __pyx_v_beta, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_np, __pyx_v_a, __pyx_v_r, __pyx_v_z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/teukolsky_wrap.pyx":544
 *     return metric_coefficient_ORG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 * def metric_coefficient_S0(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_IRG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.metric_coefficient_S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":552
 *     cdef unicode basis
 * 
 *     def __init__(self, unicode gauge, unicode basis="tetrad"):             # <<<<<<<<<<<<<<
 *         self.gauge_str = gauge
 *         self.gauge_cpp = str_to_gauge(gauge)
 */

/* Python wrapper */
static int __pyx_pw_11cybhpt_full_19MetricModeGenerator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11cybhpt_full_19MetricModeGenerator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gauge = 0;
  PyObject *__pyx_v_basis = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gauge,&__pyx_n_s_basis,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_tetrad);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gauge)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_basis);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(3, 552, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gauge = ((PyObject*)values[0]);
    __pyx_v_basis = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 552, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.MetricModeGenerator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gauge), (&PyUnicode_Type), 1, "gauge", 1))) __PYX_ERR(3, 552, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basis), (&PyUnicode_Type), 1, "basis", 1))) __PYX_ERR(3, 552, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_19MetricModeGenerator___init__(((struct __pyx_obj_11cybhpt_full_MetricModeGenerator *)__pyx_v_self), __pyx_v_gauge, __pyx_v_basis);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11cybhpt_full_19MetricModeGenerator___init__(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self, PyObject *__pyx_v_gauge, PyObject *__pyx_v_basis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  enum Gauge __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cython/teukolsky_wrap.pyx":553
 * 
 *     def __init__(self, unicode gauge, unicode basis="tetrad"):
 *         self.gauge_str = gauge             # <<<<<<<<<<<<<<
 *         self.gauge_cpp = str_to_gauge(gauge)
 *         if basis in basis_dict.keys():
 */
  __Pyx_INCREF(__pyx_v_gauge);
  __Pyx_GIVEREF(__pyx_v_gauge);
  __Pyx_GOTREF(__pyx_v_self->gauge_str);
  __Pyx_DECREF(__pyx_v_self->gauge_str);
  __pyx_v_self->gauge_str = __pyx_v_gauge;

  /* "cython/teukolsky_wrap.pyx":554
 *     def __init__(self, unicode gauge, unicode basis="tetrad"):
 *         self.gauge_str = gauge
 *         self.gauge_cpp = str_to_gauge(gauge)             # <<<<<<<<<<<<<<
 *         if basis in basis_dict.keys():
 *             self.basis = basis
 */
  __pyx_t_1 = __pyx_f_11cybhpt_full_str_to_gauge(__pyx_v_gauge); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 554, __pyx_L1_error)
  __pyx_v_self->gauge_cpp = __pyx_t_1;

  /* "cython/teukolsky_wrap.pyx":555
 *         self.gauge_str = gauge
 *         self.gauge_cpp = str_to_gauge(gauge)
 *         if basis in basis_dict.keys():             # <<<<<<<<<<<<<<
 *             self.basis = basis
 *         else:
 */
  if (unlikely(__pyx_v_11cybhpt_full_basis_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(3, 555, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Keys(__pyx_v_11cybhpt_full_basis_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_basis, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(3, 555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (likely(__pyx_t_4)) {

    /* "cython/teukolsky_wrap.pyx":556
 *         self.gauge_cpp = str_to_gauge(gauge)
 *         if basis in basis_dict.keys():
 *             self.basis = basis             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('{} is not a valid basis. Must be tetrad or coordinate.'.format(basis))
 */
    __Pyx_INCREF(__pyx_v_basis);
    __Pyx_GIVEREF(__pyx_v_basis);
    __Pyx_GOTREF(__pyx_v_self->basis);
    __Pyx_DECREF(__pyx_v_self->basis);
    __pyx_v_self->basis = __pyx_v_basis;

    /* "cython/teukolsky_wrap.pyx":555
 *         self.gauge_str = gauge
 *         self.gauge_cpp = str_to_gauge(gauge)
 *         if basis in basis_dict.keys():             # <<<<<<<<<<<<<<
 *             self.basis = basis
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cython/teukolsky_wrap.pyx":558
 *             self.basis = basis
 *         else:
 *             raise TypeError('{} is not a valid basis. Must be tetrad or coordinate.'.format(basis))             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, HertzMode hertz, int ai, int bi):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_is_not_a_valid_basis_Must_be_te, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_basis) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_basis);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 558, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cython/teukolsky_wrap.pyx":552
 *     cdef unicode basis
 * 
 *     def __init__(self, unicode gauge, unicode basis="tetrad"):             # <<<<<<<<<<<<<<
 *         self.gauge_str = gauge
 *         self.gauge_cpp = str_to_gauge(gauge)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cybhpt_full.MetricModeGenerator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":560
 *             raise TypeError('{} is not a valid basis. Must be tetrad or coordinate.'.format(basis))
 * 
 *     def __call__(self, HertzMode hertz, int ai, int bi):             # <<<<<<<<<<<<<<
 *         if self.basis == "tetrad":
 *             return self.tetradcomponent(hertz, ai, bi)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_19MetricModeGenerator_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_19MetricModeGenerator_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_hertz = 0;
  int __pyx_v_ai;
  int __pyx_v_bi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hertz,&__pyx_n_s_ai,&__pyx_n_s_bi,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hertz)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ai)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 3, 3, 1); __PYX_ERR(3, 560, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 3, 3, 2); __PYX_ERR(3, 560, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(3, 560, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_hertz = ((struct __pyx_obj_11cybhpt_full_HertzMode *)values[0]);
    __pyx_v_ai = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_ai == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 560, __pyx_L3_error)
    __pyx_v_bi = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_bi == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 560, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 560, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.MetricModeGenerator.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hertz), __pyx_ptype_11cybhpt_full_HertzMode, 1, "hertz", 0))) __PYX_ERR(3, 560, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_19MetricModeGenerator_2__call__(((struct __pyx_obj_11cybhpt_full_MetricModeGenerator *)__pyx_v_self), __pyx_v_hertz, __pyx_v_ai, __pyx_v_bi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_19MetricModeGenerator_2__call__(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self, struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_hertz, int __pyx_v_ai, int __pyx_v_bi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "cython/teukolsky_wrap.pyx":561
 * 
 *     def __call__(self, HertzMode hertz, int ai, int bi):
 *         if self.basis == "tetrad":             # <<<<<<<<<<<<<<
 *             return self.tetradcomponent(hertz, ai, bi)
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->basis, __pyx_n_u_tetrad, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 561, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cython/teukolsky_wrap.pyx":562
 *     def __call__(self, HertzMode hertz, int ai, int bi):
 *         if self.basis == "tetrad":
 *             return self.tetradcomponent(hertz, ai, bi)             # <<<<<<<<<<<<<<
 *         else:
 *             return self.tetradcomponent(hertz, ai, bi)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tetradcomponent); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_ai); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_bi); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, ((PyObject *)__pyx_v_hertz), __pyx_t_5, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 562, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, ((PyObject *)__pyx_v_hertz), __pyx_t_5, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 562, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_hertz));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_hertz));
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_hertz));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cython/teukolsky_wrap.pyx":561
 * 
 *     def __call__(self, HertzMode hertz, int ai, int bi):
 *         if self.basis == "tetrad":             # <<<<<<<<<<<<<<
 *             return self.tetradcomponent(hertz, ai, bi)
 *         else:
 */
  }

  /* "cython/teukolsky_wrap.pyx":564
 *             return self.tetradcomponent(hertz, ai, bi)
 *         else:
 *             return self.tetradcomponent(hertz, ai, bi)             # <<<<<<<<<<<<<<
 * 
 *     def tetradcomponent(self, HertzMode hertz, int ai, int bi):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tetradcomponent); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_ai); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_bi); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_hertz), __pyx_t_9, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 564, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_hertz), __pyx_t_9, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 564, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_hertz));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_hertz));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, ((PyObject *)__pyx_v_hertz));
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_8, __pyx_t_6);
      __pyx_t_9 = 0;
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "cython/teukolsky_wrap.pyx":560
 *             raise TypeError('{} is not a valid basis. Must be tetrad or coordinate.'.format(basis))
 * 
 *     def __call__(self, HertzMode hertz, int ai, int bi):             # <<<<<<<<<<<<<<
 *         if self.basis == "tetrad":
 *             return self.tetradcomponent(hertz, ai, bi)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cybhpt_full.MetricModeGenerator.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/teukolsky_wrap.pyx":566
 *             return self.tetradcomponent(hertz, ai, bi)
 * 
 *     def tetradcomponent(self, HertzMode hertz, int ai, int bi):             # <<<<<<<<<<<<<<
 *         if hertz.gauge is not self.gauge_str:
 *             raise TypeError("Hertz potential in {} gauge. Must be in {} gauge".format(hertz.gauge, self.gauge_str))
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_19MetricModeGenerator_5tetradcomponent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_19MetricModeGenerator_5tetradcomponent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_hertz = 0;
  int __pyx_v_ai;
  int __pyx_v_bi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tetradcomponent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hertz,&__pyx_n_s_ai,&__pyx_n_s_bi,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hertz)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ai)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("tetradcomponent", 1, 3, 3, 1); __PYX_ERR(3, 566, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("tetradcomponent", 1, 3, 3, 2); __PYX_ERR(3, 566, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tetradcomponent") < 0)) __PYX_ERR(3, 566, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_hertz = ((struct __pyx_obj_11cybhpt_full_HertzMode *)values[0]);
    __pyx_v_ai = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_ai == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 566, __pyx_L3_error)
    __pyx_v_bi = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_bi == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 566, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tetradcomponent", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 566, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.MetricModeGenerator.tetradcomponent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hertz), __pyx_ptype_11cybhpt_full_HertzMode, 1, "hertz", 0))) __PYX_ERR(3, 566, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_19MetricModeGenerator_4tetradcomponent(((struct __pyx_obj_11cybhpt_full_MetricModeGenerator *)__pyx_v_self), __pyx_v_hertz, __pyx_v_ai, __pyx_v_bi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_19MetricModeGenerator_4tetradcomponent(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self, struct __pyx_obj_11cybhpt_full_HertzMode *__pyx_v_hertz, int __pyx_v_ai, int __pyx_v_bi) {
  std::complex<double>  __pyx_v_habIn;
  std::complex<double>  __pyx_v_habUp;
  std::complex<double>  __pyx_v_habbase;
  std::complex<double>  __pyx_v_dPsiIn;
  std::complex<double>  __pyx_v_dPsiUp;
  std::complex<double>  __pyx_v_dS;
  int __pyx_v_atemp;
  double __pyx_v_a;
  double __pyx_v_r;
  double __pyx_v_z;
  std::complex<double>  __pyx_v_im;
  std::complex<double>  __pyx_v_iomega;
  PyObject *__pyx_v_nt = NULL;
  PyObject *__pyx_v_nr = NULL;
  PyObject *__pyx_v_nz = NULL;
  PyObject *__pyx_v_nph = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  std::complex<double>  __pyx_t_9;
  double __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  long __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tetradcomponent", 0);

  /* "cython/teukolsky_wrap.pyx":567
 * 
 *     def tetradcomponent(self, HertzMode hertz, int ai, int bi):
 *         if hertz.gauge is not self.gauge_str:             # <<<<<<<<<<<<<<
 *             raise TypeError("Hertz potential in {} gauge. Must be in {} gauge".format(hertz.gauge, self.gauge_str))
 *         cdef cpp_complex[double] habIn = cpp_complex[double](0., 0.)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_gauge); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != __pyx_v_self->gauge_str);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "cython/teukolsky_wrap.pyx":568
 *     def tetradcomponent(self, HertzMode hertz, int ai, int bi):
 *         if hertz.gauge is not self.gauge_str:
 *             raise TypeError("Hertz potential in {} gauge. Must be in {} gauge".format(hertz.gauge, self.gauge_str))             # <<<<<<<<<<<<<<
 *         cdef cpp_complex[double] habIn = cpp_complex[double](0., 0.)
 *         cdef cpp_complex[double] habUp = cpp_complex[double](0., 0.)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Hertz_potential_in_gauge_Must_be, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_gauge); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_v_self->gauge_str};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 568, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_v_self->gauge_str};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 568, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_5);
      __Pyx_INCREF(__pyx_v_self->gauge_str);
      __Pyx_GIVEREF(__pyx_v_self->gauge_str);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_self->gauge_str);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(3, 568, __pyx_L1_error)

    /* "cython/teukolsky_wrap.pyx":567
 * 
 *     def tetradcomponent(self, HertzMode hertz, int ai, int bi):
 *         if hertz.gauge is not self.gauge_str:             # <<<<<<<<<<<<<<
 *             raise TypeError("Hertz potential in {} gauge. Must be in {} gauge".format(hertz.gauge, self.gauge_str))
 *         cdef cpp_complex[double] habIn = cpp_complex[double](0., 0.)
 */
  }

  /* "cython/teukolsky_wrap.pyx":569
 *         if hertz.gauge is not self.gauge_str:
 *             raise TypeError("Hertz potential in {} gauge. Must be in {} gauge".format(hertz.gauge, self.gauge_str))
 *         cdef cpp_complex[double] habIn = cpp_complex[double](0., 0.)             # <<<<<<<<<<<<<<
 *         cdef cpp_complex[double] habUp = cpp_complex[double](0., 0.)
 *         cdef cpp_complex[double] habbase, dPsiIn, dPsiUp, dS
 */
  try {
    __pyx_t_9 = std::complex<double> (0., 0.);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 569, __pyx_L1_error)
  }
  __pyx_v_habIn = __pyx_t_9;

  /* "cython/teukolsky_wrap.pyx":570
 *             raise TypeError("Hertz potential in {} gauge. Must be in {} gauge".format(hertz.gauge, self.gauge_str))
 *         cdef cpp_complex[double] habIn = cpp_complex[double](0., 0.)
 *         cdef cpp_complex[double] habUp = cpp_complex[double](0., 0.)             # <<<<<<<<<<<<<<
 *         cdef cpp_complex[double] habbase, dPsiIn, dPsiUp, dS
 *         cdef int atemp
 */
  try {
    __pyx_t_9 = std::complex<double> (0., 0.);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 570, __pyx_L1_error)
  }
  __pyx_v_habUp = __pyx_t_9;

  /* "cython/teukolsky_wrap.pyx":574
 *         cdef int atemp
 *         cdef double a, r, z
 *         cdef cpp_complex[double] im = cpp_complex[double](0., hertz.azimuthalmode)             # <<<<<<<<<<<<<<
 *         cdef cpp_complex[double] iomega = cpp_complex[double](0., hertz.frequency)
 *         a = hertz.blackholespin
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_azimuthalmode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  try {
    __pyx_t_9 = std::complex<double> (0., __pyx_t_10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 574, __pyx_L1_error)
  }
  __pyx_v_im = __pyx_t_9;

  /* "cython/teukolsky_wrap.pyx":575
 *         cdef double a, r, z
 *         cdef cpp_complex[double] im = cpp_complex[double](0., hertz.azimuthalmode)
 *         cdef cpp_complex[double] iomega = cpp_complex[double](0., hertz.frequency)             # <<<<<<<<<<<<<<
 *         a = hertz.blackholespin
 *         r = hertz.radialpoint(0)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_frequency); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  try {
    __pyx_t_9 = std::complex<double> (0., __pyx_t_10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 575, __pyx_L1_error)
  }
  __pyx_v_iomega = __pyx_t_9;

  /* "cython/teukolsky_wrap.pyx":576
 *         cdef cpp_complex[double] im = cpp_complex[double](0., hertz.azimuthalmode)
 *         cdef cpp_complex[double] iomega = cpp_complex[double](0., hertz.frequency)
 *         a = hertz.blackholespin             # <<<<<<<<<<<<<<
 *         r = hertz.radialpoint(0)
 *         z = np.cos(hertz.polarpoint(0))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_blackholespin); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_a = __pyx_t_10;

  /* "cython/teukolsky_wrap.pyx":577
 *         cdef cpp_complex[double] iomega = cpp_complex[double](0., hertz.frequency)
 *         a = hertz.blackholespin
 *         r = hertz.radialpoint(0)             # <<<<<<<<<<<<<<
 *         z = np.cos(hertz.polarpoint(0))
 *         if(ai < bi):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_radialpoint); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_8, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_int_0);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_r = __pyx_t_10;

  /* "cython/teukolsky_wrap.pyx":578
 *         a = hertz.blackholespin
 *         r = hertz.radialpoint(0)
 *         z = np.cos(hertz.polarpoint(0))             # <<<<<<<<<<<<<<
 *         if(ai < bi):
 *             atemp = ai
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cos); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_polarpoint); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_0);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_z = __pyx_t_10;

  /* "cython/teukolsky_wrap.pyx":579
 *         r = hertz.radialpoint(0)
 *         z = np.cos(hertz.polarpoint(0))
 *         if(ai < bi):             # <<<<<<<<<<<<<<
 *             atemp = ai
 *             ai = bi
 */
  __pyx_t_3 = ((__pyx_v_ai < __pyx_v_bi) != 0);
  if (__pyx_t_3) {

    /* "cython/teukolsky_wrap.pyx":580
 *         z = np.cos(hertz.polarpoint(0))
 *         if(ai < bi):
 *             atemp = ai             # <<<<<<<<<<<<<<
 *             ai = bi
 *             bi = atemp
 */
    __pyx_v_atemp = __pyx_v_ai;

    /* "cython/teukolsky_wrap.pyx":581
 *         if(ai < bi):
 *             atemp = ai
 *             ai = bi             # <<<<<<<<<<<<<<
 *             bi = atemp
 *         if (ai, bi) in metric_component_gauge_dict[self.gauge_str].keys():
 */
    __pyx_v_ai = __pyx_v_bi;

    /* "cython/teukolsky_wrap.pyx":582
 *             atemp = ai
 *             ai = bi
 *             bi = atemp             # <<<<<<<<<<<<<<
 *         if (ai, bi) in metric_component_gauge_dict[self.gauge_str].keys():
 *             for nt in range(3):
 */
    __pyx_v_bi = __pyx_v_atemp;

    /* "cython/teukolsky_wrap.pyx":579
 *         r = hertz.radialpoint(0)
 *         z = np.cos(hertz.polarpoint(0))
 *         if(ai < bi):             # <<<<<<<<<<<<<<
 *             atemp = ai
 *             ai = bi
 */
  }

  /* "cython/teukolsky_wrap.pyx":583
 *             ai = bi
 *             bi = atemp
 *         if (ai, bi) in metric_component_gauge_dict[self.gauge_str].keys():             # <<<<<<<<<<<<<<
 *             for nt in range(3):
 *                 for nr in range(3):
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ai); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_bi); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  if (unlikely(__pyx_v_11cybhpt_full_metric_component_gauge_dict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(3, 583, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_11cybhpt_full_metric_component_gauge_dict, __pyx_v_self->gauge_str); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_keys); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_t_8, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(3, 583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "cython/teukolsky_wrap.pyx":584
 *             bi = atemp
 *         if (ai, bi) in metric_component_gauge_dict[self.gauge_str].keys():
 *             for nt in range(3):             # <<<<<<<<<<<<<<
 *                 for nr in range(3):
 *                     if nr == 0:
 */
    for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
      __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_nt, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "cython/teukolsky_wrap.pyx":585
 *         if (ai, bi) in metric_component_gauge_dict[self.gauge_str].keys():
 *             for nt in range(3):
 *                 for nr in range(3):             # <<<<<<<<<<<<<<
 *                     if nr == 0:
 *                         dPsiIn = hertz.radialsolution("In", 0)
 */
      for (__pyx_t_12 = 0; __pyx_t_12 < 3; __pyx_t_12+=1) {
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 585, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_v_nr, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "cython/teukolsky_wrap.pyx":586
 *             for nt in range(3):
 *                 for nr in range(3):
 *                     if nr == 0:             # <<<<<<<<<<<<<<
 *                         dPsiIn = hertz.radialsolution("In", 0)
 *                         dPsiUp = hertz.radialsolution("Up", 0)
 */
        __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_v_nr, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 586, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_2) {

          /* "cython/teukolsky_wrap.pyx":587
 *                 for nr in range(3):
 *                     if nr == 0:
 *                         dPsiIn = hertz.radialsolution("In", 0)             # <<<<<<<<<<<<<<
 *                         dPsiUp = hertz.radialsolution("Up", 0)
 *                     elif nr == 1:
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_radialsolution); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 587, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 587, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 587, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_dPsiIn = __pyx_t_9;

          /* "cython/teukolsky_wrap.pyx":588
 *                     if nr == 0:
 *                         dPsiIn = hertz.radialsolution("In", 0)
 *                         dPsiUp = hertz.radialsolution("Up", 0)             # <<<<<<<<<<<<<<
 *                     elif nr == 1:
 *                         dPsiIn = hertz.radialderivative("In", 0)
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_radialsolution); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 588, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_v_dPsiUp = __pyx_t_9;

          /* "cython/teukolsky_wrap.pyx":586
 *             for nt in range(3):
 *                 for nr in range(3):
 *                     if nr == 0:             # <<<<<<<<<<<<<<
 *                         dPsiIn = hertz.radialsolution("In", 0)
 *                         dPsiUp = hertz.radialsolution("Up", 0)
 */
          goto __pyx_L10;
        }

        /* "cython/teukolsky_wrap.pyx":589
 *                         dPsiIn = hertz.radialsolution("In", 0)
 *                         dPsiUp = hertz.radialsolution("Up", 0)
 *                     elif nr == 1:             # <<<<<<<<<<<<<<
 *                         dPsiIn = hertz.radialderivative("In", 0)
 *                         dPsiUp = hertz.radialderivative("Up", 0)
 */
        __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_v_nr, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 589, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 589, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_2) {

          /* "cython/teukolsky_wrap.pyx":590
 *                         dPsiUp = hertz.radialsolution("Up", 0)
 *                     elif nr == 1:
 *                         dPsiIn = hertz.radialderivative("In", 0)             # <<<<<<<<<<<<<<
 *                         dPsiUp = hertz.radialderivative("Up", 0)
 *                     elif nr == 2:
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_radialderivative); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 590, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 590, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 590, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_dPsiIn = __pyx_t_9;

          /* "cython/teukolsky_wrap.pyx":591
 *                     elif nr == 1:
 *                         dPsiIn = hertz.radialderivative("In", 0)
 *                         dPsiUp = hertz.radialderivative("Up", 0)             # <<<<<<<<<<<<<<
 *                     elif nr == 2:
 *                         dPsiIn = hertz.radialderivative2("In", 0)
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_radialderivative); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 591, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 591, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 591, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_v_dPsiUp = __pyx_t_9;

          /* "cython/teukolsky_wrap.pyx":589
 *                         dPsiIn = hertz.radialsolution("In", 0)
 *                         dPsiUp = hertz.radialsolution("Up", 0)
 *                     elif nr == 1:             # <<<<<<<<<<<<<<
 *                         dPsiIn = hertz.radialderivative("In", 0)
 *                         dPsiUp = hertz.radialderivative("Up", 0)
 */
          goto __pyx_L10;
        }

        /* "cython/teukolsky_wrap.pyx":592
 *                         dPsiIn = hertz.radialderivative("In", 0)
 *                         dPsiUp = hertz.radialderivative("Up", 0)
 *                     elif nr == 2:             # <<<<<<<<<<<<<<
 *                         dPsiIn = hertz.radialderivative2("In", 0)
 *                         dPsiUp = hertz.radialderivative2("Up", 0)
 */
        __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_v_nr, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 592, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 592, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_2) {

          /* "cython/teukolsky_wrap.pyx":593
 *                         dPsiUp = hertz.radialderivative("Up", 0)
 *                     elif nr == 2:
 *                         dPsiIn = hertz.radialderivative2("In", 0)             # <<<<<<<<<<<<<<
 *                         dPsiUp = hertz.radialderivative2("Up", 0)
 *                     else:
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_radialderivative2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 593, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 593, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 593, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_dPsiIn = __pyx_t_9;

          /* "cython/teukolsky_wrap.pyx":594
 *                     elif nr == 2:
 *                         dPsiIn = hertz.radialderivative2("In", 0)
 *                         dPsiUp = hertz.radialderivative2("Up", 0)             # <<<<<<<<<<<<<<
 *                     else:
 *                         dPsiIn = cpp_complex[double](0., 0.)
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_radialderivative2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 594, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 594, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 594, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_v_dPsiUp = __pyx_t_9;

          /* "cython/teukolsky_wrap.pyx":592
 *                         dPsiIn = hertz.radialderivative("In", 0)
 *                         dPsiUp = hertz.radialderivative("Up", 0)
 *                     elif nr == 2:             # <<<<<<<<<<<<<<
 *                         dPsiIn = hertz.radialderivative2("In", 0)
 *                         dPsiUp = hertz.radialderivative2("Up", 0)
 */
          goto __pyx_L10;
        }

        /* "cython/teukolsky_wrap.pyx":596
 *                         dPsiUp = hertz.radialderivative2("Up", 0)
 *                     else:
 *                         dPsiIn = cpp_complex[double](0., 0.)             # <<<<<<<<<<<<<<
 *                         dPsiUp = cpp_complex[double](0., 0.)
 *                     for nz in range(3):
 */
        /*else*/ {
          try {
            __pyx_t_9 = std::complex<double> (0., 0.);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(3, 596, __pyx_L1_error)
          }
          __pyx_v_dPsiIn = __pyx_t_9;

          /* "cython/teukolsky_wrap.pyx":597
 *                     else:
 *                         dPsiIn = cpp_complex[double](0., 0.)
 *                         dPsiUp = cpp_complex[double](0., 0.)             # <<<<<<<<<<<<<<
 *                     for nz in range(3):
 *                         if nz == 0:
 */
          try {
            __pyx_t_9 = std::complex<double> (0., 0.);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(3, 597, __pyx_L1_error)
          }
          __pyx_v_dPsiUp = __pyx_t_9;
        }
        __pyx_L10:;

        /* "cython/teukolsky_wrap.pyx":598
 *                         dPsiIn = cpp_complex[double](0., 0.)
 *                         dPsiUp = cpp_complex[double](0., 0.)
 *                     for nz in range(3):             # <<<<<<<<<<<<<<
 *                         if nz == 0:
 *                             dS = hertz.polarsolution(0)
 */
        for (__pyx_t_13 = 0; __pyx_t_13 < 3; __pyx_t_13+=1) {
          __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_13); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 598, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_XDECREF_SET(__pyx_v_nz, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "cython/teukolsky_wrap.pyx":599
 *                         dPsiUp = cpp_complex[double](0., 0.)
 *                     for nz in range(3):
 *                         if nz == 0:             # <<<<<<<<<<<<<<
 *                             dS = hertz.polarsolution(0)
 *                         elif nz == 1: # SWSH are functions of theta but the metric coefficients are organized wrt to d/dz
 */
          __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_v_nz, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 599, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 599, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (__pyx_t_2) {

            /* "cython/teukolsky_wrap.pyx":600
 *                     for nz in range(3):
 *                         if nz == 0:
 *                             dS = hertz.polarsolution(0)             # <<<<<<<<<<<<<<
 *                         elif nz == 1: # SWSH are functions of theta but the metric coefficients are organized wrt to d/dz
 *                             dS = -hertz.polarderivative(0)/np.sqrt(1. - z**2)
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_polarsolution); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 600, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_int_0);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 600, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 600, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_v_dS = __pyx_t_9;

            /* "cython/teukolsky_wrap.pyx":599
 *                         dPsiUp = cpp_complex[double](0., 0.)
 *                     for nz in range(3):
 *                         if nz == 0:             # <<<<<<<<<<<<<<
 *                             dS = hertz.polarsolution(0)
 *                         elif nz == 1: # SWSH are functions of theta but the metric coefficients are organized wrt to d/dz
 */
            goto __pyx_L13;
          }

          /* "cython/teukolsky_wrap.pyx":601
 *                         if nz == 0:
 *                             dS = hertz.polarsolution(0)
 *                         elif nz == 1: # SWSH are functions of theta but the metric coefficients are organized wrt to d/dz             # <<<<<<<<<<<<<<
 *                             dS = -hertz.polarderivative(0)/np.sqrt(1. - z**2)
 *                         elif nz == 2:
 */
          __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_v_nz, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 601, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 601, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (__pyx_t_2) {

            /* "cython/teukolsky_wrap.pyx":602
 *                             dS = hertz.polarsolution(0)
 *                         elif nz == 1: # SWSH are functions of theta but the metric coefficients are organized wrt to d/dz
 *                             dS = -hertz.polarderivative(0)/np.sqrt(1. - z**2)             # <<<<<<<<<<<<<<
 *                         elif nz == 2:
 *                             dS = hertz.polarderivative2(0)/(1. - z**2) - z*hertz.polarderivative(0)/(1. - z**2)**(1.5)
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_polarderivative); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 602, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_int_0);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 602, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyNumber_Negative(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 602, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 602, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 602, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyFloat_FromDouble((1. - pow(__pyx_v_z, 2.0))); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 602, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_8 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 602, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 602, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 602, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_v_dS = __pyx_t_9;

            /* "cython/teukolsky_wrap.pyx":601
 *                         if nz == 0:
 *                             dS = hertz.polarsolution(0)
 *                         elif nz == 1: # SWSH are functions of theta but the metric coefficients are organized wrt to d/dz             # <<<<<<<<<<<<<<
 *                             dS = -hertz.polarderivative(0)/np.sqrt(1. - z**2)
 *                         elif nz == 2:
 */
            goto __pyx_L13;
          }

          /* "cython/teukolsky_wrap.pyx":603
 *                         elif nz == 1: # SWSH are functions of theta but the metric coefficients are organized wrt to d/dz
 *                             dS = -hertz.polarderivative(0)/np.sqrt(1. - z**2)
 *                         elif nz == 2:             # <<<<<<<<<<<<<<
 *                             dS = hertz.polarderivative2(0)/(1. - z**2) - z*hertz.polarderivative(0)/(1. - z**2)**(1.5)
 *                         else:
 */
          __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_nz, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 603, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 603, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_2) {

            /* "cython/teukolsky_wrap.pyx":604
 *                             dS = -hertz.polarderivative(0)/np.sqrt(1. - z**2)
 *                         elif nz == 2:
 *                             dS = hertz.polarderivative2(0)/(1. - z**2) - z*hertz.polarderivative(0)/(1. - z**2)**(1.5)             # <<<<<<<<<<<<<<
 *                         else:
 *                             dS = cpp_complex[double](0., 0.)
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_polarderivative2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_1, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_int_0);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = PyFloat_FromDouble((1. - pow(__pyx_v_z, 2.0))); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_hertz), __pyx_n_s_polarderivative); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_0);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyNumber_Multiply(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyFloat_FromDouble(pow((1. - pow(__pyx_v_z, 2.0)), 1.5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyNumber_Subtract(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 604, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_v_dS = __pyx_t_9;

            /* "cython/teukolsky_wrap.pyx":603
 *                         elif nz == 1: # SWSH are functions of theta but the metric coefficients are organized wrt to d/dz
 *                             dS = -hertz.polarderivative(0)/np.sqrt(1. - z**2)
 *                         elif nz == 2:             # <<<<<<<<<<<<<<
 *                             dS = hertz.polarderivative2(0)/(1. - z**2) - z*hertz.polarderivative(0)/(1. - z**2)**(1.5)
 *                         else:
 */
            goto __pyx_L13;
          }

          /* "cython/teukolsky_wrap.pyx":606
 *                             dS = hertz.polarderivative2(0)/(1. - z**2) - z*hertz.polarderivative(0)/(1. - z**2)**(1.5)
 *                         else:
 *                             dS = cpp_complex[double](0., 0.)             # <<<<<<<<<<<<<<
 *                         for nph in range(3):
 *                             if nt + nr + nz + nph <= 2:
 */
          /*else*/ {
            try {
              __pyx_t_9 = std::complex<double> (0., 0.);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(3, 606, __pyx_L1_error)
            }
            __pyx_v_dS = __pyx_t_9;
          }
          __pyx_L13:;

          /* "cython/teukolsky_wrap.pyx":607
 *                         else:
 *                             dS = cpp_complex[double](0., 0.)
 *                         for nph in range(3):             # <<<<<<<<<<<<<<
 *                             if nt + nr + nz + nph <= 2:
 *                                 habbase = metric_coefficient_S0(ai, bi, nt, nr, nz, nph, a, r, z)*dS*(im)**nph*(-1.*iomega)**nt
 */
          for (__pyx_t_14 = 0; __pyx_t_14 < 3; __pyx_t_14+=1) {
            __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 607, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_XDECREF_SET(__pyx_v_nph, __pyx_t_4);
            __pyx_t_4 = 0;

            /* "cython/teukolsky_wrap.pyx":608
 *                             dS = cpp_complex[double](0., 0.)
 *                         for nph in range(3):
 *                             if nt + nr + nz + nph <= 2:             # <<<<<<<<<<<<<<
 *                                 habbase = metric_coefficient_S0(ai, bi, nt, nr, nz, nph, a, r, z)*dS*(im)**nph*(-1.*iomega)**nt
 *                                 habIn += habbase*dPsiIn
 */
            __pyx_t_4 = PyNumber_Add(__pyx_v_nt, __pyx_v_nr); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_8 = PyNumber_Add(__pyx_t_4, __pyx_v_nz); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyNumber_Add(__pyx_t_8, __pyx_v_nph); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_int_2, Py_LE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 608, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 608, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (__pyx_t_2) {

              /* "cython/teukolsky_wrap.pyx":609
 *                         for nph in range(3):
 *                             if nt + nr + nz + nph <= 2:
 *                                 habbase = metric_coefficient_S0(ai, bi, nt, nr, nz, nph, a, r, z)*dS*(im)**nph*(-1.*iomega)**nt             # <<<<<<<<<<<<<<
 *                                 habIn += habbase*dPsiIn
 *                                 habUp += habbase*dPsiUp
 */
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metric_coefficient_S0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_ai); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_bi); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_6 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_15 = PyFloat_FromDouble(__pyx_v_r); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_16 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_16)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              __pyx_t_7 = 0;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                  __pyx_t_7 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_4)) {
                PyObject *__pyx_temp[10] = {__pyx_t_17, __pyx_t_1, __pyx_t_5, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_nph, __pyx_t_6, __pyx_t_15, __pyx_t_16};
                __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 9+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 609, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
                PyObject *__pyx_temp[10] = {__pyx_t_17, __pyx_t_1, __pyx_t_5, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_nph, __pyx_t_6, __pyx_t_15, __pyx_t_16};
                __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 9+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 609, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              } else
              #endif
              {
                __pyx_t_18 = PyTuple_New(9+__pyx_t_7); if (unlikely(!__pyx_t_18)) __PYX_ERR(3, 609, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_18);
                if (__pyx_t_17) {
                  __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17); __pyx_t_17 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_1);
                PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_7, __pyx_t_1);
                __Pyx_GIVEREF(__pyx_t_5);
                PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_7, __pyx_t_5);
                __Pyx_INCREF(__pyx_v_nt);
                __Pyx_GIVEREF(__pyx_v_nt);
                PyTuple_SET_ITEM(__pyx_t_18, 2+__pyx_t_7, __pyx_v_nt);
                __Pyx_INCREF(__pyx_v_nr);
                __Pyx_GIVEREF(__pyx_v_nr);
                PyTuple_SET_ITEM(__pyx_t_18, 3+__pyx_t_7, __pyx_v_nr);
                __Pyx_INCREF(__pyx_v_nz);
                __Pyx_GIVEREF(__pyx_v_nz);
                PyTuple_SET_ITEM(__pyx_t_18, 4+__pyx_t_7, __pyx_v_nz);
                __Pyx_INCREF(__pyx_v_nph);
                __Pyx_GIVEREF(__pyx_v_nph);
                PyTuple_SET_ITEM(__pyx_t_18, 5+__pyx_t_7, __pyx_v_nph);
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_18, 6+__pyx_t_7, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_15);
                PyTuple_SET_ITEM(__pyx_t_18, 7+__pyx_t_7, __pyx_t_15);
                __Pyx_GIVEREF(__pyx_t_16);
                PyTuple_SET_ITEM(__pyx_t_18, 8+__pyx_t_7, __pyx_t_16);
                __pyx_t_1 = 0;
                __pyx_t_5 = 0;
                __pyx_t_6 = 0;
                __pyx_t_15 = 0;
                __pyx_t_16 = 0;
                __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_18, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 609, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              }
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __pyx_convert_complex_to_py_double(__pyx_v_dS); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_18 = PyNumber_Multiply(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __pyx_convert_complex_to_py_double(__pyx_v_im); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_8 = PyNumber_Power(__pyx_t_4, __pyx_v_nph, Py_None); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = PyNumber_Multiply(__pyx_t_18, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = __pyx_convert_complex_to_py_double((-1. * __pyx_v_iomega)); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_18 = PyNumber_Power(__pyx_t_8, __pyx_v_nt, Py_None); if (unlikely(!__pyx_t_18)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = PyNumber_Multiply(__pyx_t_4, __pyx_t_18); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __pyx_t_9 = __pyx_convert_complex_from_py_double(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 609, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_v_habbase = __pyx_t_9;

              /* "cython/teukolsky_wrap.pyx":610
 *                             if nt + nr + nz + nph <= 2:
 *                                 habbase = metric_coefficient_S0(ai, bi, nt, nr, nz, nph, a, r, z)*dS*(im)**nph*(-1.*iomega)**nt
 *                                 habIn += habbase*dPsiIn             # <<<<<<<<<<<<<<
 *                                 habUp += habbase*dPsiUp
 *             return {"In": habIn, "Up": habUp}
 */
              __pyx_v_habIn += (__pyx_v_habbase * __pyx_v_dPsiIn);

              /* "cython/teukolsky_wrap.pyx":611
 *                                 habbase = metric_coefficient_S0(ai, bi, nt, nr, nz, nph, a, r, z)*dS*(im)**nph*(-1.*iomega)**nt
 *                                 habIn += habbase*dPsiIn
 *                                 habUp += habbase*dPsiUp             # <<<<<<<<<<<<<<
 *             return {"In": habIn, "Up": habUp}
 *         else:
 */
              __pyx_v_habUp += (__pyx_v_habbase * __pyx_v_dPsiUp);

              /* "cython/teukolsky_wrap.pyx":608
 *                             dS = cpp_complex[double](0., 0.)
 *                         for nph in range(3):
 *                             if nt + nr + nz + nph <= 2:             # <<<<<<<<<<<<<<
 *                                 habbase = metric_coefficient_S0(ai, bi, nt, nr, nz, nph, a, r, z)*dS*(im)**nph*(-1.*iomega)**nt
 *                                 habIn += habbase*dPsiIn
 */
            }
          }
        }
      }
    }

    /* "cython/teukolsky_wrap.pyx":612
 *                                 habIn += habbase*dPsiIn
 *                                 habUp += habbase*dPsiUp
 *             return {"In": habIn, "Up": habUp}             # <<<<<<<<<<<<<<
 *         else:
 *             return {"In": habIn, "Up": habUp}
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_18 = __pyx_convert_complex_to_py_double(__pyx_v_habIn); if (unlikely(!__pyx_t_18)) __PYX_ERR(3, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_u_In, __pyx_t_18) < 0) __PYX_ERR(3, 612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __pyx_convert_complex_to_py_double(__pyx_v_habUp); if (unlikely(!__pyx_t_18)) __PYX_ERR(3, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_u_Up, __pyx_t_18) < 0) __PYX_ERR(3, 612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "cython/teukolsky_wrap.pyx":583
 *             ai = bi
 *             bi = atemp
 *         if (ai, bi) in metric_component_gauge_dict[self.gauge_str].keys():             # <<<<<<<<<<<<<<
 *             for nt in range(3):
 *                 for nr in range(3):
 */
  }

  /* "cython/teukolsky_wrap.pyx":614
 *             return {"In": habIn, "Up": habUp}
 *         else:
 *             return {"In": habIn, "Up": habUp}             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_18 = __pyx_convert_complex_to_py_double(__pyx_v_habIn); if (unlikely(!__pyx_t_18)) __PYX_ERR(3, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_u_In, __pyx_t_18) < 0) __PYX_ERR(3, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __pyx_convert_complex_to_py_double(__pyx_v_habUp); if (unlikely(!__pyx_t_18)) __PYX_ERR(3, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_u_Up, __pyx_t_18) < 0) __PYX_ERR(3, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;
  }

  /* "cython/teukolsky_wrap.pyx":566
 *             return self.tetradcomponent(hertz, ai, bi)
 * 
 *     def tetradcomponent(self, HertzMode hertz, int ai, int bi):             # <<<<<<<<<<<<<<
 *         if hertz.gauge is not self.gauge_str:
 *             raise TypeError("Hertz potential in {} gauge. Must be in {} gauge".format(hertz.gauge, self.gauge_str))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("cybhpt_full.MetricModeGenerator.tetradcomponent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nt);
  __Pyx_XDECREF(__pyx_v_nr);
  __Pyx_XDECREF(__pyx_v_nz);
  __Pyx_XDECREF(__pyx_v_nph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_19MetricModeGenerator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_19MetricModeGenerator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_19MetricModeGenerator_6__reduce_cython__(((struct __pyx_obj_11cybhpt_full_MetricModeGenerator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_19MetricModeGenerator_6__reduce_cython__(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.basis, self.gauge_cpp, self.gauge_str)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__Gauge(__pyx_v_self->gauge_cpp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->basis);
  __Pyx_GIVEREF(__pyx_v_self->basis);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->basis);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->gauge_str);
  __Pyx_GIVEREF(__pyx_v_self->gauge_str);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_self->gauge_str);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.basis, self.gauge_cpp, self.gauge_str)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.basis, self.gauge_cpp, self.gauge_str)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.basis is not None or self.gauge_str is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.basis, self.gauge_cpp, self.gauge_str)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.basis is not None or self.gauge_str is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->basis != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_self->gauge_str != ((PyObject*)Py_None));
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.basis is not None or self.gauge_str is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self.basis is not None or self.gauge_str is not None
 *     if use_setstate:
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_MetricModeGenerat); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_264467439);
    __Pyx_GIVEREF(__pyx_int_264467439);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_264467439);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.basis is not None or self.gauge_str is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, None), state
 *     else:
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MetricModeGenerator__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_MetricModeGenerat); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_264467439);
    __Pyx_GIVEREF(__pyx_int_264467439);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_264467439);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cybhpt_full.MetricModeGenerator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MetricModeGenerator__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_19MetricModeGenerator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_19MetricModeGenerator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_19MetricModeGenerator_8__setstate_cython__(((struct __pyx_obj_11cybhpt_full_MetricModeGenerator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_19MetricModeGenerator_8__setstate_cython__(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MetricModeGenerator__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_11cybhpt_full___pyx_unpickle_MetricModeGenerator__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MetricModeGenerator, (type(self), 0xfc373ef, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MetricModeGenerator__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.MetricModeGenerator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":39
 *     cdef FluxListCPP *fluxlistcpp
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp = new FluxListCPP()
 * 
 */

/* Python wrapper */
static int __pyx_pw_11cybhpt_full_8FluxList_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11cybhpt_full_8FluxList_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList___cinit__(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11cybhpt_full_8FluxList___cinit__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cython/flux_wrap.pyx":40
 * 
 *     def __cinit__(self):
 *         self.fluxlistcpp = new FluxListCPP()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->fluxlistcpp = new FluxList();

  /* "cython/flux_wrap.pyx":39
 *     cdef FluxListCPP *fluxlistcpp
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp = new FluxListCPP()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":42
 *         self.fluxlistcpp = new FluxListCPP()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.fluxlistcpp
 * 
 */

/* Python wrapper */
static void __pyx_pw_11cybhpt_full_8FluxList_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11cybhpt_full_8FluxList_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11cybhpt_full_8FluxList_2__dealloc__(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11cybhpt_full_8FluxList_2__dealloc__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cython/flux_wrap.pyx":43
 * 
 *     def __dealloc__(self):
 *         del self.fluxlistcpp             # <<<<<<<<<<<<<<
 * 
 *     def zero_fluxes(self):
 */
  delete __pyx_v_self->fluxlistcpp;

  /* "cython/flux_wrap.pyx":42
 *         self.fluxlistcpp = new FluxListCPP()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.fluxlistcpp
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/flux_wrap.pyx":45
 *         del self.fluxlistcpp
 * 
 *     def zero_fluxes(self):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity = 0.
 *         self.fluxlistcpp.Ldot.infinity = 0.
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_5zero_fluxes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_5zero_fluxes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_fluxes (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_4zero_fluxes(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_4zero_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_fluxes", 0);

  /* "cython/flux_wrap.pyx":46
 * 
 *     def zero_fluxes(self):
 *         self.fluxlistcpp.Edot.infinity = 0.             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.infinity = 0.
 *         self.fluxlistcpp.Qdot.infinity = 0.
 */
  __pyx_v_self->fluxlistcpp->Edot.infinity = 0.;

  /* "cython/flux_wrap.pyx":47
 *     def zero_fluxes(self):
 *         self.fluxlistcpp.Edot.infinity = 0.
 *         self.fluxlistcpp.Ldot.infinity = 0.             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.infinity = 0.
 * 
 */
  __pyx_v_self->fluxlistcpp->Ldot.infinity = 0.;

  /* "cython/flux_wrap.pyx":48
 *         self.fluxlistcpp.Edot.infinity = 0.
 *         self.fluxlistcpp.Ldot.infinity = 0.
 *         self.fluxlistcpp.Qdot.infinity = 0.             # <<<<<<<<<<<<<<
 * 
 *         self.fluxlistcpp.Edot.horizon = 0.
 */
  __pyx_v_self->fluxlistcpp->Qdot.infinity = 0.;

  /* "cython/flux_wrap.pyx":50
 *         self.fluxlistcpp.Qdot.infinity = 0.
 * 
 *         self.fluxlistcpp.Edot.horizon = 0.             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.horizon = 0.
 *         self.fluxlistcpp.Qdot.horizon = 0.
 */
  __pyx_v_self->fluxlistcpp->Edot.horizon = 0.;

  /* "cython/flux_wrap.pyx":51
 * 
 *         self.fluxlistcpp.Edot.horizon = 0.
 *         self.fluxlistcpp.Ldot.horizon = 0.             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.horizon = 0.
 * 
 */
  __pyx_v_self->fluxlistcpp->Ldot.horizon = 0.;

  /* "cython/flux_wrap.pyx":52
 *         self.fluxlistcpp.Edot.horizon = 0.
 *         self.fluxlistcpp.Ldot.horizon = 0.
 *         self.fluxlistcpp.Qdot.horizon = 0.             # <<<<<<<<<<<<<<
 * 
 *     cdef set_fluxes(self, FluxListCPP fluxes):
 */
  __pyx_v_self->fluxlistcpp->Qdot.horizon = 0.;

  /* "cython/flux_wrap.pyx":45
 *         del self.fluxlistcpp
 * 
 *     def zero_fluxes(self):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity = 0.
 *         self.fluxlistcpp.Ldot.infinity = 0.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":54
 *         self.fluxlistcpp.Qdot.horizon = 0.
 * 
 *     cdef set_fluxes(self, FluxListCPP fluxes):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity = fluxes.Edot.infinity
 *         self.fluxlistcpp.Ldot.infinity = fluxes.Ldot.infinity
 */

static PyObject *__pyx_f_11cybhpt_full_8FluxList_set_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, FluxList __pyx_v_fluxes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("set_fluxes", 0);

  /* "cython/flux_wrap.pyx":55
 * 
 *     cdef set_fluxes(self, FluxListCPP fluxes):
 *         self.fluxlistcpp.Edot.infinity = fluxes.Edot.infinity             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.infinity = fluxes.Ldot.infinity
 *         self.fluxlistcpp.Qdot.infinity = fluxes.Qdot.infinity
 */
  __pyx_t_1 = __pyx_v_fluxes.Edot.infinity;
  __pyx_v_self->fluxlistcpp->Edot.infinity = __pyx_t_1;

  /* "cython/flux_wrap.pyx":56
 *     cdef set_fluxes(self, FluxListCPP fluxes):
 *         self.fluxlistcpp.Edot.infinity = fluxes.Edot.infinity
 *         self.fluxlistcpp.Ldot.infinity = fluxes.Ldot.infinity             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.infinity = fluxes.Qdot.infinity
 * 
 */
  __pyx_t_1 = __pyx_v_fluxes.Ldot.infinity;
  __pyx_v_self->fluxlistcpp->Ldot.infinity = __pyx_t_1;

  /* "cython/flux_wrap.pyx":57
 *         self.fluxlistcpp.Edot.infinity = fluxes.Edot.infinity
 *         self.fluxlistcpp.Ldot.infinity = fluxes.Ldot.infinity
 *         self.fluxlistcpp.Qdot.infinity = fluxes.Qdot.infinity             # <<<<<<<<<<<<<<
 * 
 *         self.fluxlistcpp.Edot.horizon = fluxes.Edot.horizon
 */
  __pyx_t_1 = __pyx_v_fluxes.Qdot.infinity;
  __pyx_v_self->fluxlistcpp->Qdot.infinity = __pyx_t_1;

  /* "cython/flux_wrap.pyx":59
 *         self.fluxlistcpp.Qdot.infinity = fluxes.Qdot.infinity
 * 
 *         self.fluxlistcpp.Edot.horizon = fluxes.Edot.horizon             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.horizon = fluxes.Ldot.horizon
 *         self.fluxlistcpp.Qdot.horizon = fluxes.Qdot.horizon
 */
  __pyx_t_1 = __pyx_v_fluxes.Edot.horizon;
  __pyx_v_self->fluxlistcpp->Edot.horizon = __pyx_t_1;

  /* "cython/flux_wrap.pyx":60
 * 
 *         self.fluxlistcpp.Edot.horizon = fluxes.Edot.horizon
 *         self.fluxlistcpp.Ldot.horizon = fluxes.Ldot.horizon             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.horizon = fluxes.Qdot.horizon
 * 
 */
  __pyx_t_1 = __pyx_v_fluxes.Ldot.horizon;
  __pyx_v_self->fluxlistcpp->Ldot.horizon = __pyx_t_1;

  /* "cython/flux_wrap.pyx":61
 *         self.fluxlistcpp.Edot.horizon = fluxes.Edot.horizon
 *         self.fluxlistcpp.Ldot.horizon = fluxes.Ldot.horizon
 *         self.fluxlistcpp.Qdot.horizon = fluxes.Qdot.horizon             # <<<<<<<<<<<<<<
 * 
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):
 */
  __pyx_t_1 = __pyx_v_fluxes.Qdot.horizon;
  __pyx_v_self->fluxlistcpp->Qdot.horizon = __pyx_t_1;

  /* "cython/flux_wrap.pyx":54
 *         self.fluxlistcpp.Qdot.horizon = 0.
 * 
 *     cdef set_fluxes(self, FluxListCPP fluxes):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity = fluxes.Edot.infinity
 *         self.fluxlistcpp.Ldot.infinity = fluxes.Ldot.infinity
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":63
 *         self.fluxlistcpp.Qdot.horizon = fluxes.Qdot.horizon
 * 
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity = Edot
 *         self.fluxlistcpp.Ldot.infinity = Ldot
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_7set_infinity_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_7set_infinity_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Edot;
  double __pyx_v_Ldot;
  double __pyx_v_Qdot;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_infinity_fluxes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Edot,&__pyx_n_s_Ldot,&__pyx_n_s_Qdot,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Edot)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ldot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_infinity_fluxes", 1, 3, 3, 1); __PYX_ERR(4, 63, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Qdot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_infinity_fluxes", 1, 3, 3, 2); __PYX_ERR(4, 63, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_infinity_fluxes") < 0)) __PYX_ERR(4, 63, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_Edot = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Edot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 63, __pyx_L3_error)
    __pyx_v_Ldot = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Ldot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 63, __pyx_L3_error)
    __pyx_v_Qdot = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Qdot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 63, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_infinity_fluxes", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 63, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.FluxList.set_infinity_fluxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_6set_infinity_fluxes(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self), __pyx_v_Edot, __pyx_v_Ldot, __pyx_v_Qdot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_6set_infinity_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_infinity_fluxes", 0);

  /* "cython/flux_wrap.pyx":64
 * 
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.infinity = Edot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.infinity = Ldot
 *         self.fluxlistcpp.Qdot.infinity = Qdot
 */
  __pyx_v_self->fluxlistcpp->Edot.infinity = __pyx_v_Edot;

  /* "cython/flux_wrap.pyx":65
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.infinity = Edot
 *         self.fluxlistcpp.Ldot.infinity = Ldot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.infinity = Qdot
 * 
 */
  __pyx_v_self->fluxlistcpp->Ldot.infinity = __pyx_v_Ldot;

  /* "cython/flux_wrap.pyx":66
 *         self.fluxlistcpp.Edot.infinity = Edot
 *         self.fluxlistcpp.Ldot.infinity = Ldot
 *         self.fluxlistcpp.Qdot.infinity = Qdot             # <<<<<<<<<<<<<<
 * 
 *     def set_horizon_fluxes(self, double Edot, double Ldot, double Qdot):
 */
  __pyx_v_self->fluxlistcpp->Qdot.infinity = __pyx_v_Qdot;

  /* "cython/flux_wrap.pyx":63
 *         self.fluxlistcpp.Qdot.horizon = fluxes.Qdot.horizon
 * 
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity = Edot
 *         self.fluxlistcpp.Ldot.infinity = Ldot
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":68
 *         self.fluxlistcpp.Qdot.infinity = Qdot
 * 
 *     def set_horizon_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.horizon = Edot
 *         self.fluxlistcpp.Ldot.horizon = Ldot
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_9set_horizon_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_9set_horizon_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Edot;
  double __pyx_v_Ldot;
  double __pyx_v_Qdot;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_horizon_fluxes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Edot,&__pyx_n_s_Ldot,&__pyx_n_s_Qdot,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Edot)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ldot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_horizon_fluxes", 1, 3, 3, 1); __PYX_ERR(4, 68, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Qdot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_horizon_fluxes", 1, 3, 3, 2); __PYX_ERR(4, 68, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_horizon_fluxes") < 0)) __PYX_ERR(4, 68, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_Edot = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Edot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 68, __pyx_L3_error)
    __pyx_v_Ldot = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Ldot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 68, __pyx_L3_error)
    __pyx_v_Qdot = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Qdot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 68, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_horizon_fluxes", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.FluxList.set_horizon_fluxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_8set_horizon_fluxes(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self), __pyx_v_Edot, __pyx_v_Ldot, __pyx_v_Qdot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_8set_horizon_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_horizon_fluxes", 0);

  /* "cython/flux_wrap.pyx":69
 * 
 *     def set_horizon_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.horizon = Edot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.horizon = Ldot
 *         self.fluxlistcpp.Qdot.horizon = Qdot
 */
  __pyx_v_self->fluxlistcpp->Edot.horizon = __pyx_v_Edot;

  /* "cython/flux_wrap.pyx":70
 *     def set_horizon_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.horizon = Edot
 *         self.fluxlistcpp.Ldot.horizon = Ldot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.horizon = Qdot
 * 
 */
  __pyx_v_self->fluxlistcpp->Ldot.horizon = __pyx_v_Ldot;

  /* "cython/flux_wrap.pyx":71
 *         self.fluxlistcpp.Edot.horizon = Edot
 *         self.fluxlistcpp.Ldot.horizon = Ldot
 *         self.fluxlistcpp.Qdot.horizon = Qdot             # <<<<<<<<<<<<<<
 * 
 *     def add_infinity_fluxes(self, double Edot, double Ldot, double Qdot):
 */
  __pyx_v_self->fluxlistcpp->Qdot.horizon = __pyx_v_Qdot;

  /* "cython/flux_wrap.pyx":68
 *         self.fluxlistcpp.Qdot.infinity = Qdot
 * 
 *     def set_horizon_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.horizon = Edot
 *         self.fluxlistcpp.Ldot.horizon = Ldot
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":73
 *         self.fluxlistcpp.Qdot.horizon = Qdot
 * 
 *     def add_infinity_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity += Edot
 *         self.fluxlistcpp.Ldot.infinity += Ldot
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_11add_infinity_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_11add_infinity_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Edot;
  double __pyx_v_Ldot;
  double __pyx_v_Qdot;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_infinity_fluxes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Edot,&__pyx_n_s_Ldot,&__pyx_n_s_Qdot,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Edot)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ldot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_infinity_fluxes", 1, 3, 3, 1); __PYX_ERR(4, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Qdot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_infinity_fluxes", 1, 3, 3, 2); __PYX_ERR(4, 73, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_infinity_fluxes") < 0)) __PYX_ERR(4, 73, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_Edot = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Edot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 73, __pyx_L3_error)
    __pyx_v_Ldot = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Ldot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 73, __pyx_L3_error)
    __pyx_v_Qdot = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Qdot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 73, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_infinity_fluxes", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 73, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.FluxList.add_infinity_fluxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_10add_infinity_fluxes(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self), __pyx_v_Edot, __pyx_v_Ldot, __pyx_v_Qdot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_10add_infinity_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_infinity_fluxes", 0);

  /* "cython/flux_wrap.pyx":74
 * 
 *     def add_infinity_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.infinity += Edot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.infinity += Ldot
 *         self.fluxlistcpp.Qdot.infinity += Qdot
 */
  __pyx_v_self->fluxlistcpp->Edot.infinity = (__pyx_v_self->fluxlistcpp->Edot.infinity + __pyx_v_Edot);

  /* "cython/flux_wrap.pyx":75
 *     def add_infinity_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.infinity += Edot
 *         self.fluxlistcpp.Ldot.infinity += Ldot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.infinity += Qdot
 * 
 */
  __pyx_v_self->fluxlistcpp->Ldot.infinity = (__pyx_v_self->fluxlistcpp->Ldot.infinity + __pyx_v_Ldot);

  /* "cython/flux_wrap.pyx":76
 *         self.fluxlistcpp.Edot.infinity += Edot
 *         self.fluxlistcpp.Ldot.infinity += Ldot
 *         self.fluxlistcpp.Qdot.infinity += Qdot             # <<<<<<<<<<<<<<
 * 
 *     def add_horizon_fluxes(self, double Edot, double Ldot, double Qdot):
 */
  __pyx_v_self->fluxlistcpp->Qdot.infinity = (__pyx_v_self->fluxlistcpp->Qdot.infinity + __pyx_v_Qdot);

  /* "cython/flux_wrap.pyx":73
 *         self.fluxlistcpp.Qdot.horizon = Qdot
 * 
 *     def add_infinity_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity += Edot
 *         self.fluxlistcpp.Ldot.infinity += Ldot
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":78
 *         self.fluxlistcpp.Qdot.infinity += Qdot
 * 
 *     def add_horizon_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.horizon += Edot
 *         self.fluxlistcpp.Ldot.horizon += Ldot
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_13add_horizon_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_13add_horizon_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Edot;
  double __pyx_v_Ldot;
  double __pyx_v_Qdot;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_horizon_fluxes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Edot,&__pyx_n_s_Ldot,&__pyx_n_s_Qdot,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Edot)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ldot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_horizon_fluxes", 1, 3, 3, 1); __PYX_ERR(4, 78, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Qdot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_horizon_fluxes", 1, 3, 3, 2); __PYX_ERR(4, 78, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_horizon_fluxes") < 0)) __PYX_ERR(4, 78, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_Edot = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Edot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 78, __pyx_L3_error)
    __pyx_v_Ldot = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Ldot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 78, __pyx_L3_error)
    __pyx_v_Qdot = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Qdot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 78, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_horizon_fluxes", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 78, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.FluxList.add_horizon_fluxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_12add_horizon_fluxes(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self), __pyx_v_Edot, __pyx_v_Ldot, __pyx_v_Qdot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_12add_horizon_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_horizon_fluxes", 0);

  /* "cython/flux_wrap.pyx":79
 * 
 *     def add_horizon_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.horizon += Edot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.horizon += Ldot
 *         self.fluxlistcpp.Qdot.horizon += Qdot
 */
  __pyx_v_self->fluxlistcpp->Edot.horizon = (__pyx_v_self->fluxlistcpp->Edot.horizon + __pyx_v_Edot);

  /* "cython/flux_wrap.pyx":80
 *     def add_horizon_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.horizon += Edot
 *         self.fluxlistcpp.Ldot.horizon += Ldot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.horizon += Qdot
 * 
 */
  __pyx_v_self->fluxlistcpp->Ldot.horizon = (__pyx_v_self->fluxlistcpp->Ldot.horizon + __pyx_v_Ldot);

  /* "cython/flux_wrap.pyx":81
 *         self.fluxlistcpp.Edot.horizon += Edot
 *         self.fluxlistcpp.Ldot.horizon += Ldot
 *         self.fluxlistcpp.Qdot.horizon += Qdot             # <<<<<<<<<<<<<<
 * 
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):
 */
  __pyx_v_self->fluxlistcpp->Qdot.horizon = (__pyx_v_self->fluxlistcpp->Qdot.horizon + __pyx_v_Qdot);

  /* "cython/flux_wrap.pyx":78
 *         self.fluxlistcpp.Qdot.infinity += Qdot
 * 
 *     def add_horizon_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.horizon += Edot
 *         self.fluxlistcpp.Ldot.horizon += Ldot
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":83
 *         self.fluxlistcpp.Qdot.horizon += Qdot
 * 
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity += Edot
 *         self.fluxlistcpp.Ldot.infinity += Ldot
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_15set_infinity_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_15set_infinity_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Edot;
  double __pyx_v_Ldot;
  double __pyx_v_Qdot;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_infinity_fluxes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Edot,&__pyx_n_s_Ldot,&__pyx_n_s_Qdot,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Edot)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ldot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_infinity_fluxes", 1, 3, 3, 1); __PYX_ERR(4, 83, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Qdot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_infinity_fluxes", 1, 3, 3, 2); __PYX_ERR(4, 83, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_infinity_fluxes") < 0)) __PYX_ERR(4, 83, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_Edot = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Edot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 83, __pyx_L3_error)
    __pyx_v_Ldot = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Ldot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 83, __pyx_L3_error)
    __pyx_v_Qdot = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Qdot == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 83, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_infinity_fluxes", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 83, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.FluxList.set_infinity_fluxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_14set_infinity_fluxes(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self), __pyx_v_Edot, __pyx_v_Ldot, __pyx_v_Qdot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_14set_infinity_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_Edot, double __pyx_v_Ldot, double __pyx_v_Qdot) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_infinity_fluxes", 0);

  /* "cython/flux_wrap.pyx":84
 * 
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.infinity += Edot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.infinity += Ldot
 *         self.fluxlistcpp.Qdot.infinity += Qdot
 */
  __pyx_v_self->fluxlistcpp->Edot.infinity = (__pyx_v_self->fluxlistcpp->Edot.infinity + __pyx_v_Edot);

  /* "cython/flux_wrap.pyx":85
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):
 *         self.fluxlistcpp.Edot.infinity += Edot
 *         self.fluxlistcpp.Ldot.infinity += Ldot             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.infinity += Qdot
 * 
 */
  __pyx_v_self->fluxlistcpp->Ldot.infinity = (__pyx_v_self->fluxlistcpp->Ldot.infinity + __pyx_v_Ldot);

  /* "cython/flux_wrap.pyx":86
 *         self.fluxlistcpp.Edot.infinity += Edot
 *         self.fluxlistcpp.Ldot.infinity += Ldot
 *         self.fluxlistcpp.Qdot.infinity += Qdot             # <<<<<<<<<<<<<<
 * 
 *     def add_fluxes(self, double EdotH, double LdotH, double QdotH, double EdotI, double LdotI, double QdotI):
 */
  __pyx_v_self->fluxlistcpp->Qdot.infinity = (__pyx_v_self->fluxlistcpp->Qdot.infinity + __pyx_v_Qdot);

  /* "cython/flux_wrap.pyx":83
 *         self.fluxlistcpp.Qdot.horizon += Qdot
 * 
 *     def set_infinity_fluxes(self, double Edot, double Ldot, double Qdot):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.infinity += Edot
 *         self.fluxlistcpp.Ldot.infinity += Ldot
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":88
 *         self.fluxlistcpp.Qdot.infinity += Qdot
 * 
 *     def add_fluxes(self, double EdotH, double LdotH, double QdotH, double EdotI, double LdotI, double QdotI):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.horizon += EdotH
 *         self.fluxlistcpp.Ldot.horizon += LdotH
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_17add_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_17add_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_EdotH;
  double __pyx_v_LdotH;
  double __pyx_v_QdotH;
  double __pyx_v_EdotI;
  double __pyx_v_LdotI;
  double __pyx_v_QdotI;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_fluxes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_EdotH,&__pyx_n_s_LdotH,&__pyx_n_s_QdotH,&__pyx_n_s_EdotI,&__pyx_n_s_LdotI,&__pyx_n_s_QdotI,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_EdotH)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_LdotH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_fluxes", 1, 6, 6, 1); __PYX_ERR(4, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_QdotH)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_fluxes", 1, 6, 6, 2); __PYX_ERR(4, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_EdotI)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_fluxes", 1, 6, 6, 3); __PYX_ERR(4, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_LdotI)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_fluxes", 1, 6, 6, 4); __PYX_ERR(4, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_QdotI)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_fluxes", 1, 6, 6, 5); __PYX_ERR(4, 88, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_fluxes") < 0)) __PYX_ERR(4, 88, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_EdotH = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_EdotH == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 88, __pyx_L3_error)
    __pyx_v_LdotH = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_LdotH == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 88, __pyx_L3_error)
    __pyx_v_QdotH = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_QdotH == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 88, __pyx_L3_error)
    __pyx_v_EdotI = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_EdotI == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 88, __pyx_L3_error)
    __pyx_v_LdotI = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_LdotI == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 88, __pyx_L3_error)
    __pyx_v_QdotI = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_QdotI == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 88, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_fluxes", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 88, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.FluxList.add_fluxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_16add_fluxes(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self), __pyx_v_EdotH, __pyx_v_LdotH, __pyx_v_QdotH, __pyx_v_EdotI, __pyx_v_LdotI, __pyx_v_QdotI);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_16add_fluxes(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, double __pyx_v_EdotH, double __pyx_v_LdotH, double __pyx_v_QdotH, double __pyx_v_EdotI, double __pyx_v_LdotI, double __pyx_v_QdotI) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_fluxes", 0);

  /* "cython/flux_wrap.pyx":89
 * 
 *     def add_fluxes(self, double EdotH, double LdotH, double QdotH, double EdotI, double LdotI, double QdotI):
 *         self.fluxlistcpp.Edot.horizon += EdotH             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.horizon += LdotH
 *         self.fluxlistcpp.Qdot.horizon += QdotH
 */
  __pyx_v_self->fluxlistcpp->Edot.horizon = (__pyx_v_self->fluxlistcpp->Edot.horizon + __pyx_v_EdotH);

  /* "cython/flux_wrap.pyx":90
 *     def add_fluxes(self, double EdotH, double LdotH, double QdotH, double EdotI, double LdotI, double QdotI):
 *         self.fluxlistcpp.Edot.horizon += EdotH
 *         self.fluxlistcpp.Ldot.horizon += LdotH             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.horizon += QdotH
 * 
 */
  __pyx_v_self->fluxlistcpp->Ldot.horizon = (__pyx_v_self->fluxlistcpp->Ldot.horizon + __pyx_v_LdotH);

  /* "cython/flux_wrap.pyx":91
 *         self.fluxlistcpp.Edot.horizon += EdotH
 *         self.fluxlistcpp.Ldot.horizon += LdotH
 *         self.fluxlistcpp.Qdot.horizon += QdotH             # <<<<<<<<<<<<<<
 * 
 *         self.fluxlistcpp.Edot.infinity += EdotI
 */
  __pyx_v_self->fluxlistcpp->Qdot.horizon = (__pyx_v_self->fluxlistcpp->Qdot.horizon + __pyx_v_QdotH);

  /* "cython/flux_wrap.pyx":93
 *         self.fluxlistcpp.Qdot.horizon += QdotH
 * 
 *         self.fluxlistcpp.Edot.infinity += EdotI             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Ldot.infinity += LdotI
 *         self.fluxlistcpp.Qdot.infinity += QdotI
 */
  __pyx_v_self->fluxlistcpp->Edot.infinity = (__pyx_v_self->fluxlistcpp->Edot.infinity + __pyx_v_EdotI);

  /* "cython/flux_wrap.pyx":94
 * 
 *         self.fluxlistcpp.Edot.infinity += EdotI
 *         self.fluxlistcpp.Ldot.infinity += LdotI             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Qdot.infinity += QdotI
 * 
 */
  __pyx_v_self->fluxlistcpp->Ldot.infinity = (__pyx_v_self->fluxlistcpp->Ldot.infinity + __pyx_v_LdotI);

  /* "cython/flux_wrap.pyx":95
 *         self.fluxlistcpp.Edot.infinity += EdotI
 *         self.fluxlistcpp.Ldot.infinity += LdotI
 *         self.fluxlistcpp.Qdot.infinity += QdotI             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->fluxlistcpp->Qdot.infinity = (__pyx_v_self->fluxlistcpp->Qdot.infinity + __pyx_v_QdotI);

  /* "cython/flux_wrap.pyx":88
 *         self.fluxlistcpp.Qdot.infinity += Qdot
 * 
 *     def add_fluxes(self, double EdotH, double LdotH, double QdotH, double EdotI, double LdotI, double QdotI):             # <<<<<<<<<<<<<<
 *         self.fluxlistcpp.Edot.horizon += EdotH
 *         self.fluxlistcpp.Ldot.horizon += LdotH
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":98
 * 
 *     @property
 *     def energy(self):             # <<<<<<<<<<<<<<
 *         return {
 *             "I": self.fluxlistcpp.Edot.infinity,
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_6energy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_6energy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_6energy___get__(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_6energy___get__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/flux_wrap.pyx":99
 *     @property
 *     def energy(self):
 *         return {             # <<<<<<<<<<<<<<
 *             "I": self.fluxlistcpp.Edot.infinity,
 *             "H": self.fluxlistcpp.Edot.horizon
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cython/flux_wrap.pyx":100
 *     def energy(self):
 *         return {
 *             "I": self.fluxlistcpp.Edot.infinity,             # <<<<<<<<<<<<<<
 *             "H": self.fluxlistcpp.Edot.horizon
 *         }
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->fluxlistcpp->Edot.infinity); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_I, __pyx_t_2) < 0) __PYX_ERR(4, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/flux_wrap.pyx":101
 *         return {
 *             "I": self.fluxlistcpp.Edot.infinity,
 *             "H": self.fluxlistcpp.Edot.horizon             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->fluxlistcpp->Edot.horizon); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_H, __pyx_t_2) < 0) __PYX_ERR(4, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/flux_wrap.pyx":98
 * 
 *     @property
 *     def energy(self):             # <<<<<<<<<<<<<<
 *         return {
 *             "I": self.fluxlistcpp.Edot.infinity,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cybhpt_full.FluxList.energy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":105
 * 
 *     @property
 *     def angularmomentum(self):             # <<<<<<<<<<<<<<
 *         return {
 *             "I": self.fluxlistcpp.Ldot.infinity,
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_15angularmomentum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_15angularmomentum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_15angularmomentum___get__(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_15angularmomentum___get__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/flux_wrap.pyx":106
 *     @property
 *     def angularmomentum(self):
 *         return {             # <<<<<<<<<<<<<<
 *             "I": self.fluxlistcpp.Ldot.infinity,
 *             "H": self.fluxlistcpp.Ldot.horizon
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cython/flux_wrap.pyx":107
 *     def angularmomentum(self):
 *         return {
 *             "I": self.fluxlistcpp.Ldot.infinity,             # <<<<<<<<<<<<<<
 *             "H": self.fluxlistcpp.Ldot.horizon
 *         }
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->fluxlistcpp->Ldot.infinity); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_I, __pyx_t_2) < 0) __PYX_ERR(4, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/flux_wrap.pyx":108
 *         return {
 *             "I": self.fluxlistcpp.Ldot.infinity,
 *             "H": self.fluxlistcpp.Ldot.horizon             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->fluxlistcpp->Ldot.horizon); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_H, __pyx_t_2) < 0) __PYX_ERR(4, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/flux_wrap.pyx":105
 * 
 *     @property
 *     def angularmomentum(self):             # <<<<<<<<<<<<<<
 *         return {
 *             "I": self.fluxlistcpp.Ldot.infinity,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cybhpt_full.FluxList.angularmomentum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":112
 * 
 *     @property
 *     def carterconstant(self):             # <<<<<<<<<<<<<<
 *         return {
 *             "I": self.fluxlistcpp.Qdot.infinity,
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_14carterconstant_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_14carterconstant_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_14carterconstant___get__(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_14carterconstant___get__(struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/flux_wrap.pyx":113
 *     @property
 *     def carterconstant(self):
 *         return {             # <<<<<<<<<<<<<<
 *             "I": self.fluxlistcpp.Qdot.infinity,
 *             "H": self.fluxlistcpp.Qdot.horizon
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cython/flux_wrap.pyx":114
 *     def carterconstant(self):
 *         return {
 *             "I": self.fluxlistcpp.Qdot.infinity,             # <<<<<<<<<<<<<<
 *             "H": self.fluxlistcpp.Qdot.horizon
 *         }
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->fluxlistcpp->Qdot.infinity); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_I, __pyx_t_2) < 0) __PYX_ERR(4, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/flux_wrap.pyx":115
 *         return {
 *             "I": self.fluxlistcpp.Qdot.infinity,
 *             "H": self.fluxlistcpp.Qdot.horizon             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->fluxlistcpp->Qdot.horizon); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_H, __pyx_t_2) < 0) __PYX_ERR(4, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/flux_wrap.pyx":112
 * 
 *     @property
 *     def carterconstant(self):             # <<<<<<<<<<<<<<
 *         return {
 *             "I": self.fluxlistcpp.Qdot.infinity,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cybhpt_full.FluxList.carterconstant.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_18__reduce_cython__(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.FluxList.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_8FluxList_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_8FluxList_20__setstate_cython__(((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_8FluxList_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.FluxList.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/flux_wrap.pyx":119
 * 
 * 
 * def flux(int s, KerrGeodesic geo, TeukolskyMode teuk):             # <<<<<<<<<<<<<<
 *     cdef FluxListCPP fluxescpp = flux_mode(s, dereference(geo.geocpp), dereference(teuk.teukcpp), include_minus_m = 0)
 *     fluxes = FluxList()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_41flux(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_41flux = {"flux", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_41flux, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_41flux(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_s;
  struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo = 0;
  struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_teuk = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flux (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_geo,&__pyx_n_s_teuk,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flux", 1, 3, 3, 1); __PYX_ERR(4, 119, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_teuk)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flux", 1, 3, 3, 2); __PYX_ERR(4, 119, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flux") < 0)) __PYX_ERR(4, 119, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_s = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_s == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 119, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)values[1]);
    __pyx_v_teuk = ((struct __pyx_obj_11cybhpt_full_TeukolskyMode *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flux", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 119, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_11cybhpt_full_KerrGeodesic, 1, "geo", 0))) __PYX_ERR(4, 119, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_teuk), __pyx_ptype_11cybhpt_full_TeukolskyMode, 1, "teuk", 0))) __PYX_ERR(4, 119, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_40flux(__pyx_self, __pyx_v_s, __pyx_v_geo, __pyx_v_teuk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_40flux(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_s, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo, struct __pyx_obj_11cybhpt_full_TeukolskyMode *__pyx_v_teuk) {
  FluxList __pyx_v_fluxescpp;
  struct __pyx_obj_11cybhpt_full_FluxList *__pyx_v_fluxes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flux", 0);

  /* "cython/flux_wrap.pyx":120
 * 
 * def flux(int s, KerrGeodesic geo, TeukolskyMode teuk):
 *     cdef FluxListCPP fluxescpp = flux_mode(s, dereference(geo.geocpp), dereference(teuk.teukcpp), include_minus_m = 0)             # <<<<<<<<<<<<<<
 *     fluxes = FluxList()
 *     fluxes.set_fluxes(fluxescpp)
 */
  __pyx_v_fluxescpp = flux_mode(__pyx_v_s, (*__pyx_v_geo->geocpp), (*__pyx_v_teuk->teukcpp), 0);

  /* "cython/flux_wrap.pyx":121
 * def flux(int s, KerrGeodesic geo, TeukolskyMode teuk):
 *     cdef FluxListCPP fluxescpp = flux_mode(s, dereference(geo.geocpp), dereference(teuk.teukcpp), include_minus_m = 0)
 *     fluxes = FluxList()             # <<<<<<<<<<<<<<
 *     fluxes.set_fluxes(fluxescpp)
 *     return fluxes
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11cybhpt_full_FluxList)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fluxes = ((struct __pyx_obj_11cybhpt_full_FluxList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cython/flux_wrap.pyx":122
 *     cdef FluxListCPP fluxescpp = flux_mode(s, dereference(geo.geocpp), dereference(teuk.teukcpp), include_minus_m = 0)
 *     fluxes = FluxList()
 *     fluxes.set_fluxes(fluxescpp)             # <<<<<<<<<<<<<<
 *     return fluxes
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_11cybhpt_full_FluxList *)__pyx_v_fluxes->__pyx_vtab)->set_fluxes(__pyx_v_fluxes, __pyx_v_fluxescpp); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/flux_wrap.pyx":123
 *     fluxes = FluxList()
 *     fluxes.set_fluxes(fluxescpp)
 *     return fluxes             # <<<<<<<<<<<<<<
 * 
 * # def full_flux_parallel_l_py(int s, KerrGeodesic geo, int modeMax, unicode wdir):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_fluxes));
  __pyx_r = ((PyObject *)__pyx_v_fluxes);
  goto __pyx_L0;

  /* "cython/flux_wrap.pyx":119
 * 
 * 
 * def flux(int s, KerrGeodesic geo, TeukolskyMode teuk):             # <<<<<<<<<<<<<<
 *     cdef FluxListCPP fluxescpp = flux_mode(s, dereference(geo.geocpp), dereference(teuk.teukcpp), include_minus_m = 0)
 *     fluxes = FluxList()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fluxes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":39
 * 
 * 
 * def metric_coefficients_cython_ORG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_ORG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_43metric_coefficients_cython_ORG(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_43metric_coefficients_cython_ORG = {"metric_coefficients_cython_ORG", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_43metric_coefficients_cython_ORG, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_43metric_coefficients_cython_ORG(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ai;
  int __pyx_v_bi;
  int __pyx_v_nt;
  int __pyx_v_nr;
  int __pyx_v_nz;
  int __pyx_v_nphi;
  double __pyx_v_a;
  double __pyx_v_r;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("metric_coefficients_cython_ORG (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ai,&__pyx_n_s_bi,&__pyx_n_s_nt,&__pyx_n_s_nr,&__pyx_n_s_nz,&__pyx_n_s_nphi,&__pyx_n_s_a,&__pyx_n_s_r,&__pyx_n_s_z,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ai)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_ORG", 1, 9, 9, 1); __PYX_ERR(5, 39, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_ORG", 1, 9, 9, 2); __PYX_ERR(5, 39, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_ORG", 1, 9, 9, 3); __PYX_ERR(5, 39, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_ORG", 1, 9, 9, 4); __PYX_ERR(5, 39, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nphi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_ORG", 1, 9, 9, 5); __PYX_ERR(5, 39, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_ORG", 1, 9, 9, 6); __PYX_ERR(5, 39, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_ORG", 1, 9, 9, 7); __PYX_ERR(5, 39, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_ORG", 1, 9, 9, 8); __PYX_ERR(5, 39, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "metric_coefficients_cython_ORG") < 0)) __PYX_ERR(5, 39, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_ai = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_ai == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L3_error)
    __pyx_v_bi = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_bi == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L3_error)
    __pyx_v_nt = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nt == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L3_error)
    __pyx_v_nr = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nr == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L3_error)
    __pyx_v_nz = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_nz == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L3_error)
    __pyx_v_nphi = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nphi == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_ORG", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.metric_coefficients_cython_ORG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_42metric_coefficients_cython_ORG(__pyx_self, __pyx_v_ai, __pyx_v_bi, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_nphi, __pyx_v_a, __pyx_v_r, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_42metric_coefficients_cython_ORG(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ai, int __pyx_v_bi, int __pyx_v_nt, int __pyx_v_nr, int __pyx_v_nz, int __pyx_v_nphi, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("metric_coefficients_cython_ORG", 0);

  /* "cython/redshift_wrap.pyx":40
 * 
 * def metric_coefficients_cython_ORG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):
 *     return metric_coefficient_ORG(ai, bi, nt, nr, nz, nphi, a, r, z)             # <<<<<<<<<<<<<<
 * 
 * def metric_coefficients_cython_IRG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(metric_coefficient_ORG(__pyx_v_ai, __pyx_v_bi, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_nphi, __pyx_v_a, __pyx_v_r, __pyx_v_z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/redshift_wrap.pyx":39
 * 
 * 
 * def metric_coefficients_cython_ORG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_ORG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.metric_coefficients_cython_ORG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":42
 *     return metric_coefficient_ORG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 * def metric_coefficients_cython_IRG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_IRG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_45metric_coefficients_cython_IRG(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_45metric_coefficients_cython_IRG = {"metric_coefficients_cython_IRG", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_45metric_coefficients_cython_IRG, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_45metric_coefficients_cython_IRG(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ai;
  int __pyx_v_bi;
  int __pyx_v_nt;
  int __pyx_v_nr;
  int __pyx_v_nz;
  int __pyx_v_nphi;
  double __pyx_v_a;
  double __pyx_v_r;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("metric_coefficients_cython_IRG (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ai,&__pyx_n_s_bi,&__pyx_n_s_nt,&__pyx_n_s_nr,&__pyx_n_s_nz,&__pyx_n_s_nphi,&__pyx_n_s_a,&__pyx_n_s_r,&__pyx_n_s_z,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ai)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_IRG", 1, 9, 9, 1); __PYX_ERR(5, 42, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_IRG", 1, 9, 9, 2); __PYX_ERR(5, 42, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_IRG", 1, 9, 9, 3); __PYX_ERR(5, 42, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_IRG", 1, 9, 9, 4); __PYX_ERR(5, 42, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nphi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_IRG", 1, 9, 9, 5); __PYX_ERR(5, 42, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_IRG", 1, 9, 9, 6); __PYX_ERR(5, 42, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_IRG", 1, 9, 9, 7); __PYX_ERR(5, 42, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_IRG", 1, 9, 9, 8); __PYX_ERR(5, 42, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "metric_coefficients_cython_IRG") < 0)) __PYX_ERR(5, 42, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_ai = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_ai == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L3_error)
    __pyx_v_bi = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_bi == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L3_error)
    __pyx_v_nt = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nt == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L3_error)
    __pyx_v_nr = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nr == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L3_error)
    __pyx_v_nz = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_nz == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L3_error)
    __pyx_v_nphi = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nphi == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 42, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("metric_coefficients_cython_IRG", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 42, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.metric_coefficients_cython_IRG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_44metric_coefficients_cython_IRG(__pyx_self, __pyx_v_ai, __pyx_v_bi, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_nphi, __pyx_v_a, __pyx_v_r, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_44metric_coefficients_cython_IRG(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ai, int __pyx_v_bi, int __pyx_v_nt, int __pyx_v_nr, int __pyx_v_nz, int __pyx_v_nphi, double __pyx_v_a, double __pyx_v_r, double __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("metric_coefficients_cython_IRG", 0);

  /* "cython/redshift_wrap.pyx":43
 * 
 * def metric_coefficients_cython_IRG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):
 *     return metric_coefficient_IRG(ai, bi, nt, nr, nz, nphi, a, r, z)             # <<<<<<<<<<<<<<
 * 
 * def circular_redshift(unicode filename, unicode gauge, int lmax, KerrGeodesic geo):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(metric_coefficient_IRG(__pyx_v_ai, __pyx_v_bi, __pyx_v_nt, __pyx_v_nr, __pyx_v_nz, __pyx_v_nphi, __pyx_v_a, __pyx_v_r, __pyx_v_z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/redshift_wrap.pyx":42
 *     return metric_coefficient_ORG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 * def metric_coefficients_cython_IRG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_IRG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.metric_coefficients_cython_IRG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":45
 *     return metric_coefficient_IRG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 * def circular_redshift(unicode filename, unicode gauge, int lmax, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *     return redshift_circular(filename.encode(), str_to_gauge(gauge), lmax, dereference(geo.geocpp))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_47circular_redshift(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_47circular_redshift = {"circular_redshift", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_47circular_redshift, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_47circular_redshift(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_gauge = 0;
  int __pyx_v_lmax;
  struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("circular_redshift (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_gauge,&__pyx_n_s_lmax,&__pyx_n_s_geo,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gauge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("circular_redshift", 1, 4, 4, 1); __PYX_ERR(5, 45, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("circular_redshift", 1, 4, 4, 2); __PYX_ERR(5, 45, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("circular_redshift", 1, 4, 4, 3); __PYX_ERR(5, 45, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "circular_redshift") < 0)) __PYX_ERR(5, 45, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_gauge = ((PyObject*)values[1]);
    __pyx_v_lmax = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_lmax == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 45, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("circular_redshift", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 45, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.circular_redshift", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyUnicode_Type), 1, "filename", 1))) __PYX_ERR(5, 45, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gauge), (&PyUnicode_Type), 1, "gauge", 1))) __PYX_ERR(5, 45, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_11cybhpt_full_KerrGeodesic, 1, "geo", 0))) __PYX_ERR(5, 45, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_46circular_redshift(__pyx_self, __pyx_v_filename, __pyx_v_gauge, __pyx_v_lmax, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_46circular_redshift(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_gauge, int __pyx_v_lmax, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  enum Gauge __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("circular_redshift", 0);

  /* "cython/redshift_wrap.pyx":46
 * 
 * def circular_redshift(unicode filename, unicode gauge, int lmax, KerrGeodesic geo):
 *     return redshift_circular(filename.encode(), str_to_gauge(gauge), lmax, dereference(geo.geocpp))             # <<<<<<<<<<<<<<
 * 
 * def run_tests():
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_filename == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(5, 46, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_filename, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_f_11cybhpt_full_str_to_gauge(__pyx_v_gauge); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 46, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(redshift_circular(__pyx_t_2, __pyx_t_3, __pyx_v_lmax, (*__pyx_v_geo->geocpp))); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/redshift_wrap.pyx":45
 *     return metric_coefficient_IRG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 * def circular_redshift(unicode filename, unicode gauge, int lmax, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *     return redshift_circular(filename.encode(), str_to_gauge(gauge), lmax, dereference(geo.geocpp))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.circular_redshift", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":48
 *     return redshift_circular(filename.encode(), str_to_gauge(gauge), lmax, dereference(geo.geocpp))
 * 
 * def run_tests():             # <<<<<<<<<<<<<<
 *     run_unit_tests()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_49run_tests(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_49run_tests = {"run_tests", (PyCFunction)__pyx_pw_11cybhpt_full_49run_tests, METH_NOARGS, 0};
static PyObject *__pyx_pw_11cybhpt_full_49run_tests(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_tests (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_48run_tests(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_48run_tests(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_tests", 0);

  /* "cython/redshift_wrap.pyx":49
 * 
 * def run_tests():
 *     run_unit_tests()             # <<<<<<<<<<<<<<
 * 
 * cdef class RedshiftCoefficients:
 */
  run_unit_tests();

  /* "cython/redshift_wrap.pyx":48
 *     return redshift_circular(filename.encode(), str_to_gauge(gauge), lmax, dereference(geo.geocpp))
 * 
 * def run_tests():             # <<<<<<<<<<<<<<
 *     run_unit_tests()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":54
 *     cdef RedshiftCoefficientsCPP *huucpp
 * 
 *     def __cinit__(self, unicode gauge, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *         self.huucpp = new RedshiftCoefficientsCPP(str_to_gauge(gauge), dereference(geo.geocpp))
 * 
 */

/* Python wrapper */
static int __pyx_pw_11cybhpt_full_20RedshiftCoefficients_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11cybhpt_full_20RedshiftCoefficients_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gauge = 0;
  struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gauge,&__pyx_n_s_geo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gauge)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(5, 54, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 54, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_gauge = ((PyObject*)values[0]);
    __pyx_v_geo = ((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 54, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RedshiftCoefficients.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gauge), (&PyUnicode_Type), 1, "gauge", 1))) __PYX_ERR(5, 54, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_11cybhpt_full_KerrGeodesic, 1, "geo", 0))) __PYX_ERR(5, 54, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cybhpt_full_20RedshiftCoefficients___cinit__(((struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *)__pyx_v_self), __pyx_v_gauge, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11cybhpt_full_20RedshiftCoefficients___cinit__(struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self, PyObject *__pyx_v_gauge, struct __pyx_obj_11cybhpt_full_KerrGeodesic *__pyx_v_geo) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  enum Gauge __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cython/redshift_wrap.pyx":55
 * 
 *     def __cinit__(self, unicode gauge, KerrGeodesic geo):
 *         self.huucpp = new RedshiftCoefficientsCPP(str_to_gauge(gauge), dereference(geo.geocpp))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __pyx_f_11cybhpt_full_str_to_gauge(__pyx_v_gauge); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 55, __pyx_L1_error)
  __pyx_v_self->huucpp = new RedshiftCoefficients(__pyx_t_1, (*__pyx_v_geo->geocpp));

  /* "cython/redshift_wrap.pyx":54
 *     cdef RedshiftCoefficientsCPP *huucpp
 * 
 *     def __cinit__(self, unicode gauge, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *         self.huucpp = new RedshiftCoefficientsCPP(str_to_gauge(gauge), dereference(geo.geocpp))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cybhpt_full.RedshiftCoefficients.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":57
 *         self.huucpp = new RedshiftCoefficientsCPP(str_to_gauge(gauge), dereference(geo.geocpp))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.huucpp
 * 
 */

/* Python wrapper */
static void __pyx_pw_11cybhpt_full_20RedshiftCoefficients_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11cybhpt_full_20RedshiftCoefficients_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11cybhpt_full_20RedshiftCoefficients_2__dealloc__(((struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11cybhpt_full_20RedshiftCoefficients_2__dealloc__(struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cython/redshift_wrap.pyx":58
 * 
 *     def __dealloc__(self):
 *         del self.huucpp             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, int Ni, int ai, int bi, int ci, int di, int jr, int jz):
 */
  delete __pyx_v_self->huucpp;

  /* "cython/redshift_wrap.pyx":57
 *         self.huucpp = new RedshiftCoefficientsCPP(str_to_gauge(gauge), dereference(geo.geocpp))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.huucpp
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/redshift_wrap.pyx":60
 *         del self.huucpp
 * 
 *     def __call__(self, int Ni, int ai, int bi, int ci, int di, int jr, int jz):             # <<<<<<<<<<<<<<
 *         return self.huucpp.getComponent(Ni, ai, bi, ci, di, jr, jz)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_20RedshiftCoefficients_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_20RedshiftCoefficients_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_Ni;
  int __pyx_v_ai;
  int __pyx_v_bi;
  int __pyx_v_ci;
  int __pyx_v_di;
  int __pyx_v_jr;
  int __pyx_v_jz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Ni,&__pyx_n_s_ai,&__pyx_n_s_bi,&__pyx_n_s_ci,&__pyx_n_s_di,&__pyx_n_s_jr,&__pyx_n_s_jz,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ni)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ai)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 7, 7, 1); __PYX_ERR(5, 60, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 7, 7, 2); __PYX_ERR(5, 60, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ci)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 7, 7, 3); __PYX_ERR(5, 60, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_di)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 7, 7, 4); __PYX_ERR(5, 60, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 7, 7, 5); __PYX_ERR(5, 60, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 7, 7, 6); __PYX_ERR(5, 60, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(5, 60, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_Ni = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_Ni == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 60, __pyx_L3_error)
    __pyx_v_ai = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_ai == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 60, __pyx_L3_error)
    __pyx_v_bi = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_bi == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 60, __pyx_L3_error)
    __pyx_v_ci = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_ci == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 60, __pyx_L3_error)
    __pyx_v_di = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_di == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 60, __pyx_L3_error)
    __pyx_v_jr = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_jr == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 60, __pyx_L3_error)
    __pyx_v_jz = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_jz == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 60, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 60, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.RedshiftCoefficients.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_20RedshiftCoefficients_4__call__(((struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *)__pyx_v_self), __pyx_v_Ni, __pyx_v_ai, __pyx_v_bi, __pyx_v_ci, __pyx_v_di, __pyx_v_jr, __pyx_v_jz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_20RedshiftCoefficients_4__call__(struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self, int __pyx_v_Ni, int __pyx_v_ai, int __pyx_v_bi, int __pyx_v_ci, int __pyx_v_di, int __pyx_v_jr, int __pyx_v_jz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "cython/redshift_wrap.pyx":61
 * 
 *     def __call__(self, int Ni, int ai, int bi, int ci, int di, int jr, int jz):
 *         return self.huucpp.getComponent(Ni, ai, bi, ci, di, jr, jz)             # <<<<<<<<<<<<<<
 * 
 * cdef class SphericalHarmonicCoupling:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_complex_to_py_double(__pyx_v_self->huucpp->getComponent(__pyx_v_Ni, __pyx_v_ai, __pyx_v_bi, __pyx_v_ci, __pyx_v_di, __pyx_v_jr, __pyx_v_jz)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/redshift_wrap.pyx":60
 *         del self.huucpp
 * 
 *     def __call__(self, int Ni, int ai, int bi, int ci, int di, int jr, int jz):             # <<<<<<<<<<<<<<
 *         return self.huucpp.getComponent(Ni, ai, bi, ci, di, jr, jz)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RedshiftCoefficients.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_20RedshiftCoefficients_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_20RedshiftCoefficients_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_20RedshiftCoefficients_6__reduce_cython__(((struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_20RedshiftCoefficients_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RedshiftCoefficients.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_20RedshiftCoefficients_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_20RedshiftCoefficients_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_20RedshiftCoefficients_8__setstate_cython__(((struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_20RedshiftCoefficients_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_RedshiftCoefficients *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.RedshiftCoefficients.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":66
 *     cdef SphericalHarmonicCouplingCPP *cpp
 * 
 *     def __cinit__(self, int lmax, int m):             # <<<<<<<<<<<<<<
 *         self.cpp = new SphericalHarmonicCouplingCPP(lmax, m)
 *         self.cpp.generateCouplings()
 */

/* Python wrapper */
static int __pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_lmax;
  int __pyx_v_m;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lmax,&__pyx_n_s_m,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(5, 66, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 66, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lmax = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_lmax == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 66, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 66, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 66, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.SphericalHarmonicCoupling.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling___cinit__(((struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *)__pyx_v_self), __pyx_v_lmax, __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling___cinit__(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self, int __pyx_v_lmax, int __pyx_v_m) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cython/redshift_wrap.pyx":67
 * 
 *     def __cinit__(self, int lmax, int m):
 *         self.cpp = new SphericalHarmonicCouplingCPP(lmax, m)             # <<<<<<<<<<<<<<
 *         self.cpp.generateCouplings()
 * 
 */
  __pyx_v_self->cpp = new SphericalHarmonicCoupling(__pyx_v_lmax, __pyx_v_m);

  /* "cython/redshift_wrap.pyx":68
 *     def __cinit__(self, int lmax, int m):
 *         self.cpp = new SphericalHarmonicCouplingCPP(lmax, m)
 *         self.cpp.generateCouplings()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->cpp->generateCouplings();

  /* "cython/redshift_wrap.pyx":66
 *     cdef SphericalHarmonicCouplingCPP *cpp
 * 
 *     def __cinit__(self, int lmax, int m):             # <<<<<<<<<<<<<<
 *         self.cpp = new SphericalHarmonicCouplingCPP(lmax, m)
 *         self.cpp.generateCouplings()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":70
 *         self.cpp.generateCouplings()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.cpp
 * 
 */

/* Python wrapper */
static void __pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_2__dealloc__(((struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_2__dealloc__(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cython/redshift_wrap.pyx":71
 * 
 *     def __dealloc__(self):
 *         del self.cpp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->cpp;

  /* "cython/redshift_wrap.pyx":70
 *         self.cpp.generateCouplings()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.cpp
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cython/redshift_wrap.pyx":74
 * 
 *     @property
 *     def azimuthalmode(self):             # <<<<<<<<<<<<<<
 *         return self.cpp.getAzimuthalModeNumber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_13azimuthalmode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_13azimuthalmode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_13azimuthalmode___get__(((struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_13azimuthalmode___get__(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cython/redshift_wrap.pyx":75
 *     @property
 *     def azimuthalmode(self):
 *         return self.cpp.getAzimuthalModeNumber()             # <<<<<<<<<<<<<<
 * 
 *     def zcouplingcoefficient(self, int n, int i, int l):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->cpp->getAzimuthalModeNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/redshift_wrap.pyx":74
 * 
 *     @property
 *     def azimuthalmode(self):             # <<<<<<<<<<<<<<
 *         return self.cpp.getAzimuthalModeNumber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.SphericalHarmonicCoupling.azimuthalmode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":77
 *         return self.cpp.getAzimuthalModeNumber()
 * 
 *     def zcouplingcoefficient(self, int n, int i, int l):             # <<<<<<<<<<<<<<
 *         return self.cpp.getZCouplingCoefficient(n, i, l)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_5zcouplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_5zcouplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_n;
  int __pyx_v_i;
  int __pyx_v_l;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zcouplingcoefficient (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_i,&__pyx_n_s_l,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zcouplingcoefficient", 1, 3, 3, 1); __PYX_ERR(5, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zcouplingcoefficient", 1, 3, 3, 2); __PYX_ERR(5, 77, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zcouplingcoefficient") < 0)) __PYX_ERR(5, 77, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_n = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 77, __pyx_L3_error)
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 77, __pyx_L3_error)
    __pyx_v_l = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_l == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 77, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zcouplingcoefficient", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 77, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.SphericalHarmonicCoupling.zcouplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_4zcouplingcoefficient(((struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *)__pyx_v_self), __pyx_v_n, __pyx_v_i, __pyx_v_l);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_4zcouplingcoefficient(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self, int __pyx_v_n, int __pyx_v_i, int __pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zcouplingcoefficient", 0);

  /* "cython/redshift_wrap.pyx":78
 * 
 *     def zcouplingcoefficient(self, int n, int i, int l):
 *         return self.cpp.getZCouplingCoefficient(n, i, l)             # <<<<<<<<<<<<<<
 * 
 *     def dzcouplingcoefficient(self, int n, int i, int l):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->cpp->getZCouplingCoefficient(__pyx_v_n, __pyx_v_i, __pyx_v_l)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/redshift_wrap.pyx":77
 *         return self.cpp.getAzimuthalModeNumber()
 * 
 *     def zcouplingcoefficient(self, int n, int i, int l):             # <<<<<<<<<<<<<<
 *         return self.cpp.getZCouplingCoefficient(n, i, l)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.SphericalHarmonicCoupling.zcouplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython/redshift_wrap.pyx":80
 *         return self.cpp.getZCouplingCoefficient(n, i, l)
 * 
 *     def dzcouplingcoefficient(self, int n, int i, int l):             # <<<<<<<<<<<<<<
 *         return self.cpp.getDerivativeCouplingCoefficient(n, i, l)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_7dzcouplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_7dzcouplingcoefficient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_n;
  int __pyx_v_i;
  int __pyx_v_l;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dzcouplingcoefficient (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_i,&__pyx_n_s_l,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dzcouplingcoefficient", 1, 3, 3, 1); __PYX_ERR(5, 80, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dzcouplingcoefficient", 1, 3, 3, 2); __PYX_ERR(5, 80, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dzcouplingcoefficient") < 0)) __PYX_ERR(5, 80, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_n = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 80, __pyx_L3_error)
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 80, __pyx_L3_error)
    __pyx_v_l = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_l == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 80, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dzcouplingcoefficient", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 80, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.SphericalHarmonicCoupling.dzcouplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_6dzcouplingcoefficient(((struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *)__pyx_v_self), __pyx_v_n, __pyx_v_i, __pyx_v_l);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_6dzcouplingcoefficient(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self, int __pyx_v_n, int __pyx_v_i, int __pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dzcouplingcoefficient", 0);

  /* "cython/redshift_wrap.pyx":81
 * 
 *     def dzcouplingcoefficient(self, int n, int i, int l):
 *         return self.cpp.getDerivativeCouplingCoefficient(n, i, l)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->cpp->getDerivativeCouplingCoefficient(__pyx_v_n, __pyx_v_i, __pyx_v_l)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython/redshift_wrap.pyx":80
 *         return self.cpp.getZCouplingCoefficient(n, i, l)
 * 
 *     def dzcouplingcoefficient(self, int n, int i, int l):             # <<<<<<<<<<<<<<
 *         return self.cpp.getDerivativeCouplingCoefficient(n, i, l)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.SphericalHarmonicCoupling.dzcouplingcoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_8__reduce_cython__(((struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.SphericalHarmonicCoupling.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_10__setstate_cython__(((struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_25SphericalHarmonicCoupling_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cybhpt_full.SphericalHarmonicCoupling.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_MetricModeGenerator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cybhpt_full_51__pyx_unpickle_MetricModeGenerator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11cybhpt_full_51__pyx_unpickle_MetricModeGenerator = {"__pyx_unpickle_MetricModeGenerator", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_51__pyx_unpickle_MetricModeGenerator, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11cybhpt_full_51__pyx_unpickle_MetricModeGenerator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_MetricModeGenerator (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MetricModeGenerator", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MetricModeGenerator", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_MetricModeGenerator") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MetricModeGenerator", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cybhpt_full.__pyx_unpickle_MetricModeGenerator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11cybhpt_full_50__pyx_unpickle_MetricModeGenerator(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cybhpt_full_50__pyx_unpickle_MetricModeGenerator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MetricModeGenerator", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xfc373ef, 0x4e7c6fa, 0x0ef8744):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xfc373ef, 0x4e7c6fa, 0x0ef8744) = (basis, gauge_cpp, gauge_str))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__20, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xfc373ef, 0x4e7c6fa, 0x0ef8744):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xfc373ef, 0x4e7c6fa, 0x0ef8744) = (basis, gauge_cpp, gauge_str))" % __pyx_checksum)
 *     __pyx_result = MetricModeGenerator.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xfc373ef, 0x4e7c6fa, 0x0ef8744):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xfc373ef, 0x4e7c6fa, 0x0ef8744) = (basis, gauge_cpp, gauge_str))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = MetricModeGenerator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xfc373ef, 0x4e7c6fa, 0x0ef8744):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xfc373ef, 0x4e7c6fa, 0x0ef8744) = (basis, gauge_cpp, gauge_str))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xfc373ef, 0x4e7c6fa, 0x0ef8744) = (basis, gauge_cpp, gauge_str))" % __pyx_checksum)
 *     __pyx_result = MetricModeGenerator.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MetricModeGenerator__set_state(<MetricModeGenerator> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_11cybhpt_full_MetricModeGenerator), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xfc373ef, 0x4e7c6fa, 0x0ef8744) = (basis, gauge_cpp, gauge_str))" % __pyx_checksum)
 *     __pyx_result = MetricModeGenerator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MetricModeGenerator__set_state(<MetricModeGenerator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = MetricModeGenerator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MetricModeGenerator__set_state(<MetricModeGenerator> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_MetricModeGenerator__set_state(MetricModeGenerator __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_11cybhpt_full___pyx_unpickle_MetricModeGenerator__set_state(((struct __pyx_obj_11cybhpt_full_MetricModeGenerator *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xfc373ef, 0x4e7c6fa, 0x0ef8744) = (basis, gauge_cpp, gauge_str))" % __pyx_checksum)
 *     __pyx_result = MetricModeGenerator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MetricModeGenerator__set_state(<MetricModeGenerator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MetricModeGenerator__set_state(<MetricModeGenerator> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_MetricModeGenerator__set_state(MetricModeGenerator __pyx_result, tuple __pyx_state):
 *     __pyx_result.basis = __pyx_state[0]; __pyx_result.gauge_cpp = __pyx_state[1]; __pyx_result.gauge_str = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MetricModeGenerator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cybhpt_full.__pyx_unpickle_MetricModeGenerator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_MetricModeGenerator__set_state(<MetricModeGenerator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MetricModeGenerator__set_state(MetricModeGenerator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.basis = __pyx_state[0]; __pyx_result.gauge_cpp = __pyx_state[1]; __pyx_result.gauge_str = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_11cybhpt_full___pyx_unpickle_MetricModeGenerator__set_state(struct __pyx_obj_11cybhpt_full_MetricModeGenerator *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum Gauge __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MetricModeGenerator__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_MetricModeGenerator__set_state(MetricModeGenerator __pyx_result, tuple __pyx_state):
 *     __pyx_result.basis = __pyx_state[0]; __pyx_result.gauge_cpp = __pyx_state[1]; __pyx_result.gauge_str = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->basis);
  __Pyx_DECREF(__pyx_v___pyx_result->basis);
  __pyx_v___pyx_result->basis = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum Gauge)__Pyx_PyInt_As_enum__Gauge(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->gauge_cpp = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->gauge_str);
  __Pyx_DECREF(__pyx_v___pyx_result->gauge_str);
  __pyx_v___pyx_result->gauge_str = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_MetricModeGenerator__set_state(MetricModeGenerator __pyx_result, tuple __pyx_state):
 *     __pyx_result.basis = __pyx_state[0]; __pyx_result.gauge_cpp = __pyx_state[1]; __pyx_result.gauge_str = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.basis = __pyx_state[0]; __pyx_result.gauge_cpp = __pyx_state[1]; __pyx_result.gauge_str = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_MetricModeGenerator__set_state(MetricModeGenerator __pyx_result, tuple __pyx_state):
 *     __pyx_result.basis = __pyx_state[0]; __pyx_result.gauge_cpp = __pyx_state[1]; __pyx_result.gauge_str = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_MetricModeGenerator__set_state(<MetricModeGenerator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MetricModeGenerator__set_state(MetricModeGenerator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.basis = __pyx_state[0]; __pyx_result.gauge_cpp = __pyx_state[1]; __pyx_result.gauge_str = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cybhpt_full.__pyx_unpickle_MetricModeGenerator__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":736
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":739
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":742
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":745
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":748
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":752
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":754
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":929
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":930
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":931
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":929
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":933
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":934
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":935
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":936
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":935
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":937
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":933
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":941
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":942
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":943
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(6, 943, __pyx_L3_error)

      /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":942
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":944
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(6, 944, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":945
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 945, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(6, 945, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":942
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":941
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":947
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":948
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":949
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(6, 949, __pyx_L3_error)

      /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":948
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":950
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(6, 950, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":951
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 951, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(6, 951, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":948
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":947
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":953
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":954
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":955
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(6, 955, __pyx_L3_error)

      /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":954
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":956
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(6, 956, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":957
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 957, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(6, 957, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":954
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":953
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":967
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":979
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":967
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":982
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":994
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":982
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":997
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":1004
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":997
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":1007
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":1011
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":1007
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":1014
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":1018
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":1014
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "complex.from_py":220
 * 
 * @cname("__pyx_convert_complex_from_py_double")
 * cdef std_complex[X] __pyx_convert_complex_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef double complex z = o
 *     return std_complex[X](<X>z.real, <X>z.imag)
 */

static std::complex<double>  __pyx_convert_complex_from_py_double(PyObject *__pyx_v_o) {
  __pyx_t_double_complex __pyx_v_z;
  std::complex<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  std::complex<double>  __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_complex_from_py_double", 0);

  /* "complex.from_py":221
 * @cname("__pyx_convert_complex_from_py_double")
 * cdef std_complex[X] __pyx_convert_complex_from_py_double(object o) except *:
 *     cdef double complex z = o             # <<<<<<<<<<<<<<
 *     return std_complex[X](<X>z.real, <X>z.imag)
 * 
 */
  __pyx_t_1 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_v_o); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 221, __pyx_L1_error)
  __pyx_v_z = __pyx_t_1;

  /* "complex.from_py":222
 * cdef std_complex[X] __pyx_convert_complex_from_py_double(object o) except *:
 *     cdef double complex z = o
 *     return std_complex[X](<X>z.real, <X>z.imag)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::complex<double> (((double)__Pyx_CREAL(__pyx_v_z)), ((double)__Pyx_CIMAG(__pyx_v_z)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 222, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "complex.from_py":220
 * 
 * @cname("__pyx_convert_complex_from_py_double")
 * cdef std_complex[X] __pyx_convert_complex_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef double complex z = o
 *     return std_complex[X](<X>z.real, <X>z.imag)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("complex.from_py.__pyx_convert_complex_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "complex.to_py":233
 * 
 * @cname("__pyx_convert_complex_to_py_double")
 * cdef object __pyx_convert_complex_to_py_double(const std_complex[X]& z):             # <<<<<<<<<<<<<<
 *     cdef double complex tmp
 *     tmp.real = <double>z.real()
 */

static PyObject *__pyx_convert_complex_to_py_double(std::complex<double>  const &__pyx_v_z) {
  __pyx_t_double_complex __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_complex_to_py_double", 0);

  /* "complex.to_py":235
 * cdef object __pyx_convert_complex_to_py_double(const std_complex[X]& z):
 *     cdef double complex tmp
 *     tmp.real = <double>z.real()             # <<<<<<<<<<<<<<
 *     tmp.imag = <double>z.imag()
 *     return tmp
 */
  __Pyx_SET_CREAL(__pyx_v_tmp, ((double)__pyx_v_z.real()));

  /* "complex.to_py":236
 *     cdef double complex tmp
 *     tmp.real = <double>z.real()
 *     tmp.imag = <double>z.imag()             # <<<<<<<<<<<<<<
 *     return tmp
 */
  __Pyx_SET_CIMAG(__pyx_v_tmp, ((double)__pyx_v_z.imag()));

  /* "complex.to_py":237
 *     tmp.real = <double>z.real()
 *     tmp.imag = <double>z.imag()
 *     return tmp             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyComplex_FromComplex(__pyx_v_tmp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "complex.to_py":233
 * 
 * @cname("__pyx_convert_complex_to_py_double")
 * cdef object __pyx_convert_complex_to_py_double(const std_complex[X]& z):             # <<<<<<<<<<<<<<
 *     cdef double complex tmp
 *     tmp.real = <double>z.real()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("complex.to_py.__pyx_convert_complex_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___(const std::vector<std::complex<double> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_complex_to_py_double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e___(const std::vector<std::vector<std::complex<double> > >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_complex_3c_double_3e___((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e____3e___(const std::vector<std::vector<std::vector<std::complex<double> > > >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e____3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e____3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e___((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e____3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_complex_3c_double_3e____3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_11cybhpt_full_KerrGeodesic __pyx_vtable_11cybhpt_full_KerrGeodesic;

static PyObject *__pyx_tp_new_11cybhpt_full_KerrGeodesic(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11cybhpt_full_KerrGeodesic *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11cybhpt_full_KerrGeodesic *)o);
  p->__pyx_vtab = __pyx_vtabptr_11cybhpt_full_KerrGeodesic;
  return o;
}

static void __pyx_tp_dealloc_11cybhpt_full_KerrGeodesic(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_11cybhpt_full_12KerrGeodesic_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_nsamples(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_8nsamples_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_blackholespin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_13blackholespin_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_semilatusrectum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_15semilatusrectum_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_eccentricity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_12eccentricity_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_inclination(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_11inclination_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_orbitalenergy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_13orbitalenergy_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_orbitalangularmomentum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_22orbitalangularmomentum_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_carterconstant(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_14carterconstant_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_radialroots(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_11radialroots_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_polarroots(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_10polarroots_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_minofrequencies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_15minofrequencies_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_timefrequencies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_15timefrequencies_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_frequencies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_11frequencies_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_12KerrGeodesic_carterfrequencies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_12KerrGeodesic_17carterfrequencies_1__get__(o);
}

static PyMethodDef __pyx_methods_11cybhpt_full_KerrGeodesic[] = {
  {"mode_time_frequency", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_5mode_time_frequency, METH_O, 0},
  {"mode_carter_frequency", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_7mode_carter_frequency, METH_O, 0},
  {"time_position", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_9time_position, METH_O, 0},
  {"radial_position", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_11radial_position, METH_O, 0},
  {"polar_position", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_13polar_position, METH_O, 0},
  {"azimuthal_position", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_15azimuthal_position, METH_O, 0},
  {"get_time_accumulation", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_17get_time_accumulation, METH_O, 0},
  {"get_radial_points", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_19get_radial_points, METH_NOARGS, 0},
  {"get_polar_points", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_21get_polar_points, METH_NOARGS, 0},
  {"get_azimuthal_accumulation", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_23get_azimuthal_accumulation, METH_O, 0},
  {"position", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_25position, METH_O, 0},
  {"position_vec", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_27position_vec, METH_O, 0},
  {"mino_time", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_29mino_time, METH_O, 0},
  {"get_time_coefficients", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_31get_time_coefficients, METH_O, 0},
  {"get_radial_coefficients", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_33get_radial_coefficients, METH_NOARGS, 0},
  {"get_polar_coefficients", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_35get_polar_coefficients, METH_NOARGS, 0},
  {"get_azimuthal_coefficients", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_37get_azimuthal_coefficients, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_39__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_12KerrGeodesic_41__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11cybhpt_full_KerrGeodesic[] = {
  {(char *)"nsamples", __pyx_getprop_11cybhpt_full_12KerrGeodesic_nsamples, 0, (char *)0, 0},
  {(char *)"blackholespin", __pyx_getprop_11cybhpt_full_12KerrGeodesic_blackholespin, 0, (char *)0, 0},
  {(char *)"semilatusrectum", __pyx_getprop_11cybhpt_full_12KerrGeodesic_semilatusrectum, 0, (char *)0, 0},
  {(char *)"eccentricity", __pyx_getprop_11cybhpt_full_12KerrGeodesic_eccentricity, 0, (char *)0, 0},
  {(char *)"inclination", __pyx_getprop_11cybhpt_full_12KerrGeodesic_inclination, 0, (char *)0, 0},
  {(char *)"orbitalenergy", __pyx_getprop_11cybhpt_full_12KerrGeodesic_orbitalenergy, 0, (char *)0, 0},
  {(char *)"orbitalangularmomentum", __pyx_getprop_11cybhpt_full_12KerrGeodesic_orbitalangularmomentum, 0, (char *)0, 0},
  {(char *)"carterconstant", __pyx_getprop_11cybhpt_full_12KerrGeodesic_carterconstant, 0, (char *)0, 0},
  {(char *)"radialroots", __pyx_getprop_11cybhpt_full_12KerrGeodesic_radialroots, 0, (char *)0, 0},
  {(char *)"polarroots", __pyx_getprop_11cybhpt_full_12KerrGeodesic_polarroots, 0, (char *)0, 0},
  {(char *)"minofrequencies", __pyx_getprop_11cybhpt_full_12KerrGeodesic_minofrequencies, 0, (char *)0, 0},
  {(char *)"timefrequencies", __pyx_getprop_11cybhpt_full_12KerrGeodesic_timefrequencies, 0, (char *)0, 0},
  {(char *)"frequencies", __pyx_getprop_11cybhpt_full_12KerrGeodesic_frequencies, 0, (char *)0, 0},
  {(char *)"carterfrequencies", __pyx_getprop_11cybhpt_full_12KerrGeodesic_carterfrequencies, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11cybhpt_full_KerrGeodesic = {
  PyVarObject_HEAD_INIT(0, 0)
  "cybhpt_full.KerrGeodesic", /*tp_name*/
  sizeof(struct __pyx_obj_11cybhpt_full_KerrGeodesic), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11cybhpt_full_KerrGeodesic, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11cybhpt_full_KerrGeodesic, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11cybhpt_full_KerrGeodesic, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11cybhpt_full_12KerrGeodesic_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11cybhpt_full_KerrGeodesic, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_11cybhpt_full_RadialTeukolsky(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11cybhpt_full_15RadialTeukolsky_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11cybhpt_full_RadialTeukolsky(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_11cybhpt_full_15RadialTeukolsky_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_blackholespin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_13blackholespin_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_spinweight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_10spinweight_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_s(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_1s_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_spheroidalmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_14spheroidalmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_j(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_1j_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_azimuthalmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_13azimuthalmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_m(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_1m_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_frequency(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_9frequency_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_mode_frequency(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_14mode_frequency_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_omega(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_5omega_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_15RadialTeukolsky_eigenvalue(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_15RadialTeukolsky_10eigenvalue_1__get__(o);
}

static PyMethodDef __pyx_methods_11cybhpt_full_RadialTeukolsky[] = {
  {"solve_bc", (PyCFunction)__pyx_pw_11cybhpt_full_15RadialTeukolsky_5solve_bc, METH_O, 0},
  {"set_bc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_15RadialTeukolsky_7set_bc, METH_VARARGS|METH_KEYWORDS, 0},
  {"solve", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_15RadialTeukolsky_9solve, METH_VARARGS|METH_KEYWORDS, 0},
  {"flip_spinweight", (PyCFunction)__pyx_pw_11cybhpt_full_15RadialTeukolsky_11flip_spinweight, METH_NOARGS, 0},
  {"radialpoint", (PyCFunction)__pyx_pw_11cybhpt_full_15RadialTeukolsky_13radialpoint, METH_O, 0},
  {"boundarypoint", (PyCFunction)__pyx_pw_11cybhpt_full_15RadialTeukolsky_15boundarypoint, METH_O, 0},
  {"boundarysolution", (PyCFunction)__pyx_pw_11cybhpt_full_15RadialTeukolsky_17boundarysolution, METH_O, 0},
  {"boundaryderivative", (PyCFunction)__pyx_pw_11cybhpt_full_15RadialTeukolsky_19boundaryderivative, METH_O, 0},
  {"solution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_15RadialTeukolsky_21solution, METH_VARARGS|METH_KEYWORDS, 0},
  {"derivative", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_15RadialTeukolsky_23derivative, METH_VARARGS|METH_KEYWORDS, 0},
  {"second_derivative", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_15RadialTeukolsky_25second_derivative, METH_VARARGS|METH_KEYWORDS, 0},
  {"derivative2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_15RadialTeukolsky_27derivative2, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_15RadialTeukolsky_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_15RadialTeukolsky_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11cybhpt_full_RadialTeukolsky[] = {
  {(char *)"blackholespin", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_blackholespin, 0, (char *)0, 0},
  {(char *)"spinweight", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_spinweight, 0, (char *)0, 0},
  {(char *)"s", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_s, 0, (char *)0, 0},
  {(char *)"spheroidalmode", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_spheroidalmode, 0, (char *)0, 0},
  {(char *)"j", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_j, 0, (char *)0, 0},
  {(char *)"azimuthalmode", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_azimuthalmode, 0, (char *)0, 0},
  {(char *)"m", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_m, 0, (char *)0, 0},
  {(char *)"frequency", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_frequency, 0, (char *)0, 0},
  {(char *)"mode_frequency", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_mode_frequency, 0, (char *)0, 0},
  {(char *)"omega", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_omega, 0, (char *)0, 0},
  {(char *)"eigenvalue", __pyx_getprop_11cybhpt_full_15RadialTeukolsky_eigenvalue, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11cybhpt_full_RadialTeukolsky = {
  PyVarObject_HEAD_INIT(0, 0)
  "cybhpt_full.RadialTeukolsky", /*tp_name*/
  sizeof(struct __pyx_obj_11cybhpt_full_RadialTeukolsky), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11cybhpt_full_RadialTeukolsky, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11cybhpt_full_RadialTeukolsky, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11cybhpt_full_RadialTeukolsky, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11cybhpt_full_RadialTeukolsky, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_11cybhpt_full_TeukolskyMode(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11cybhpt_full_13TeukolskyMode_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11cybhpt_full_TeukolskyMode(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_11cybhpt_full_13TeukolskyMode_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_spinweight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_10spinweight_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_spheroidalmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_14spheroidalmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_azimuthalmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_13azimuthalmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_radialmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_10radialmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_polarmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_9polarmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_blackholespin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_13blackholespin_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_frequency(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_9frequency_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_horizonfrequency(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_16horizonfrequency_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_eigenvalue(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_10eigenvalue_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_mincouplingmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_15mincouplingmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_maxcouplingmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_15maxcouplingmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_j(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_1j_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_m(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_1m_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_k(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_1k_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_n(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_1n_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_omega(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_5omega_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_a(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_1a_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_radialpoints(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_12radialpoints_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_polarpoints(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_11polarpoints_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_13TeukolskyMode_radialsolutions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_13TeukolskyMode_15radialsolutions_1__get__(o);
}

static PyMethodDef __pyx_methods_11cybhpt_full_TeukolskyMode[] = {
  {"teukolsky_amplitude", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_5teukolsky_amplitude, METH_O, 0},
  {"teukolsky_amplitude_precision", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_7teukolsky_amplitude_precision, METH_O, 0},
  {"couplingcoefficient", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_9couplingcoefficient, METH_O, 0},
  {"radialpoint", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_11radialpoint, METH_O, 0},
  {"radialsolution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_13TeukolskyMode_13radialsolution, METH_VARARGS|METH_KEYWORDS, 0},
  {"radialderivative", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_13TeukolskyMode_15radialderivative, METH_VARARGS|METH_KEYWORDS, 0},
  {"radialderivative2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_13TeukolskyMode_17radialderivative2, METH_VARARGS|METH_KEYWORDS, 0},
  {"homogeneousradialsolution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_13TeukolskyMode_19homogeneousradialsolution, METH_VARARGS|METH_KEYWORDS, 0},
  {"homogeneousradialderivative", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_13TeukolskyMode_21homogeneousradialderivative, METH_VARARGS|METH_KEYWORDS, 0},
  {"homogeneousradialderivative2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_13TeukolskyMode_23homogeneousradialderivative2, METH_VARARGS|METH_KEYWORDS, 0},
  {"polarpoint", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_25polarpoint, METH_O, 0},
  {"polarsolution", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_27polarsolution, METH_O, 0},
  {"polarderivative", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_29polarderivative, METH_O, 0},
  {"polarderivative2", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_31polarderivative2, METH_O, 0},
  {"solve", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_13TeukolskyMode_33solve, METH_VARARGS|METH_KEYWORDS, 0},
  {"flip_spinweight_frequency", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_35flip_spinweight_frequency, METH_NOARGS, 0},
  {"flip_spinweight", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_37flip_spinweight, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_39__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_13TeukolskyMode_41__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11cybhpt_full_TeukolskyMode[] = {
  {(char *)"spinweight", __pyx_getprop_11cybhpt_full_13TeukolskyMode_spinweight, 0, (char *)0, 0},
  {(char *)"spheroidalmode", __pyx_getprop_11cybhpt_full_13TeukolskyMode_spheroidalmode, 0, (char *)0, 0},
  {(char *)"azimuthalmode", __pyx_getprop_11cybhpt_full_13TeukolskyMode_azimuthalmode, 0, (char *)0, 0},
  {(char *)"radialmode", __pyx_getprop_11cybhpt_full_13TeukolskyMode_radialmode, 0, (char *)0, 0},
  {(char *)"polarmode", __pyx_getprop_11cybhpt_full_13TeukolskyMode_polarmode, 0, (char *)0, 0},
  {(char *)"blackholespin", __pyx_getprop_11cybhpt_full_13TeukolskyMode_blackholespin, 0, (char *)0, 0},
  {(char *)"frequency", __pyx_getprop_11cybhpt_full_13TeukolskyMode_frequency, 0, (char *)0, 0},
  {(char *)"horizonfrequency", __pyx_getprop_11cybhpt_full_13TeukolskyMode_horizonfrequency, 0, (char *)0, 0},
  {(char *)"eigenvalue", __pyx_getprop_11cybhpt_full_13TeukolskyMode_eigenvalue, 0, (char *)0, 0},
  {(char *)"mincouplingmode", __pyx_getprop_11cybhpt_full_13TeukolskyMode_mincouplingmode, 0, (char *)0, 0},
  {(char *)"maxcouplingmode", __pyx_getprop_11cybhpt_full_13TeukolskyMode_maxcouplingmode, 0, (char *)0, 0},
  {(char *)"j", __pyx_getprop_11cybhpt_full_13TeukolskyMode_j, 0, (char *)0, 0},
  {(char *)"m", __pyx_getprop_11cybhpt_full_13TeukolskyMode_m, 0, (char *)0, 0},
  {(char *)"k", __pyx_getprop_11cybhpt_full_13TeukolskyMode_k, 0, (char *)0, 0},
  {(char *)"n", __pyx_getprop_11cybhpt_full_13TeukolskyMode_n, 0, (char *)0, 0},
  {(char *)"omega", __pyx_getprop_11cybhpt_full_13TeukolskyMode_omega, 0, (char *)0, 0},
  {(char *)"a", __pyx_getprop_11cybhpt_full_13TeukolskyMode_a, 0, (char *)0, 0},
  {(char *)"radialpoints", __pyx_getprop_11cybhpt_full_13TeukolskyMode_radialpoints, 0, (char *)0, 0},
  {(char *)"polarpoints", __pyx_getprop_11cybhpt_full_13TeukolskyMode_polarpoints, 0, (char *)0, 0},
  {(char *)"radialsolutions", __pyx_getprop_11cybhpt_full_13TeukolskyMode_radialsolutions, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11cybhpt_full_TeukolskyMode = {
  PyVarObject_HEAD_INIT(0, 0)
  "cybhpt_full.TeukolskyMode", /*tp_name*/
  sizeof(struct __pyx_obj_11cybhpt_full_TeukolskyMode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11cybhpt_full_TeukolskyMode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11cybhpt_full_TeukolskyMode, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11cybhpt_full_TeukolskyMode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11cybhpt_full_TeukolskyMode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_11cybhpt_full_HertzMode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11cybhpt_full_HertzMode *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11cybhpt_full_HertzMode *)o);
  p->gauge_str = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11cybhpt_full_HertzMode(PyObject *o) {
  struct __pyx_obj_11cybhpt_full_HertzMode *p = (struct __pyx_obj_11cybhpt_full_HertzMode *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_11cybhpt_full_9HertzMode_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->gauge_str);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_gauge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_5gauge_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_spinweight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_10spinweight_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_spheroidalmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_14spheroidalmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_azimuthalmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_13azimuthalmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_radialmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_10radialmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_polarmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_9polarmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_blackholespin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_13blackholespin_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_frequency(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_9frequency_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_horizonfrequency(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_16horizonfrequency_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_eigenvalue(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_10eigenvalue_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_mincouplingmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_15mincouplingmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_maxcouplingmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_15maxcouplingmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_minscalarcouplingmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_21minscalarcouplingmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_maxscalarcouplingmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_21maxscalarcouplingmode_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_j(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_1j_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_m(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_1m_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_k(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_1k_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_n(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_1n_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_omega(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_5omega_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_a(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_1a_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_radialpoints(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_12radialpoints_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_radialsolutions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_15radialsolutions_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_radialderivatives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_17radialderivatives_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_9HertzMode_radialderivatives2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_9HertzMode_18radialderivatives2_1__get__(o);
}

static PyMethodDef __pyx_methods_11cybhpt_full_HertzMode[] = {
  {"solve", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_3solve, METH_NOARGS, 0},
  {"hertz_amplitude", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_7hertz_amplitude, METH_O, 0},
  {"couplingcoefficient", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_9couplingcoefficient, METH_O, 0},
  {"scalarcouplingcoefficient", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_11scalarcouplingcoefficient, METH_O, 0},
  {"radialpoint", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_13radialpoint, METH_O, 0},
  {"radialsolution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_9HertzMode_15radialsolution, METH_VARARGS|METH_KEYWORDS, 0},
  {"radialderivative", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_9HertzMode_17radialderivative, METH_VARARGS|METH_KEYWORDS, 0},
  {"radialderivative2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_9HertzMode_19radialderivative2, METH_VARARGS|METH_KEYWORDS, 0},
  {"homogeneousradialsolution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_9HertzMode_21homogeneousradialsolution, METH_VARARGS|METH_KEYWORDS, 0},
  {"homogeneousradialderivative", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_9HertzMode_23homogeneousradialderivative, METH_VARARGS|METH_KEYWORDS, 0},
  {"homogeneousradialderivative2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_9HertzMode_25homogeneousradialderivative2, METH_VARARGS|METH_KEYWORDS, 0},
  {"polarpoint", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_27polarpoint, METH_O, 0},
  {"polarsolution", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_29polarsolution, METH_O, 0},
  {"polarderivative", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_31polarderivative, METH_O, 0},
  {"polarderivative2", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_33polarderivative2, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_35__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_9HertzMode_37__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11cybhpt_full_HertzMode[] = {
  {(char *)"gauge", __pyx_getprop_11cybhpt_full_9HertzMode_gauge, 0, (char *)0, 0},
  {(char *)"spinweight", __pyx_getprop_11cybhpt_full_9HertzMode_spinweight, 0, (char *)0, 0},
  {(char *)"spheroidalmode", __pyx_getprop_11cybhpt_full_9HertzMode_spheroidalmode, 0, (char *)0, 0},
  {(char *)"azimuthalmode", __pyx_getprop_11cybhpt_full_9HertzMode_azimuthalmode, 0, (char *)0, 0},
  {(char *)"radialmode", __pyx_getprop_11cybhpt_full_9HertzMode_radialmode, 0, (char *)0, 0},
  {(char *)"polarmode", __pyx_getprop_11cybhpt_full_9HertzMode_polarmode, 0, (char *)0, 0},
  {(char *)"blackholespin", __pyx_getprop_11cybhpt_full_9HertzMode_blackholespin, 0, (char *)0, 0},
  {(char *)"frequency", __pyx_getprop_11cybhpt_full_9HertzMode_frequency, 0, (char *)0, 0},
  {(char *)"horizonfrequency", __pyx_getprop_11cybhpt_full_9HertzMode_horizonfrequency, 0, (char *)0, 0},
  {(char *)"eigenvalue", __pyx_getprop_11cybhpt_full_9HertzMode_eigenvalue, 0, (char *)0, 0},
  {(char *)"mincouplingmode", __pyx_getprop_11cybhpt_full_9HertzMode_mincouplingmode, 0, (char *)0, 0},
  {(char *)"maxcouplingmode", __pyx_getprop_11cybhpt_full_9HertzMode_maxcouplingmode, 0, (char *)0, 0},
  {(char *)"minscalarcouplingmode", __pyx_getprop_11cybhpt_full_9HertzMode_minscalarcouplingmode, 0, (char *)0, 0},
  {(char *)"maxscalarcouplingmode", __pyx_getprop_11cybhpt_full_9HertzMode_maxscalarcouplingmode, 0, (char *)0, 0},
  {(char *)"j", __pyx_getprop_11cybhpt_full_9HertzMode_j, 0, (char *)0, 0},
  {(char *)"m", __pyx_getprop_11cybhpt_full_9HertzMode_m, 0, (char *)0, 0},
  {(char *)"k", __pyx_getprop_11cybhpt_full_9HertzMode_k, 0, (char *)0, 0},
  {(char *)"n", __pyx_getprop_11cybhpt_full_9HertzMode_n, 0, (char *)0, 0},
  {(char *)"omega", __pyx_getprop_11cybhpt_full_9HertzMode_omega, 0, (char *)0, 0},
  {(char *)"a", __pyx_getprop_11cybhpt_full_9HertzMode_a, 0, (char *)0, 0},
  {(char *)"radialpoints", __pyx_getprop_11cybhpt_full_9HertzMode_radialpoints, 0, (char *)0, 0},
  {(char *)"radialsolutions", __pyx_getprop_11cybhpt_full_9HertzMode_radialsolutions, 0, (char *)0, 0},
  {(char *)"radialderivatives", __pyx_getprop_11cybhpt_full_9HertzMode_radialderivatives, 0, (char *)0, 0},
  {(char *)"radialderivatives2", __pyx_getprop_11cybhpt_full_9HertzMode_radialderivatives2, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11cybhpt_full_HertzMode = {
  PyVarObject_HEAD_INIT(0, 0)
  "cybhpt_full.HertzMode", /*tp_name*/
  sizeof(struct __pyx_obj_11cybhpt_full_HertzMode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11cybhpt_full_HertzMode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11cybhpt_full_HertzMode, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11cybhpt_full_HertzMode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11cybhpt_full_9HertzMode_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11cybhpt_full_HertzMode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_11cybhpt_full_MetricModeGenerator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11cybhpt_full_MetricModeGenerator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11cybhpt_full_MetricModeGenerator *)o);
  p->gauge_str = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->basis = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11cybhpt_full_MetricModeGenerator(PyObject *o) {
  struct __pyx_obj_11cybhpt_full_MetricModeGenerator *p = (struct __pyx_obj_11cybhpt_full_MetricModeGenerator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  Py_CLEAR(p->gauge_str);
  Py_CLEAR(p->basis);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11cybhpt_full_MetricModeGenerator[] = {
  {"tetradcomponent", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_19MetricModeGenerator_5tetradcomponent, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_19MetricModeGenerator_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_19MetricModeGenerator_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11cybhpt_full_MetricModeGenerator = {
  PyVarObject_HEAD_INIT(0, 0)
  "cybhpt_full.MetricModeGenerator", /*tp_name*/
  sizeof(struct __pyx_obj_11cybhpt_full_MetricModeGenerator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11cybhpt_full_MetricModeGenerator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_11cybhpt_full_19MetricModeGenerator_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11cybhpt_full_MetricModeGenerator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11cybhpt_full_19MetricModeGenerator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11cybhpt_full_MetricModeGenerator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_11cybhpt_full_FluxList __pyx_vtable_11cybhpt_full_FluxList;

static PyObject *__pyx_tp_new_11cybhpt_full_FluxList(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11cybhpt_full_FluxList *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11cybhpt_full_FluxList *)o);
  p->__pyx_vtab = __pyx_vtabptr_11cybhpt_full_FluxList;
  if (unlikely(__pyx_pw_11cybhpt_full_8FluxList_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11cybhpt_full_FluxList(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_11cybhpt_full_8FluxList_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_8FluxList_energy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_8FluxList_6energy_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_8FluxList_angularmomentum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_8FluxList_15angularmomentum_1__get__(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_8FluxList_carterconstant(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_8FluxList_14carterconstant_1__get__(o);
}

static PyMethodDef __pyx_methods_11cybhpt_full_FluxList[] = {
  {"zero_fluxes", (PyCFunction)__pyx_pw_11cybhpt_full_8FluxList_5zero_fluxes, METH_NOARGS, 0},
  {"set_infinity_fluxes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_8FluxList_7set_infinity_fluxes, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_horizon_fluxes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_8FluxList_9set_horizon_fluxes, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_infinity_fluxes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_8FluxList_11add_infinity_fluxes, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_horizon_fluxes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_8FluxList_13add_horizon_fluxes, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_infinity_fluxes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_8FluxList_15set_infinity_fluxes, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_fluxes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_8FluxList_17add_fluxes, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_8FluxList_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_8FluxList_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11cybhpt_full_FluxList[] = {
  {(char *)"energy", __pyx_getprop_11cybhpt_full_8FluxList_energy, 0, (char *)0, 0},
  {(char *)"angularmomentum", __pyx_getprop_11cybhpt_full_8FluxList_angularmomentum, 0, (char *)0, 0},
  {(char *)"carterconstant", __pyx_getprop_11cybhpt_full_8FluxList_carterconstant, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11cybhpt_full_FluxList = {
  PyVarObject_HEAD_INIT(0, 0)
  "cybhpt_full.FluxList", /*tp_name*/
  sizeof(struct __pyx_obj_11cybhpt_full_FluxList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11cybhpt_full_FluxList, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11cybhpt_full_FluxList, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11cybhpt_full_FluxList, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11cybhpt_full_FluxList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_11cybhpt_full_RedshiftCoefficients(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11cybhpt_full_20RedshiftCoefficients_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11cybhpt_full_RedshiftCoefficients(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_11cybhpt_full_20RedshiftCoefficients_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11cybhpt_full_RedshiftCoefficients[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_20RedshiftCoefficients_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_20RedshiftCoefficients_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11cybhpt_full_RedshiftCoefficients = {
  PyVarObject_HEAD_INIT(0, 0)
  "cybhpt_full.RedshiftCoefficients", /*tp_name*/
  sizeof(struct __pyx_obj_11cybhpt_full_RedshiftCoefficients), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11cybhpt_full_RedshiftCoefficients, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_11cybhpt_full_20RedshiftCoefficients_5__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11cybhpt_full_RedshiftCoefficients, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11cybhpt_full_RedshiftCoefficients, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_11cybhpt_full_SphericalHarmonicCoupling(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11cybhpt_full_SphericalHarmonicCoupling(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_11cybhpt_full_25SphericalHarmonicCoupling_azimuthalmode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_13azimuthalmode_1__get__(o);
}

static PyMethodDef __pyx_methods_11cybhpt_full_SphericalHarmonicCoupling[] = {
  {"zcouplingcoefficient", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_5zcouplingcoefficient, METH_VARARGS|METH_KEYWORDS, 0},
  {"dzcouplingcoefficient", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_7dzcouplingcoefficient, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11cybhpt_full_25SphericalHarmonicCoupling_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11cybhpt_full_SphericalHarmonicCoupling[] = {
  {(char *)"azimuthalmode", __pyx_getprop_11cybhpt_full_25SphericalHarmonicCoupling_azimuthalmode, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11cybhpt_full_SphericalHarmonicCoupling = {
  PyVarObject_HEAD_INIT(0, 0)
  "cybhpt_full.SphericalHarmonicCoupling", /*tp_name*/
  sizeof(struct __pyx_obj_11cybhpt_full_SphericalHarmonicCoupling), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11cybhpt_full_SphericalHarmonicCoupling, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11cybhpt_full_SphericalHarmonicCoupling, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11cybhpt_full_SphericalHarmonicCoupling, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11cybhpt_full_SphericalHarmonicCoupling, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cybhpt_full(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cybhpt_full},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "cybhpt_full",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_u_ASAAB0, __pyx_k_ASAAB0, sizeof(__pyx_k_ASAAB0), 0, 1, 0, 1},
  {&__pyx_n_u_ASAAB4, __pyx_k_ASAAB4, sizeof(__pyx_k_ASAAB4), 0, 1, 0, 1},
  {&__pyx_n_u_ASYM, __pyx_k_ASYM, sizeof(__pyx_k_ASYM), 0, 1, 0, 1},
  {&__pyx_n_u_AUTO, __pyx_k_AUTO, sizeof(__pyx_k_AUTO), 0, 1, 0, 1},
  {&__pyx_n_s_Edot, __pyx_k_Edot, sizeof(__pyx_k_Edot), 0, 0, 1, 1},
  {&__pyx_n_s_EdotH, __pyx_k_EdotH, sizeof(__pyx_k_EdotH), 0, 0, 1, 1},
  {&__pyx_n_s_EdotI, __pyx_k_EdotI, sizeof(__pyx_k_EdotI), 0, 0, 1, 1},
  {&__pyx_n_s_En, __pyx_k_En, sizeof(__pyx_k_En), 0, 0, 1, 1},
  {&__pyx_n_u_Error, __pyx_k_Error, sizeof(__pyx_k_Error), 0, 1, 0, 1},
  {&__pyx_n_s_FluxList, __pyx_k_FluxList, sizeof(__pyx_k_FluxList), 0, 0, 1, 1},
  {&__pyx_n_u_GSN, __pyx_k_GSN, sizeof(__pyx_k_GSN), 0, 1, 0, 1},
  {&__pyx_n_u_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 1, 0, 1},
  {&__pyx_n_u_HBL, __pyx_k_HBL, sizeof(__pyx_k_HBL), 0, 1, 0, 1},
  {&__pyx_n_s_HertzMode, __pyx_k_HertzMode, sizeof(__pyx_k_HertzMode), 0, 0, 1, 1},
  {&__pyx_kp_u_Hertz_mode_only_accepts_Teukolsk, __pyx_k_Hertz_mode_only_accepts_Teukolsk, sizeof(__pyx_k_Hertz_mode_only_accepts_Teukolsk), 0, 1, 0, 0},
  {&__pyx_kp_u_Hertz_potential_in_gauge_Must_be, __pyx_k_Hertz_potential_in_gauge_Must_be, sizeof(__pyx_k_Hertz_potential_in_gauge_Must_be), 0, 1, 0, 0},
  {&__pyx_n_u_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 1, 0, 1},
  {&__pyx_n_u_IRG, __pyx_k_IRG, sizeof(__pyx_k_IRG), 0, 1, 0, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_u_In, __pyx_k_In, sizeof(__pyx_k_In), 0, 1, 0, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_n_s_KerrGeodesic, __pyx_k_KerrGeodesic, sizeof(__pyx_k_KerrGeodesic), 0, 0, 1, 1},
  {&__pyx_n_s_Ldot, __pyx_k_Ldot, sizeof(__pyx_k_Ldot), 0, 0, 1, 1},
  {&__pyx_n_s_LdotH, __pyx_k_LdotH, sizeof(__pyx_k_LdotH), 0, 0, 1, 1},
  {&__pyx_n_s_LdotI, __pyx_k_LdotI, sizeof(__pyx_k_LdotI), 0, 0, 1, 1},
  {&__pyx_n_s_Lz, __pyx_k_Lz, sizeof(__pyx_k_Lz), 0, 0, 1, 1},
  {&__pyx_n_u_MST, __pyx_k_MST, sizeof(__pyx_k_MST), 0, 1, 0, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_MetricModeGenerator, __pyx_k_MetricModeGenerator, sizeof(__pyx_k_MetricModeGenerator), 0, 0, 1, 1},
  {&__pyx_n_s_Ni, __pyx_k_Ni, sizeof(__pyx_k_Ni), 0, 0, 1, 1},
  {&__pyx_n_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 1},
  {&__pyx_kp_u_Not_enough_memory, __pyx_k_Not_enough_memory, sizeof(__pyx_k_Not_enough_memory), 0, 1, 0, 0},
  {&__pyx_n_u_ORG, __pyx_k_ORG, sizeof(__pyx_k_ORG), 0, 1, 0, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_PsiIn, __pyx_k_PsiIn, sizeof(__pyx_k_PsiIn), 0, 0, 1, 1},
  {&__pyx_n_s_PsiUp, __pyx_k_PsiUp, sizeof(__pyx_k_PsiUp), 0, 0, 1, 1},
  {&__pyx_n_s_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 0, 1, 1},
  {&__pyx_n_s_Qc, __pyx_k_Qc, sizeof(__pyx_k_Qc), 0, 0, 1, 1},
  {&__pyx_n_s_Qdot, __pyx_k_Qdot, sizeof(__pyx_k_Qdot), 0, 0, 1, 1},
  {&__pyx_n_s_QdotH, __pyx_k_QdotH, sizeof(__pyx_k_QdotH), 0, 0, 1, 1},
  {&__pyx_n_s_QdotI, __pyx_k_QdotI, sizeof(__pyx_k_QdotI), 0, 0, 1, 1},
  {&__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},
  {&__pyx_n_s_R0, __pyx_k_R0, sizeof(__pyx_k_R0), 0, 0, 1, 1},
  {&__pyx_n_s_RP0, __pyx_k_RP0, sizeof(__pyx_k_RP0), 0, 0, 1, 1},
  {&__pyx_n_s_RadialTeukolsky, __pyx_k_RadialTeukolsky, sizeof(__pyx_k_RadialTeukolsky), 0, 0, 1, 1},
  {&__pyx_n_s_RedshiftCoefficients, __pyx_k_RedshiftCoefficients, sizeof(__pyx_k_RedshiftCoefficients), 0, 0, 1, 1},
  {&__pyx_n_s_Rp, __pyx_k_Rp, sizeof(__pyx_k_Rp), 0, 0, 1, 1},
  {&__pyx_n_u_SAAB0, __pyx_k_SAAB0, sizeof(__pyx_k_SAAB0), 0, 1, 0, 1},
  {&__pyx_n_u_SAAB4, __pyx_k_SAAB4, sizeof(__pyx_k_SAAB4), 0, 1, 0, 1},
  {&__pyx_n_s_SphericalHarmonicCoupling, __pyx_k_SphericalHarmonicCoupling, sizeof(__pyx_k_SphericalHarmonicCoupling), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_u_TEUK, __pyx_k_TEUK, sizeof(__pyx_k_TEUK), 0, 1, 0, 1},
  {&__pyx_n_s_TeukolskyMode, __pyx_k_TeukolskyMode, sizeof(__pyx_k_TeukolskyMode), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_u_Up, __pyx_k_Up, sizeof(__pyx_k_Up), 0, 1, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_ZIn, __pyx_k_ZIn, sizeof(__pyx_k_ZIn), 0, 0, 1, 1},
  {&__pyx_n_s_ZUp, __pyx_k_ZUp, sizeof(__pyx_k_ZUp), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_abs, __pyx_k_abs, sizeof(__pyx_k_abs), 0, 0, 1, 1},
  {&__pyx_n_s_ai, __pyx_k_ai, sizeof(__pyx_k_ai), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_azimuthalmode, __pyx_k_azimuthalmode, sizeof(__pyx_k_azimuthalmode), 0, 0, 1, 1},
  {&__pyx_n_s_basis, __pyx_k_basis, sizeof(__pyx_k_basis), 0, 0, 1, 1},
  {&__pyx_n_s_bc, __pyx_k_bc, sizeof(__pyx_k_bc), 0, 0, 1, 1},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_bi, __pyx_k_bi, sizeof(__pyx_k_bi), 0, 0, 1, 1},
  {&__pyx_n_s_blackholespin, __pyx_k_blackholespin, sizeof(__pyx_k_blackholespin), 0, 0, 1, 1},
  {&__pyx_n_s_carterfrequencies, __pyx_k_carterfrequencies, sizeof(__pyx_k_carterfrequencies), 0, 0, 1, 1},
  {&__pyx_n_s_ci, __pyx_k_ci, sizeof(__pyx_k_ci), 0, 0, 1, 1},
  {&__pyx_n_s_circular_redshift, __pyx_k_circular_redshift, sizeof(__pyx_k_circular_redshift), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_coeffs, __pyx_k_coeffs, sizeof(__pyx_k_coeffs), 0, 0, 1, 1},
  {&__pyx_n_u_coordinate, __pyx_k_coordinate, sizeof(__pyx_k_coordinate), 0, 1, 0, 1},
  {&__pyx_n_s_cos, __pyx_k_cos, sizeof(__pyx_k_cos), 0, 0, 1, 1},
  {&__pyx_n_s_cybhpt_full, __pyx_k_cybhpt_full, sizeof(__pyx_k_cybhpt_full), 0, 0, 1, 1},
  {&__pyx_kp_s_cython_flux_wrap_pyx, __pyx_k_cython_flux_wrap_pyx, sizeof(__pyx_k_cython_flux_wrap_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_cython_geo_wrap_pyx, __pyx_k_cython_geo_wrap_pyx, sizeof(__pyx_k_cython_geo_wrap_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_cython_radialsolver_wrap_pyx, __pyx_k_cython_radialsolver_wrap_pyx, sizeof(__pyx_k_cython_radialsolver_wrap_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_cython_redshift_wrap_pyx, __pyx_k_cython_redshift_wrap_pyx, sizeof(__pyx_k_cython_redshift_wrap_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_cython_teukolsky_wrap_pyx, __pyx_k_cython_teukolsky_wrap_pyx, sizeof(__pyx_k_cython_teukolsky_wrap_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_di, __pyx_k_di, sizeof(__pyx_k_di), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_flip_spin_of_solutions, __pyx_k_flip_spin_of_solutions, sizeof(__pyx_k_flip_spin_of_solutions), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_flux, __pyx_k_flux, sizeof(__pyx_k_flux), 0, 0, 1, 1},
  {&__pyx_n_s_fluxes, __pyx_k_fluxes, sizeof(__pyx_k_fluxes), 0, 0, 1, 1},
  {&__pyx_n_s_fluxescpp, __pyx_k_fluxescpp, sizeof(__pyx_k_fluxescpp), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_frequencies, __pyx_k_frequencies, sizeof(__pyx_k_frequencies), 0, 0, 1, 1},
  {&__pyx_n_s_frequency, __pyx_k_frequency, sizeof(__pyx_k_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_gauge, __pyx_k_gauge, sizeof(__pyx_k_gauge), 0, 0, 1, 1},
  {&__pyx_n_s_geo, __pyx_k_geo, sizeof(__pyx_k_geo), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_hertz, __pyx_k_hertz, sizeof(__pyx_k_hertz), 0, 0, 1, 1},
  {&__pyx_n_s_hertz_amplitude, __pyx_k_hertz_amplitude, sizeof(__pyx_k_hertz_amplitude), 0, 0, 1, 1},
  {&__pyx_n_s_homogeneousradialderivative2, __pyx_k_homogeneousradialderivative2, sizeof(__pyx_k_homogeneousradialderivative2), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_u_is_not_a_supported_boundary_con, __pyx_k_is_not_a_supported_boundary_con, sizeof(__pyx_k_is_not_a_supported_boundary_con), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_a_supported_gauge, __pyx_k_is_not_a_supported_gauge, sizeof(__pyx_k_is_not_a_supported_gauge), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_a_supported_solution_met, __pyx_k_is_not_a_supported_solution_met, sizeof(__pyx_k_is_not_a_supported_solution_met), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_a_valid_basis_Must_be_te, __pyx_k_is_not_a_valid_basis_Must_be_te, sizeof(__pyx_k_is_not_a_valid_basis_Must_be_te), 0, 1, 0, 0},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_jr, __pyx_k_jr, sizeof(__pyx_k_jr), 0, 0, 1, 1},
  {&__pyx_n_s_jz, __pyx_k_jz, sizeof(__pyx_k_jz), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_kerr_geo_V01, __pyx_k_kerr_geo_V01, sizeof(__pyx_k_kerr_geo_V01), 0, 0, 1, 1},
  {&__pyx_n_s_kerr_geo_V02, __pyx_k_kerr_geo_V02, sizeof(__pyx_k_kerr_geo_V02), 0, 0, 1, 1},
  {&__pyx_n_s_kerr_geo_V11, __pyx_k_kerr_geo_V11, sizeof(__pyx_k_kerr_geo_V11), 0, 0, 1, 1},
  {&__pyx_n_s_kerr_geo_V22, __pyx_k_kerr_geo_V22, sizeof(__pyx_k_kerr_geo_V22), 0, 0, 1, 1},
  {&__pyx_n_s_kerr_geo_V31, __pyx_k_kerr_geo_V31, sizeof(__pyx_k_kerr_geo_V31), 0, 0, 1, 1},
  {&__pyx_n_s_kerr_geo_V32, __pyx_k_kerr_geo_V32, sizeof(__pyx_k_kerr_geo_V32), 0, 0, 1, 1},
  {&__pyx_n_s_kerr_mino_frequencies_wrapper, __pyx_k_kerr_mino_frequencies_wrapper, sizeof(__pyx_k_kerr_mino_frequencies_wrapper), 0, 0, 1, 1},
  {&__pyx_n_s_kerr_orbital_constants_wrapper, __pyx_k_kerr_orbital_constants_wrapper, sizeof(__pyx_k_kerr_orbital_constants_wrapper), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_la, __pyx_k_la, sizeof(__pyx_k_la), 0, 0, 1, 1},
  {&__pyx_n_s_lambdaCH, __pyx_k_lambdaCH, sizeof(__pyx_k_lambdaCH), 0, 0, 1, 1},
  {&__pyx_n_s_lmax, __pyx_k_lmax, sizeof(__pyx_k_lmax), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
  {&__pyx_n_s_metric_11, __pyx_k_metric_11, sizeof(__pyx_k_metric_11), 0, 0, 1, 1},
  {&__pyx_n_s_metric_coefficient_S0, __pyx_k_metric_coefficient_S0, sizeof(__pyx_k_metric_coefficient_S0), 0, 0, 1, 1},
  {&__pyx_n_s_metric_coefficient_S4, __pyx_k_metric_coefficient_S4, sizeof(__pyx_k_metric_coefficient_S4), 0, 0, 1, 1},
  {&__pyx_n_s_metric_coefficients_cython_IRG, __pyx_k_metric_coefficients_cython_IRG, sizeof(__pyx_k_metric_coefficients_cython_IRG), 0, 0, 1, 1},
  {&__pyx_n_s_metric_coefficients_cython_ORG, __pyx_k_metric_coefficients_cython_ORG, sizeof(__pyx_k_metric_coefficients_cython_ORG), 0, 0, 1, 1},
  {&__pyx_n_s_mode_frequency, __pyx_k_mode_frequency, sizeof(__pyx_k_mode_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_mode_time_frequency, __pyx_k_mode_time_frequency, sizeof(__pyx_k_mode_time_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_nphi, __pyx_k_nphi, sizeof(__pyx_k_nphi), 0, 0, 1, 1},
  {&__pyx_n_s_nr, __pyx_k_nr, sizeof(__pyx_k_nr), 0, 0, 1, 1},
  {&__pyx_n_s_nsample, __pyx_k_nsample, sizeof(__pyx_k_nsample), 0, 0, 1, 1},
  {&__pyx_n_s_nsamples, __pyx_k_nsamples, sizeof(__pyx_k_nsamples), 0, 0, 1, 1},
  {&__pyx_n_s_nt, __pyx_k_nt, sizeof(__pyx_k_nt), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_nz, __pyx_k_nz, sizeof(__pyx_k_nz), 0, 0, 1, 1},
  {&__pyx_n_s_omega, __pyx_k_omega, sizeof(__pyx_k_omega), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_polarderivative, __pyx_k_polarderivative, sizeof(__pyx_k_polarderivative), 0, 0, 1, 1},
  {&__pyx_n_s_polarderivative2, __pyx_k_polarderivative2, sizeof(__pyx_k_polarderivative2), 0, 0, 1, 1},
  {&__pyx_n_s_polarmode, __pyx_k_polarmode, sizeof(__pyx_k_polarmode), 0, 0, 1, 1},
  {&__pyx_n_s_polarpoint, __pyx_k_polarpoint, sizeof(__pyx_k_polarpoint), 0, 0, 1, 1},
  {&__pyx_n_s_polarsolution, __pyx_k_polarsolution, sizeof(__pyx_k_polarsolution), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_MetricModeGenerat, __pyx_k_pyx_unpickle_MetricModeGenerat, sizeof(__pyx_k_pyx_unpickle_MetricModeGenerat), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_radialderivative, __pyx_k_radialderivative, sizeof(__pyx_k_radialderivative), 0, 0, 1, 1},
  {&__pyx_n_s_radialderivative2, __pyx_k_radialderivative2, sizeof(__pyx_k_radialderivative2), 0, 0, 1, 1},
  {&__pyx_n_s_radialmode, __pyx_k_radialmode, sizeof(__pyx_k_radialmode), 0, 0, 1, 1},
  {&__pyx_n_s_radialpoint, __pyx_k_radialpoint, sizeof(__pyx_k_radialpoint), 0, 0, 1, 1},
  {&__pyx_n_s_radialsolution, __pyx_k_radialsolution, sizeof(__pyx_k_radialsolution), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_run_tests, __pyx_k_run_tests, sizeof(__pyx_k_run_tests), 0, 0, 1, 1},
  {&__pyx_n_s_rvec, __pyx_k_rvec, sizeof(__pyx_k_rvec), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_self_geocpp_cannot_be_converted, __pyx_k_self_geocpp_cannot_be_converted, sizeof(__pyx_k_self_geocpp_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_hertzcpp_cannot_be_converte, __pyx_k_self_hertzcpp_cannot_be_converte, sizeof(__pyx_k_self_hertzcpp_cannot_be_converte), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_spheroidalmode, __pyx_k_spheroidalmode, sizeof(__pyx_k_spheroidalmode), 0, 0, 1, 1},
  {&__pyx_n_s_spinweight, __pyx_k_spinweight, sizeof(__pyx_k_spinweight), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_squeeze, __pyx_k_squeeze, sizeof(__pyx_k_squeeze), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_swsh, __pyx_k_swsh, sizeof(__pyx_k_swsh), 0, 0, 1, 1},
  {&__pyx_n_s_temp, __pyx_k_temp, sizeof(__pyx_k_temp), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_hertz_mode_cython, __pyx_k_test_hertz_mode_cython, sizeof(__pyx_k_test_hertz_mode_cython), 0, 0, 1, 1},
  {&__pyx_n_u_tetrad, __pyx_k_tetrad, sizeof(__pyx_k_tetrad), 0, 1, 0, 1},
  {&__pyx_n_s_tetradcomponent, __pyx_k_tetradcomponent, sizeof(__pyx_k_tetradcomponent), 0, 0, 1, 1},
  {&__pyx_n_s_teuk, __pyx_k_teuk, sizeof(__pyx_k_teuk), 0, 0, 1, 1},
  {&__pyx_n_s_teuk_to_hertz_ASAAB, __pyx_k_teuk_to_hertz_ASAAB, sizeof(__pyx_k_teuk_to_hertz_ASAAB), 0, 0, 1, 1},
  {&__pyx_n_s_teuk_to_hertz_IRG, __pyx_k_teuk_to_hertz_IRG, sizeof(__pyx_k_teuk_to_hertz_IRG), 0, 0, 1, 1},
  {&__pyx_n_s_teuk_to_hertz_ORG, __pyx_k_teuk_to_hertz_ORG, sizeof(__pyx_k_teuk_to_hertz_ORG), 0, 0, 1, 1},
  {&__pyx_n_s_teuk_to_hertz_SAAB, __pyx_k_teuk_to_hertz_SAAB, sizeof(__pyx_k_teuk_to_hertz_SAAB), 0, 0, 1, 1},
  {&__pyx_n_s_teukolsky_amplitude, __pyx_k_teukolsky_amplitude, sizeof(__pyx_k_teukolsky_amplitude), 0, 0, 1, 1},
  {&__pyx_n_s_teukolsky_starobinsky_const, __pyx_k_teukolsky_starobinsky_const, sizeof(__pyx_k_teukolsky_starobinsky_const), 0, 0, 1, 1},
  {&__pyx_n_s_teukolsky_starobinsky_const_squa, __pyx_k_teukolsky_starobinsky_const_squa, sizeof(__pyx_k_teukolsky_starobinsky_const_squa), 0, 0, 1, 1},
  {&__pyx_n_s_teukolsky_starobinsky_transforma, __pyx_k_teukolsky_starobinsky_transforma, sizeof(__pyx_k_teukolsky_starobinsky_transforma), 0, 0, 1, 1},
  {&__pyx_n_s_theta, __pyx_k_theta, sizeof(__pyx_k_theta), 0, 0, 1, 1},
  {&__pyx_n_s_timefrequencies, __pyx_k_timefrequencies, sizeof(__pyx_k_timefrequencies), 0, 0, 1, 1},
  {&__pyx_n_s_upPhi, __pyx_k_upPhi, sizeof(__pyx_k_upPhi), 0, 0, 1, 1},
  {&__pyx_n_s_upR, __pyx_k_upR, sizeof(__pyx_k_upR), 0, 0, 1, 1},
  {&__pyx_n_s_upT, __pyx_k_upT, sizeof(__pyx_k_upT), 0, 0, 1, 1},
  {&__pyx_n_s_upTh, __pyx_k_upTh, sizeof(__pyx_k_upTh), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_zvec, __pyx_k_zvec, sizeof(__pyx_k_zvec), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 107, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(3, 157, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(3, 300, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(6, 945, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_geocpp_cannot_be_converted); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.geocpp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_geocpp_cannot_be_converted); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cython/radialsolver_wrap.pyx":107
 *         self.teukcpp = new RadialTeukolskyCPP(a, s, l, m, omega, rvec)
 *         if self.teukcpp == NULL:
 *             raise MemoryError('Not enough memory.')             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Not_enough_memory); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "cython/teukolsky_wrap.pyx":157
 *         return gauge_dict[gauge_str]
 *     else:
 *         print("Error")             # <<<<<<<<<<<<<<
 *         TypeError("{} is not a supported gauge.".format(gauge_str))
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_u_Error); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(3, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "cython/teukolsky_wrap.pyx":300
 *     def __init__(self, TeukolskyMode teuk, unicode gauge):
 *         if np.abs(teuk.spinweight) != 2:
 *             raise ValueError("Hertz mode only accepts Teukolsky solutions with spin-weight -2,+2.")             # <<<<<<<<<<<<<<
 *         self.gauge_cpp = str_to_gauge(gauge)
 *         self.gauge_str = gauge
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Hertz_mode_only_accepts_Teukolsk); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(3, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_hertzcpp_cannot_be_converte); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.hertzcpp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self_hertzcpp_cannot_be_converte); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "cython/teukolsky_wrap.pyx":587
 *                 for nr in range(3):
 *                     if nr == 0:
 *                         dPsiIn = hertz.radialsolution("In", 0)             # <<<<<<<<<<<<<<
 *                         dPsiUp = hertz.radialsolution("Up", 0)
 *                     elif nr == 1:
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_n_u_In, __pyx_int_0); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(3, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "cython/teukolsky_wrap.pyx":588
 *                     if nr == 0:
 *                         dPsiIn = hertz.radialsolution("In", 0)
 *                         dPsiUp = hertz.radialsolution("Up", 0)             # <<<<<<<<<<<<<<
 *                     elif nr == 1:
 *                         dPsiIn = hertz.radialderivative("In", 0)
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_n_u_Up, __pyx_int_0); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(3, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_tuple__20 = PyTuple_Pack(3, __pyx_int_264467439, __pyx_int_82298618, __pyx_int_15697732); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":945
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(6, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "../../../opt/anaconda3/envs/pybhpt-env/lib/python3.7/site-packages/numpy/__init__.pxd":951
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(6, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "cython/geo_wrap.pyx":97
 *     double kerr_isco_frequency(double a)
 * 
 * def kerr_geo_V01(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VtR(a, En, Lz, Q, r)
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_En, __pyx_n_s_Lz, __pyx_n_s_Q, __pyx_n_s_r); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_geo_wrap_pyx, __pyx_n_s_kerr_geo_V01, 97, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 97, __pyx_L1_error)

  /* "cython/geo_wrap.pyx":100
 *     return kerr_geo_VtR(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V02(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VtTheta(a, En, Lz, Q, theta)
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_En, __pyx_n_s_Lz, __pyx_n_s_Q, __pyx_n_s_theta); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_geo_wrap_pyx, __pyx_n_s_kerr_geo_V02, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 100, __pyx_L1_error)

  /* "cython/geo_wrap.pyx":103
 *     return kerr_geo_VtTheta(a, En, Lz, Q, theta)
 * 
 * def kerr_geo_V11(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_Vr(a, En, Lz, Q, r)
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_En, __pyx_n_s_Lz, __pyx_n_s_Q, __pyx_n_s_r); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_geo_wrap_pyx, __pyx_n_s_kerr_geo_V11, 103, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 103, __pyx_L1_error)

  /* "cython/geo_wrap.pyx":106
 *     return kerr_geo_Vr(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V22(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_Vtheta(a, En, Lz, Q, theta)
 * 
 */
  __pyx_tuple__29 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_En, __pyx_n_s_Lz, __pyx_n_s_Q, __pyx_n_s_theta); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_geo_wrap_pyx, __pyx_n_s_kerr_geo_V22, 106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 106, __pyx_L1_error)

  /* "cython/geo_wrap.pyx":109
 *     return kerr_geo_Vtheta(a, En, Lz, Q, theta)
 * 
 * def kerr_geo_V31(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VphiR(a, En, Lz, Q, r)
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_En, __pyx_n_s_Lz, __pyx_n_s_Q, __pyx_n_s_r); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_geo_wrap_pyx, __pyx_n_s_kerr_geo_V31, 109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 109, __pyx_L1_error)

  /* "cython/geo_wrap.pyx":112
 *     return kerr_geo_VphiR(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V32(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VphiTheta(a, En, Lz, Q, theta)
 * 
 */
  __pyx_tuple__33 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_En, __pyx_n_s_Lz, __pyx_n_s_Q, __pyx_n_s_theta); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_geo_wrap_pyx, __pyx_n_s_kerr_geo_V32, 112, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 112, __pyx_L1_error)

  /* "cython/geo_wrap.pyx":307
 * 
 * 
 * def kerr_orbital_constants_wrapper(double a, double p, double e, double x):             # <<<<<<<<<<<<<<
 *     cdef double En, Lz, Qc
 *     En = 0.
 */
  __pyx_tuple__35 = PyTuple_Pack(7, __pyx_n_s_a, __pyx_n_s_p, __pyx_n_s_e, __pyx_n_s_x, __pyx_n_s_En, __pyx_n_s_Lz, __pyx_n_s_Qc); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_geo_wrap_pyx, __pyx_n_s_kerr_orbital_constants_wrapper, 307, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 307, __pyx_L1_error)

  /* "cython/geo_wrap.pyx":315
 *     return np.array([En, Lz, Qc])
 * 
 * def kerr_mino_frequencies_wrapper(double a, double p, double e, double x):             # <<<<<<<<<<<<<<
 *     cdef double upT, upR, upTh, upPhi
 *     upT = 0.
 */
  __pyx_tuple__37 = PyTuple_Pack(8, __pyx_n_s_a, __pyx_n_s_p, __pyx_n_s_e, __pyx_n_s_x, __pyx_n_s_upT, __pyx_n_s_upR, __pyx_n_s_upTh, __pyx_n_s_upPhi); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(4, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_geo_wrap_pyx, __pyx_n_s_kerr_mino_frequencies_wrapper, 315, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 315, __pyx_L1_error)

  /* "cython/radialsolver_wrap.pyx":71
 * 
 * 
 * def flip_spin_of_solutions(unicode bc, int s, double a, int m, double omega, double la, double r, cpp_complex[double] R, cpp_complex[double] Rp):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] R0, RP0
 *     flip_spin_of_radial_teukolsky_TS(R0, RP0, str_to_bc(bc), s, m, a, omega, la, r, R, Rp)
 */
  __pyx_tuple__39 = PyTuple_Pack(11, __pyx_n_s_bc, __pyx_n_s_s, __pyx_n_s_a, __pyx_n_s_m, __pyx_n_s_omega, __pyx_n_s_la, __pyx_n_s_r, __pyx_n_s_R, __pyx_n_s_Rp, __pyx_n_s_R0, __pyx_n_s_RP0); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(9, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_radialsolver_wrap_pyx, __pyx_n_s_flip_spin_of_solutions, 71, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(2, 71, __pyx_L1_error)

  /* "cython/radialsolver_wrap.pyx":88
 *         raise TypeError("{} is not a supported solution method.".format(method_str))
 * 
 * def teukolsky_starobinsky_transformation_amplitude(unicode bc, int s, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_amplitude(str_to_bc(bc), s, m, a, omega, lambdaCH)
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(6, __pyx_n_s_bc, __pyx_n_s_s, __pyx_n_s_m, __pyx_n_s_a, __pyx_n_s_omega, __pyx_n_s_lambdaCH); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_radialsolver_wrap_pyx, __pyx_n_s_teukolsky_starobinsky_transforma, 88, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(2, 88, __pyx_L1_error)

  /* "cython/radialsolver_wrap.pyx":91
 *     return teukolsky_starobinsky_amplitude(str_to_bc(bc), s, m, a, omega, lambdaCH)
 * 
 * def teukolsky_starobinsky_const(int j, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_complex_constant(j, m, a, omega, lambdaCH)
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(5, __pyx_n_s_j, __pyx_n_s_m, __pyx_n_s_a, __pyx_n_s_omega, __pyx_n_s_lambdaCH); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(2, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_radialsolver_wrap_pyx, __pyx_n_s_teukolsky_starobinsky_const, 91, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(2, 91, __pyx_L1_error)

  /* "cython/radialsolver_wrap.pyx":94
 *     return teukolsky_starobinsky_complex_constant(j, m, a, omega, lambdaCH)
 * 
 * def teukolsky_starobinsky_const_squared(int s, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_constant(s, m, a, omega, lambdaCH)
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(5, __pyx_n_s_s, __pyx_n_s_m, __pyx_n_s_a, __pyx_n_s_omega, __pyx_n_s_lambdaCH); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(2, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_radialsolver_wrap_pyx, __pyx_n_s_teukolsky_starobinsky_const_squa, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(2, 94, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":441
 *         }
 * 
 * def test_hertz_mode_cython(int j, int m, int k, int n, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *     test_hertz_mode(j, m, k, n, dereference(geo.geocpp))
 * 
 */
  __pyx_tuple__47 = PyTuple_Pack(5, __pyx_n_s_j, __pyx_n_s_m, __pyx_n_s_k, __pyx_n_s_n, __pyx_n_s_geo); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(3, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_teukolsky_wrap_pyx, __pyx_n_s_test_hertz_mode_cython, 441, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(3, 441, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":449
 * }
 * 
 * def teuk_to_hertz_ORG(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */
  __pyx_tuple__49 = PyTuple_Pack(10, __pyx_n_s_ZIn, __pyx_n_s_ZUp, __pyx_n_s_j, __pyx_n_s_m, __pyx_n_s_k, __pyx_n_s_a, __pyx_n_s_omega, __pyx_n_s_lambdaCH, __pyx_n_s_PsiIn, __pyx_n_s_PsiUp); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(3, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(8, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_teukolsky_wrap_pyx, __pyx_n_s_teuk_to_hertz_ORG, 449, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(3, 449, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":455
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_IRG(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */
  __pyx_tuple__51 = PyTuple_Pack(10, __pyx_n_s_ZIn, __pyx_n_s_ZUp, __pyx_n_s_j, __pyx_n_s_m, __pyx_n_s_k, __pyx_n_s_a, __pyx_n_s_omega, __pyx_n_s_lambdaCH, __pyx_n_s_PsiIn, __pyx_n_s_PsiUp); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(3, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(8, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_teukolsky_wrap_pyx, __pyx_n_s_teuk_to_hertz_IRG, 455, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(3, 455, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":461
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_SAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */
  __pyx_tuple__53 = PyTuple_Pack(10, __pyx_n_s_ZIn, __pyx_n_s_ZUp, __pyx_n_s_j, __pyx_n_s_m, __pyx_n_s_k, __pyx_n_s_a, __pyx_n_s_omega, __pyx_n_s_lambdaCH, __pyx_n_s_PsiIn, __pyx_n_s_PsiUp); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(3, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(8, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_teukolsky_wrap_pyx, __pyx_n_s_teuk_to_hertz_SAAB, 461, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(3, 461, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":467
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_ASAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */
  __pyx_tuple__55 = PyTuple_Pack(10, __pyx_n_s_ZIn, __pyx_n_s_ZUp, __pyx_n_s_j, __pyx_n_s_m, __pyx_n_s_k, __pyx_n_s_a, __pyx_n_s_omega, __pyx_n_s_lambdaCH, __pyx_n_s_PsiIn, __pyx_n_s_PsiUp); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(3, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(8, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_teukolsky_wrap_pyx, __pyx_n_s_teuk_to_hertz_ASAAB, 467, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(3, 467, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":475
 * cdef dict metric_component_gauge_dict = {
 *     "ORG" : {
 *         (1, 1): None,             # <<<<<<<<<<<<<<
 *         (1, 3): None,
 *         (1, 4): None,
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(3, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "cython/teukolsky_wrap.pyx":476
 *     "ORG" : {
 *         (1, 1): None,
 *         (1, 3): None,             # <<<<<<<<<<<<<<
 *         (1, 4): None,
 *         (3, 3): None,
 */
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_3); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(3, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "cython/teukolsky_wrap.pyx":477
 *         (1, 1): None,
 *         (1, 3): None,
 *         (1, 4): None,             # <<<<<<<<<<<<<<
 *         (3, 3): None,
 *         (4, 4): None},
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_4); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(3, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "cython/teukolsky_wrap.pyx":478
 *         (1, 3): None,
 *         (1, 4): None,
 *         (3, 3): None,             # <<<<<<<<<<<<<<
 *         (4, 4): None},
 *     "IRG" : {
 */
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(3, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "cython/teukolsky_wrap.pyx":479
 *         (1, 4): None,
 *         (3, 3): None,
 *         (4, 4): None},             # <<<<<<<<<<<<<<
 *     "IRG" : {
 *         (2, 2): None,
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_int_4, __pyx_int_4); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(3, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "cython/teukolsky_wrap.pyx":481
 *         (4, 4): None},
 *     "IRG" : {
 *         (2, 2): None,             # <<<<<<<<<<<<<<
 *         (2, 3): None,
 *         (2, 4): None,
 */
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_2); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(3, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "cython/teukolsky_wrap.pyx":482
 *     "IRG" : {
 *         (2, 2): None,
 *         (2, 3): None,             # <<<<<<<<<<<<<<
 *         (2, 4): None,
 *         (3, 3): None,
 */
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_3); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(3, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "cython/teukolsky_wrap.pyx":483
 *         (2, 2): None,
 *         (2, 3): None,
 *         (2, 4): None,             # <<<<<<<<<<<<<<
 *         (3, 3): None,
 *         (4, 4): None},
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_4); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(3, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "cython/teukolsky_wrap.pyx":530
 * }
 * 
 * def metric_11(double a, double r, double z):             # <<<<<<<<<<<<<<
 *     cdef vector[double] rvec = vector[double](1)
 *     cdef vector[double] zvec = vector[double](1)
 */
  __pyx_tuple__65 = PyTuple_Pack(7, __pyx_n_s_a, __pyx_n_s_r, __pyx_n_s_z, __pyx_n_s_rvec, __pyx_n_s_zvec, __pyx_n_s_temp, __pyx_n_s_coeffs); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(3, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_teukolsky_wrap_pyx, __pyx_n_s_metric_11, 530, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(3, 530, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":541
 *     return np.array(coeffs).squeeze()
 * 
 * def metric_coefficient_S4(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_ORG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 */
  __pyx_tuple__67 = PyTuple_Pack(9, __pyx_n_s_alpha, __pyx_n_s_beta, __pyx_n_s_nt, __pyx_n_s_nr, __pyx_n_s_nz, __pyx_n_s_np, __pyx_n_s_a, __pyx_n_s_r, __pyx_n_s_z); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(3, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(9, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_teukolsky_wrap_pyx, __pyx_n_s_metric_coefficient_S4, 541, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(3, 541, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":544
 *     return metric_coefficient_ORG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 * def metric_coefficient_S0(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_IRG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 */
  __pyx_tuple__69 = PyTuple_Pack(9, __pyx_n_s_alpha, __pyx_n_s_beta, __pyx_n_s_nt, __pyx_n_s_nr, __pyx_n_s_nz, __pyx_n_s_np, __pyx_n_s_a, __pyx_n_s_r, __pyx_n_s_z); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(3, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(9, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_teukolsky_wrap_pyx, __pyx_n_s_metric_coefficient_S0, 544, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(3, 544, __pyx_L1_error)

  /* "cython/flux_wrap.pyx":119
 * 
 * 
 * def flux(int s, KerrGeodesic geo, TeukolskyMode teuk):             # <<<<<<<<<<<<<<
 *     cdef FluxListCPP fluxescpp = flux_mode(s, dereference(geo.geocpp), dereference(teuk.teukcpp), include_minus_m = 0)
 *     fluxes = FluxList()
 */
  __pyx_tuple__71 = PyTuple_Pack(5, __pyx_n_s_s, __pyx_n_s_geo, __pyx_n_s_teuk, __pyx_n_s_fluxescpp, __pyx_n_s_fluxes); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_flux_wrap_pyx, __pyx_n_s_flux, 119, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(4, 119, __pyx_L1_error)

  /* "cython/redshift_wrap.pyx":39
 * 
 * 
 * def metric_coefficients_cython_ORG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_ORG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 */
  __pyx_tuple__73 = PyTuple_Pack(9, __pyx_n_s_ai, __pyx_n_s_bi, __pyx_n_s_nt, __pyx_n_s_nr, __pyx_n_s_nz, __pyx_n_s_nphi, __pyx_n_s_a, __pyx_n_s_r, __pyx_n_s_z); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(5, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(9, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_redshift_wrap_pyx, __pyx_n_s_metric_coefficients_cython_ORG, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(5, 39, __pyx_L1_error)

  /* "cython/redshift_wrap.pyx":42
 *     return metric_coefficient_ORG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 * def metric_coefficients_cython_IRG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_IRG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 */
  __pyx_tuple__75 = PyTuple_Pack(9, __pyx_n_s_ai, __pyx_n_s_bi, __pyx_n_s_nt, __pyx_n_s_nr, __pyx_n_s_nz, __pyx_n_s_nphi, __pyx_n_s_a, __pyx_n_s_r, __pyx_n_s_z); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(5, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(9, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_redshift_wrap_pyx, __pyx_n_s_metric_coefficients_cython_IRG, 42, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(5, 42, __pyx_L1_error)

  /* "cython/redshift_wrap.pyx":45
 *     return metric_coefficient_IRG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 * def circular_redshift(unicode filename, unicode gauge, int lmax, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *     return redshift_circular(filename.encode(), str_to_gauge(gauge), lmax, dereference(geo.geocpp))
 * 
 */
  __pyx_tuple__77 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_gauge, __pyx_n_s_lmax, __pyx_n_s_geo); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(5, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_redshift_wrap_pyx, __pyx_n_s_circular_redshift, 45, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(5, 45, __pyx_L1_error)

  /* "cython/redshift_wrap.pyx":48
 *     return redshift_circular(filename.encode(), str_to_gauge(gauge), lmax, dereference(geo.geocpp))
 * 
 * def run_tests():             # <<<<<<<<<<<<<<
 *     run_unit_tests()
 * 
 */
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_redshift_wrap_pyx, __pyx_n_s_run_tests, 48, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(5, 48, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_MetricModeGenerator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__80 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_MetricModeGenerat, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(5, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_15697732 = PyInt_FromLong(15697732L); if (unlikely(!__pyx_int_15697732)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_82298618 = PyInt_FromLong(82298618L); if (unlikely(!__pyx_int_82298618)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_264467439 = PyInt_FromLong(264467439L); if (unlikely(!__pyx_int_264467439)) __PYX_ERR(5, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_11cybhpt_full_bc_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_11cybhpt_full_method_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_11cybhpt_full_gauge_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_11cybhpt_full_basis_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_11cybhpt_full_metric_component_gauge_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_11cybhpt_full_KerrGeodesic = &__pyx_vtable_11cybhpt_full_KerrGeodesic;
  __pyx_vtable_11cybhpt_full_KerrGeodesic.getTimePositionOfMinoTimeArray = (void (*)(struct __pyx_obj_11cybhpt_full_KerrGeodesic *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int))__pyx_f_11cybhpt_full_12KerrGeodesic_getTimePositionOfMinoTimeArray;
  __pyx_vtable_11cybhpt_full_KerrGeodesic.getRadialPositionOfMinoTimeArray = (void (*)(struct __pyx_obj_11cybhpt_full_KerrGeodesic *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int))__pyx_f_11cybhpt_full_12KerrGeodesic_getRadialPositionOfMinoTimeArray;
  __pyx_vtable_11cybhpt_full_KerrGeodesic.getPolarPositionOfMinoTimeArray = (void (*)(struct __pyx_obj_11cybhpt_full_KerrGeodesic *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int))__pyx_f_11cybhpt_full_12KerrGeodesic_getPolarPositionOfMinoTimeArray;
  __pyx_vtable_11cybhpt_full_KerrGeodesic.getAzimuthalPositionOfMinoTimeArray = (void (*)(struct __pyx_obj_11cybhpt_full_KerrGeodesic *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int))__pyx_f_11cybhpt_full_12KerrGeodesic_getAzimuthalPositionOfMinoTimeArray;
  if (PyType_Ready(&__pyx_type_11cybhpt_full_KerrGeodesic) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11cybhpt_full_KerrGeodesic.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11cybhpt_full_KerrGeodesic.tp_dictoffset && __pyx_type_11cybhpt_full_KerrGeodesic.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11cybhpt_full_KerrGeodesic.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_11cybhpt_full_KerrGeodesic.tp_dict, __pyx_vtabptr_11cybhpt_full_KerrGeodesic) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_KerrGeodesic, (PyObject *)&__pyx_type_11cybhpt_full_KerrGeodesic) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11cybhpt_full_KerrGeodesic) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __pyx_ptype_11cybhpt_full_KerrGeodesic = &__pyx_type_11cybhpt_full_KerrGeodesic;
  if (PyType_Ready(&__pyx_type_11cybhpt_full_RadialTeukolsky) < 0) __PYX_ERR(2, 97, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11cybhpt_full_RadialTeukolsky.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11cybhpt_full_RadialTeukolsky.tp_dictoffset && __pyx_type_11cybhpt_full_RadialTeukolsky.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11cybhpt_full_RadialTeukolsky.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RadialTeukolsky, (PyObject *)&__pyx_type_11cybhpt_full_RadialTeukolsky) < 0) __PYX_ERR(2, 97, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11cybhpt_full_RadialTeukolsky) < 0) __PYX_ERR(2, 97, __pyx_L1_error)
  __pyx_ptype_11cybhpt_full_RadialTeukolsky = &__pyx_type_11cybhpt_full_RadialTeukolsky;
  if (PyType_Ready(&__pyx_type_11cybhpt_full_TeukolskyMode) < 0) __PYX_ERR(3, 160, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11cybhpt_full_TeukolskyMode.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11cybhpt_full_TeukolskyMode.tp_dictoffset && __pyx_type_11cybhpt_full_TeukolskyMode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11cybhpt_full_TeukolskyMode.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TeukolskyMode, (PyObject *)&__pyx_type_11cybhpt_full_TeukolskyMode) < 0) __PYX_ERR(3, 160, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11cybhpt_full_TeukolskyMode) < 0) __PYX_ERR(3, 160, __pyx_L1_error)
  __pyx_ptype_11cybhpt_full_TeukolskyMode = &__pyx_type_11cybhpt_full_TeukolskyMode;
  if (PyType_Ready(&__pyx_type_11cybhpt_full_HertzMode) < 0) __PYX_ERR(3, 291, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11cybhpt_full_HertzMode.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11cybhpt_full_HertzMode.tp_dictoffset && __pyx_type_11cybhpt_full_HertzMode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11cybhpt_full_HertzMode.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HertzMode, (PyObject *)&__pyx_type_11cybhpt_full_HertzMode) < 0) __PYX_ERR(3, 291, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11cybhpt_full_HertzMode) < 0) __PYX_ERR(3, 291, __pyx_L1_error)
  __pyx_ptype_11cybhpt_full_HertzMode = &__pyx_type_11cybhpt_full_HertzMode;
  if (PyType_Ready(&__pyx_type_11cybhpt_full_MetricModeGenerator) < 0) __PYX_ERR(3, 547, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11cybhpt_full_MetricModeGenerator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11cybhpt_full_MetricModeGenerator.tp_dictoffset && __pyx_type_11cybhpt_full_MetricModeGenerator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11cybhpt_full_MetricModeGenerator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MetricModeGenerator, (PyObject *)&__pyx_type_11cybhpt_full_MetricModeGenerator) < 0) __PYX_ERR(3, 547, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11cybhpt_full_MetricModeGenerator) < 0) __PYX_ERR(3, 547, __pyx_L1_error)
  __pyx_ptype_11cybhpt_full_MetricModeGenerator = &__pyx_type_11cybhpt_full_MetricModeGenerator;
  __pyx_vtabptr_11cybhpt_full_FluxList = &__pyx_vtable_11cybhpt_full_FluxList;
  __pyx_vtable_11cybhpt_full_FluxList.set_fluxes = (PyObject *(*)(struct __pyx_obj_11cybhpt_full_FluxList *, FluxList))__pyx_f_11cybhpt_full_8FluxList_set_fluxes;
  if (PyType_Ready(&__pyx_type_11cybhpt_full_FluxList) < 0) __PYX_ERR(4, 36, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11cybhpt_full_FluxList.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11cybhpt_full_FluxList.tp_dictoffset && __pyx_type_11cybhpt_full_FluxList.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11cybhpt_full_FluxList.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_11cybhpt_full_FluxList.tp_dict, __pyx_vtabptr_11cybhpt_full_FluxList) < 0) __PYX_ERR(4, 36, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FluxList, (PyObject *)&__pyx_type_11cybhpt_full_FluxList) < 0) __PYX_ERR(4, 36, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11cybhpt_full_FluxList) < 0) __PYX_ERR(4, 36, __pyx_L1_error)
  __pyx_ptype_11cybhpt_full_FluxList = &__pyx_type_11cybhpt_full_FluxList;
  if (PyType_Ready(&__pyx_type_11cybhpt_full_RedshiftCoefficients) < 0) __PYX_ERR(5, 51, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11cybhpt_full_RedshiftCoefficients.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11cybhpt_full_RedshiftCoefficients.tp_dictoffset && __pyx_type_11cybhpt_full_RedshiftCoefficients.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11cybhpt_full_RedshiftCoefficients.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RedshiftCoefficients, (PyObject *)&__pyx_type_11cybhpt_full_RedshiftCoefficients) < 0) __PYX_ERR(5, 51, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11cybhpt_full_RedshiftCoefficients) < 0) __PYX_ERR(5, 51, __pyx_L1_error)
  __pyx_ptype_11cybhpt_full_RedshiftCoefficients = &__pyx_type_11cybhpt_full_RedshiftCoefficients;
  if (PyType_Ready(&__pyx_type_11cybhpt_full_SphericalHarmonicCoupling) < 0) __PYX_ERR(5, 63, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11cybhpt_full_SphericalHarmonicCoupling.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11cybhpt_full_SphericalHarmonicCoupling.tp_dictoffset && __pyx_type_11cybhpt_full_SphericalHarmonicCoupling.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11cybhpt_full_SphericalHarmonicCoupling.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SphericalHarmonicCoupling, (PyObject *)&__pyx_type_11cybhpt_full_SphericalHarmonicCoupling) < 0) __PYX_ERR(5, 63, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11cybhpt_full_SphericalHarmonicCoupling) < 0) __PYX_ERR(5, 63, __pyx_L1_error)
  __pyx_ptype_11cybhpt_full_SphericalHarmonicCoupling = &__pyx_type_11cybhpt_full_SphericalHarmonicCoupling;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(6, 200, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(6, 223, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(6, 227, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(6, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(6, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(6, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(6, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(6, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(6, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(6, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(6, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(6, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(6, 787, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(6, 789, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(6, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcybhpt_full(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcybhpt_full(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cybhpt_full(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cybhpt_full(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cybhpt_full(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cybhpt_full' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cybhpt_full(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(5, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cybhpt_full", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(5, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(5, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(5, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(5, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cybhpt_full) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(5, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cybhpt_full")) {
      if (unlikely(PyDict_SetItemString(modules, "cybhpt_full", __pyx_m) < 0)) __PYX_ERR(5, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(5, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(5, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif

  /* "cython/flux_wrap.pyx":5
 * from cython.operator cimport dereference
 * from libcpp.string cimport string as cpp_string
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":4
 * from libcpp.complex cimport complex as cpp_complex
 * from cython.operator cimport dereference
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/geo_wrap.pyx":4
 * 
 * from libcpp.vector cimport vector
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/geo_wrap.pyx":97
 *     double kerr_isco_frequency(double a)
 * 
 * def kerr_geo_V01(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VtR(a, En, Lz, Q, r)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_1kerr_geo_V01, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kerr_geo_V01, __pyx_t_1) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/geo_wrap.pyx":100
 *     return kerr_geo_VtR(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V02(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VtTheta(a, En, Lz, Q, theta)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_3kerr_geo_V02, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kerr_geo_V02, __pyx_t_1) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/geo_wrap.pyx":103
 *     return kerr_geo_VtTheta(a, En, Lz, Q, theta)
 * 
 * def kerr_geo_V11(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_Vr(a, En, Lz, Q, r)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_5kerr_geo_V11, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kerr_geo_V11, __pyx_t_1) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/geo_wrap.pyx":106
 *     return kerr_geo_Vr(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V22(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_Vtheta(a, En, Lz, Q, theta)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_7kerr_geo_V22, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kerr_geo_V22, __pyx_t_1) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/geo_wrap.pyx":109
 *     return kerr_geo_Vtheta(a, En, Lz, Q, theta)
 * 
 * def kerr_geo_V31(double a, double En, double Lz, double Q, double r):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VphiR(a, En, Lz, Q, r)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_9kerr_geo_V31, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kerr_geo_V31, __pyx_t_1) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/geo_wrap.pyx":112
 *     return kerr_geo_VphiR(a, En, Lz, Q, r)
 * 
 * def kerr_geo_V32(double a, double En, double Lz, double Q, double theta):             # <<<<<<<<<<<<<<
 *     return kerr_geo_VphiTheta(a, En, Lz, Q, theta)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_11kerr_geo_V32, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kerr_geo_V32, __pyx_t_1) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/geo_wrap.pyx":185
 *         return np.dot(kvec, (self.frequencies))
 * 
 *     mode_frequency = mode_time_frequency             # <<<<<<<<<<<<<<
 * 
 *     def mode_carter_frequency(self, np.ndarray[ndim=1, dtype=np.int64_t] kvec):
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11cybhpt_full_KerrGeodesic, __pyx_n_s_mode_time_frequency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11cybhpt_full_KerrGeodesic->tp_dict, __pyx_n_s_mode_frequency, __pyx_t_1) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11cybhpt_full_KerrGeodesic);

  /* "cython/geo_wrap.pyx":307
 * 
 * 
 * def kerr_orbital_constants_wrapper(double a, double p, double e, double x):             # <<<<<<<<<<<<<<
 *     cdef double En, Lz, Qc
 *     En = 0.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_13kerr_orbital_constants_wrapper, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kerr_orbital_constants_wrapper, __pyx_t_1) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/geo_wrap.pyx":315
 *     return np.array([En, Lz, Qc])
 * 
 * def kerr_mino_frequencies_wrapper(double a, double p, double e, double x):             # <<<<<<<<<<<<<<
 *     cdef double upT, upR, upTh, upPhi
 *     upT = 0.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_15kerr_mino_frequencies_wrapper, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kerr_mino_frequencies_wrapper, __pyx_t_1) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/radialsolver_wrap.pyx":3
 * from libcpp.vector cimport vector
 * from libcpp.complex cimport complex as cpp_complex
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/radialsolver_wrap.pyx":57
 * 
 * cdef dict bc_dict = {
 *     "In" : BoundaryCondition.In,             # <<<<<<<<<<<<<<
 *     "Up" : BoundaryCondition.Up
 * }
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__BoundaryCondition(In); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_In, __pyx_t_2) < 0) __PYX_ERR(2, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/radialsolver_wrap.pyx":58
 * cdef dict bc_dict = {
 *     "In" : BoundaryCondition.In,
 *     "Up" : BoundaryCondition.Up             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__BoundaryCondition(Up); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_Up, __pyx_t_2) < 0) __PYX_ERR(2, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_11cybhpt_full_bc_dict);
  __Pyx_DECREF_SET(__pyx_v_11cybhpt_full_bc_dict, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cython/radialsolver_wrap.pyx":62
 * 
 * cdef dict method_dict = {
 *     "AUTO" : SolutionMethod.AUTO,             # <<<<<<<<<<<<<<
 *     "MST" : SolutionMethod.MST,
 *     "ASYM" : SolutionMethod.ASYM,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__SolutionMethod(AUTO); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_AUTO, __pyx_t_2) < 0) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/radialsolver_wrap.pyx":63
 * cdef dict method_dict = {
 *     "AUTO" : SolutionMethod.AUTO,
 *     "MST" : SolutionMethod.MST,             # <<<<<<<<<<<<<<
 *     "ASYM" : SolutionMethod.ASYM,
 *     "HBL" : SolutionMethod.HBL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__SolutionMethod(MST); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_MST, __pyx_t_2) < 0) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/radialsolver_wrap.pyx":64
 *     "AUTO" : SolutionMethod.AUTO,
 *     "MST" : SolutionMethod.MST,
 *     "ASYM" : SolutionMethod.ASYM,             # <<<<<<<<<<<<<<
 *     "HBL" : SolutionMethod.HBL,
 *     "GSN" : SolutionMethod.GSN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__SolutionMethod(ASYM); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_ASYM, __pyx_t_2) < 0) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/radialsolver_wrap.pyx":65
 *     "MST" : SolutionMethod.MST,
 *     "ASYM" : SolutionMethod.ASYM,
 *     "HBL" : SolutionMethod.HBL,             # <<<<<<<<<<<<<<
 *     "GSN" : SolutionMethod.GSN,
 *     "TEUK" : SolutionMethod.TEUK
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__SolutionMethod(HBL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_HBL, __pyx_t_2) < 0) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/radialsolver_wrap.pyx":66
 *     "ASYM" : SolutionMethod.ASYM,
 *     "HBL" : SolutionMethod.HBL,
 *     "GSN" : SolutionMethod.GSN,             # <<<<<<<<<<<<<<
 *     "TEUK" : SolutionMethod.TEUK
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__SolutionMethod(GSN); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_GSN, __pyx_t_2) < 0) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/radialsolver_wrap.pyx":67
 *     "HBL" : SolutionMethod.HBL,
 *     "GSN" : SolutionMethod.GSN,
 *     "TEUK" : SolutionMethod.TEUK             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__SolutionMethod(TEUK); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_TEUK, __pyx_t_2) < 0) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_11cybhpt_full_method_dict);
  __Pyx_DECREF_SET(__pyx_v_11cybhpt_full_method_dict, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cython/radialsolver_wrap.pyx":71
 * 
 * 
 * def flip_spin_of_solutions(unicode bc, int s, double a, int m, double omega, double la, double r, cpp_complex[double] R, cpp_complex[double] Rp):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] R0, RP0
 *     flip_spin_of_radial_teukolsky_TS(R0, RP0, str_to_bc(bc), s, m, a, omega, la, r, R, Rp)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_17flip_spin_of_solutions, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flip_spin_of_solutions, __pyx_t_1) < 0) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/radialsolver_wrap.pyx":88
 *         raise TypeError("{} is not a supported solution method.".format(method_str))
 * 
 * def teukolsky_starobinsky_transformation_amplitude(unicode bc, int s, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_amplitude(str_to_bc(bc), s, m, a, omega, lambdaCH)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_19teukolsky_starobinsky_transformation_amplitude, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_teukolsky_starobinsky_transforma, __pyx_t_1) < 0) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/radialsolver_wrap.pyx":91
 *     return teukolsky_starobinsky_amplitude(str_to_bc(bc), s, m, a, omega, lambdaCH)
 * 
 * def teukolsky_starobinsky_const(int j, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_complex_constant(j, m, a, omega, lambdaCH)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_21teukolsky_starobinsky_const, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_teukolsky_starobinsky_const, __pyx_t_1) < 0) __PYX_ERR(2, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/radialsolver_wrap.pyx":94
 *     return teukolsky_starobinsky_complex_constant(j, m, a, omega, lambdaCH)
 * 
 * def teukolsky_starobinsky_const_squared(int s, int m, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     return teukolsky_starobinsky_constant(s, m, a, omega, lambdaCH)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_23teukolsky_starobinsky_const_squared, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_teukolsky_starobinsky_const_squa, __pyx_t_1) < 0) __PYX_ERR(2, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":143
 * 
 * cdef dict gauge_dict = {
 *     "ORG" : Gauge.ORG,             # <<<<<<<<<<<<<<
 *     "IRG" : Gauge.IRG,
 *     "SAAB0" : Gauge.SAAB0,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__Gauge(ORG); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_ORG, __pyx_t_2) < 0) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":144
 * cdef dict gauge_dict = {
 *     "ORG" : Gauge.ORG,
 *     "IRG" : Gauge.IRG,             # <<<<<<<<<<<<<<
 *     "SAAB0" : Gauge.SAAB0,
 *     "SAAB4" : Gauge.SAAB4,
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__Gauge(IRG); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_IRG, __pyx_t_2) < 0) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":145
 *     "ORG" : Gauge.ORG,
 *     "IRG" : Gauge.IRG,
 *     "SAAB0" : Gauge.SAAB0,             # <<<<<<<<<<<<<<
 *     "SAAB4" : Gauge.SAAB4,
 *     "ASAAB0" : Gauge.ASAAB0,
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__Gauge(SAAB0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_SAAB0, __pyx_t_2) < 0) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":146
 *     "IRG" : Gauge.IRG,
 *     "SAAB0" : Gauge.SAAB0,
 *     "SAAB4" : Gauge.SAAB4,             # <<<<<<<<<<<<<<
 *     "ASAAB0" : Gauge.ASAAB0,
 *     "ASAAB4" : Gauge.ASAAB4,
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__Gauge(SAAB4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_SAAB4, __pyx_t_2) < 0) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":147
 *     "SAAB0" : Gauge.SAAB0,
 *     "SAAB4" : Gauge.SAAB4,
 *     "ASAAB0" : Gauge.ASAAB0,             # <<<<<<<<<<<<<<
 *     "ASAAB4" : Gauge.ASAAB4,
 *     # "SAAB" : Gauge.SAAB,
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__Gauge(ASAAB0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_ASAAB0, __pyx_t_2) < 0) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":148
 *     "SAAB4" : Gauge.SAAB4,
 *     "ASAAB0" : Gauge.ASAAB0,
 *     "ASAAB4" : Gauge.ASAAB4,             # <<<<<<<<<<<<<<
 *     # "SAAB" : Gauge.SAAB,
 *     # "ASAAB" : Gauge.ASAAB,
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__Gauge(ASAAB4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_ASAAB4, __pyx_t_2) < 0) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_11cybhpt_full_gauge_dict);
  __Pyx_DECREF_SET(__pyx_v_11cybhpt_full_gauge_dict, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":441
 *         }
 * 
 * def test_hertz_mode_cython(int j, int m, int k, int n, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *     test_hertz_mode(j, m, k, n, dereference(geo.geocpp))
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_25test_hertz_mode_cython, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_hertz_mode_cython, __pyx_t_1) < 0) __PYX_ERR(3, 441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":445
 * 
 * cdef dict basis_dict = {
 *     "tetrad": None,             # <<<<<<<<<<<<<<
 *     "coordinate": None
 * }
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_tetrad, Py_None) < 0) __PYX_ERR(3, 445, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":446
 * cdef dict basis_dict = {
 *     "tetrad": None,
 *     "coordinate": None             # <<<<<<<<<<<<<<
 * }
 * 
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_coordinate, Py_None) < 0) __PYX_ERR(3, 445, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_11cybhpt_full_basis_dict);
  __Pyx_DECREF_SET(__pyx_v_11cybhpt_full_basis_dict, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":449
 * }
 * 
 * def teuk_to_hertz_ORG(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_27teuk_to_hertz_ORG, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_teuk_to_hertz_ORG, __pyx_t_1) < 0) __PYX_ERR(3, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":455
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_IRG(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_29teuk_to_hertz_IRG, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_teuk_to_hertz_IRG, __pyx_t_1) < 0) __PYX_ERR(3, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":461
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_SAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_31teuk_to_hertz_SAAB, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_teuk_to_hertz_SAAB, __pyx_t_1) < 0) __PYX_ERR(3, 461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":467
 *     return (PsiIn, PsiUp)
 * 
 * def teuk_to_hertz_ASAAB(cpp_complex[double] ZIn, cpp_complex[double] ZUp, int j, int m, int k, double a, double omega, double lambdaCH):             # <<<<<<<<<<<<<<
 *     cdef cpp_complex[double] PsiIn
 *     cdef cpp_complex[double] PsiUp
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_33teuk_to_hertz_ASAAB, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_teuk_to_hertz_ASAAB, __pyx_t_1) < 0) __PYX_ERR(3, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":474
 * 
 * cdef dict metric_component_gauge_dict = {
 *     "ORG" : {             # <<<<<<<<<<<<<<
 *         (1, 1): None,
 *         (1, 3): None,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cython/teukolsky_wrap.pyx":475
 * cdef dict metric_component_gauge_dict = {
 *     "ORG" : {
 *         (1, 1): None,             # <<<<<<<<<<<<<<
 *         (1, 3): None,
 *         (1, 4): None,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__57, Py_None) < 0) __PYX_ERR(3, 475, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":476
 *     "ORG" : {
 *         (1, 1): None,
 *         (1, 3): None,             # <<<<<<<<<<<<<<
 *         (1, 4): None,
 *         (3, 3): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__58, Py_None) < 0) __PYX_ERR(3, 475, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":477
 *         (1, 1): None,
 *         (1, 3): None,
 *         (1, 4): None,             # <<<<<<<<<<<<<<
 *         (3, 3): None,
 *         (4, 4): None},
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__59, Py_None) < 0) __PYX_ERR(3, 475, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":478
 *         (1, 3): None,
 *         (1, 4): None,
 *         (3, 3): None,             # <<<<<<<<<<<<<<
 *         (4, 4): None},
 *     "IRG" : {
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__60, Py_None) < 0) __PYX_ERR(3, 475, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":479
 *         (1, 4): None,
 *         (3, 3): None,
 *         (4, 4): None},             # <<<<<<<<<<<<<<
 *     "IRG" : {
 *         (2, 2): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__61, Py_None) < 0) __PYX_ERR(3, 475, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_ORG, __pyx_t_2) < 0) __PYX_ERR(3, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":481
 *         (4, 4): None},
 *     "IRG" : {
 *         (2, 2): None,             # <<<<<<<<<<<<<<
 *         (2, 3): None,
 *         (2, 4): None,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__62, Py_None) < 0) __PYX_ERR(3, 481, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":482
 *     "IRG" : {
 *         (2, 2): None,
 *         (2, 3): None,             # <<<<<<<<<<<<<<
 *         (2, 4): None,
 *         (3, 3): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__63, Py_None) < 0) __PYX_ERR(3, 481, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":483
 *         (2, 2): None,
 *         (2, 3): None,
 *         (2, 4): None,             # <<<<<<<<<<<<<<
 *         (3, 3): None,
 *         (4, 4): None},
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__64, Py_None) < 0) __PYX_ERR(3, 481, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":484
 *         (2, 3): None,
 *         (2, 4): None,
 *         (3, 3): None,             # <<<<<<<<<<<<<<
 *         (4, 4): None},
 *     "SAAB0" : {
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__60, Py_None) < 0) __PYX_ERR(3, 481, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":485
 *         (2, 4): None,
 *         (3, 3): None,
 *         (4, 4): None},             # <<<<<<<<<<<<<<
 *     "SAAB0" : {
 *         (2, 2): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__61, Py_None) < 0) __PYX_ERR(3, 481, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_IRG, __pyx_t_2) < 0) __PYX_ERR(3, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":487
 *         (4, 4): None},
 *     "SAAB0" : {
 *         (2, 2): None,             # <<<<<<<<<<<<<<
 *         (2, 3): None,
 *         (2, 4): None,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__62, Py_None) < 0) __PYX_ERR(3, 487, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":488
 *     "SAAB0" : {
 *         (2, 2): None,
 *         (2, 3): None,             # <<<<<<<<<<<<<<
 *         (2, 4): None,
 *         (3, 3): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__63, Py_None) < 0) __PYX_ERR(3, 487, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":489
 *         (2, 2): None,
 *         (2, 3): None,
 *         (2, 4): None,             # <<<<<<<<<<<<<<
 *         (3, 3): None,
 *         (4, 4): None},
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__64, Py_None) < 0) __PYX_ERR(3, 487, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":490
 *         (2, 3): None,
 *         (2, 4): None,
 *         (3, 3): None,             # <<<<<<<<<<<<<<
 *         (4, 4): None},
 *     "SAAB4" : {
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__60, Py_None) < 0) __PYX_ERR(3, 487, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":491
 *         (2, 4): None,
 *         (3, 3): None,
 *         (4, 4): None},             # <<<<<<<<<<<<<<
 *     "SAAB4" : {
 *         (1, 1): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__61, Py_None) < 0) __PYX_ERR(3, 487, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_SAAB0, __pyx_t_2) < 0) __PYX_ERR(3, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":493
 *         (4, 4): None},
 *     "SAAB4" : {
 *         (1, 1): None,             # <<<<<<<<<<<<<<
 *         (1, 3): None,
 *         (1, 4): None,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__57, Py_None) < 0) __PYX_ERR(3, 493, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":494
 *     "SAAB4" : {
 *         (1, 1): None,
 *         (1, 3): None,             # <<<<<<<<<<<<<<
 *         (1, 4): None,
 *         (3, 3): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__58, Py_None) < 0) __PYX_ERR(3, 493, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":495
 *         (1, 1): None,
 *         (1, 3): None,
 *         (1, 4): None,             # <<<<<<<<<<<<<<
 *         (3, 3): None,
 *         (4, 4): None},
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__59, Py_None) < 0) __PYX_ERR(3, 493, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":496
 *         (1, 3): None,
 *         (1, 4): None,
 *         (3, 3): None,             # <<<<<<<<<<<<<<
 *         (4, 4): None},
 *     "ASAAB0" : {
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__60, Py_None) < 0) __PYX_ERR(3, 493, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":497
 *         (1, 4): None,
 *         (3, 3): None,
 *         (4, 4): None},             # <<<<<<<<<<<<<<
 *     "ASAAB0" : {
 *         (2, 2): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__61, Py_None) < 0) __PYX_ERR(3, 493, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_SAAB4, __pyx_t_2) < 0) __PYX_ERR(3, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":499
 *         (4, 4): None},
 *     "ASAAB0" : {
 *         (2, 2): None,             # <<<<<<<<<<<<<<
 *         (2, 3): None,
 *         (2, 4): None,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__62, Py_None) < 0) __PYX_ERR(3, 499, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":500
 *     "ASAAB0" : {
 *         (2, 2): None,
 *         (2, 3): None,             # <<<<<<<<<<<<<<
 *         (2, 4): None,
 *         (3, 3): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__63, Py_None) < 0) __PYX_ERR(3, 499, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":501
 *         (2, 2): None,
 *         (2, 3): None,
 *         (2, 4): None,             # <<<<<<<<<<<<<<
 *         (3, 3): None,
 *         (4, 4): None},
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__64, Py_None) < 0) __PYX_ERR(3, 499, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":502
 *         (2, 3): None,
 *         (2, 4): None,
 *         (3, 3): None,             # <<<<<<<<<<<<<<
 *         (4, 4): None},
 *     "ASAAB4" : {
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__60, Py_None) < 0) __PYX_ERR(3, 499, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":503
 *         (2, 4): None,
 *         (3, 3): None,
 *         (4, 4): None},             # <<<<<<<<<<<<<<
 *     "ASAAB4" : {
 *         (1, 1): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__61, Py_None) < 0) __PYX_ERR(3, 499, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_ASAAB0, __pyx_t_2) < 0) __PYX_ERR(3, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython/teukolsky_wrap.pyx":505
 *         (4, 4): None},
 *     "ASAAB4" : {
 *         (1, 1): None,             # <<<<<<<<<<<<<<
 *         (1, 3): None,
 *         (1, 4): None,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__57, Py_None) < 0) __PYX_ERR(3, 505, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":506
 *     "ASAAB4" : {
 *         (1, 1): None,
 *         (1, 3): None,             # <<<<<<<<<<<<<<
 *         (1, 4): None,
 *         (3, 3): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__58, Py_None) < 0) __PYX_ERR(3, 505, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":507
 *         (1, 1): None,
 *         (1, 3): None,
 *         (1, 4): None,             # <<<<<<<<<<<<<<
 *         (3, 3): None,
 *         (4, 4): None},
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__59, Py_None) < 0) __PYX_ERR(3, 505, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":508
 *         (1, 3): None,
 *         (1, 4): None,
 *         (3, 3): None,             # <<<<<<<<<<<<<<
 *         (4, 4): None},
 *     # "SAAB" : {
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__60, Py_None) < 0) __PYX_ERR(3, 505, __pyx_L1_error)

  /* "cython/teukolsky_wrap.pyx":509
 *         (1, 4): None,
 *         (3, 3): None,
 *         (4, 4): None},             # <<<<<<<<<<<<<<
 *     # "SAAB" : {
 *     #     (1, 1): None,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__61, Py_None) < 0) __PYX_ERR(3, 505, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_ASAAB4, __pyx_t_2) < 0) __PYX_ERR(3, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_11cybhpt_full_metric_component_gauge_dict);
  __Pyx_DECREF_SET(__pyx_v_11cybhpt_full_metric_component_gauge_dict, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":530
 * }
 * 
 * def metric_11(double a, double r, double z):             # <<<<<<<<<<<<<<
 *     cdef vector[double] rvec = vector[double](1)
 *     cdef vector[double] zvec = vector[double](1)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_35metric_11, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_metric_11, __pyx_t_1) < 0) __PYX_ERR(3, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":541
 *     return np.array(coeffs).squeeze()
 * 
 * def metric_coefficient_S4(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_ORG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_37metric_coefficient_S4, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_metric_coefficient_S4, __pyx_t_1) < 0) __PYX_ERR(3, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/teukolsky_wrap.pyx":544
 *     return metric_coefficient_ORG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 * def metric_coefficient_S0(int alpha, int beta, int nt, int nr, int nz, int np, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_IRG(alpha, beta, nt, nr, nz, np, a, r, z)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_39metric_coefficient_S0, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_metric_coefficient_S0, __pyx_t_1) < 0) __PYX_ERR(3, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/flux_wrap.pyx":119
 * 
 * 
 * def flux(int s, KerrGeodesic geo, TeukolskyMode teuk):             # <<<<<<<<<<<<<<
 *     cdef FluxListCPP fluxescpp = flux_mode(s, dereference(geo.geocpp), dereference(teuk.teukcpp), include_minus_m = 0)
 *     fluxes = FluxList()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_41flux, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flux, __pyx_t_1) < 0) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/redshift_wrap.pyx":39
 * 
 * 
 * def metric_coefficients_cython_ORG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_ORG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_43metric_coefficients_cython_ORG, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_metric_coefficients_cython_ORG, __pyx_t_1) < 0) __PYX_ERR(5, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/redshift_wrap.pyx":42
 *     return metric_coefficient_ORG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 * def metric_coefficients_cython_IRG(int ai, int bi, int nt, int nr, int nz, int nphi, double a, double r, double z):             # <<<<<<<<<<<<<<
 *     return metric_coefficient_IRG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_45metric_coefficients_cython_IRG, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_metric_coefficients_cython_IRG, __pyx_t_1) < 0) __PYX_ERR(5, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/redshift_wrap.pyx":45
 *     return metric_coefficient_IRG(ai, bi, nt, nr, nz, nphi, a, r, z)
 * 
 * def circular_redshift(unicode filename, unicode gauge, int lmax, KerrGeodesic geo):             # <<<<<<<<<<<<<<
 *     return redshift_circular(filename.encode(), str_to_gauge(gauge), lmax, dereference(geo.geocpp))
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_47circular_redshift, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_circular_redshift, __pyx_t_1) < 0) __PYX_ERR(5, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/redshift_wrap.pyx":48
 *     return redshift_circular(filename.encode(), str_to_gauge(gauge), lmax, dereference(geo.geocpp))
 * 
 * def run_tests():             # <<<<<<<<<<<<<<
 *     run_unit_tests()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_49run_tests, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_run_tests, __pyx_t_1) < 0) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MetricModeGenerator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11cybhpt_full_51__pyx_unpickle_MetricModeGenerator, NULL, __pyx_n_s_cybhpt_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_MetricModeGenerat, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython/redshift_wrap.pyx":1
 * from libcpp.vector cimport vector             # <<<<<<<<<<<<<<
 * from libcpp.complex cimport complex as cpp_complex
 * from cython.operator cimport dereference
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cybhpt_full", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cybhpt_full");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* SetItemInt */
  static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* UnpackUnboundCMethod */
  static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
  static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
  static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* BytesEquals */
  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
  static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
  static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* KeywordStringCheck */
  static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* HasAttr */
  static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetNameInClass */
  static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__Gauge(enum Gauge value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum Gauge neg_one = (enum Gauge) -1, const_zero = (enum Gauge) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum Gauge) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum Gauge) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum Gauge) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum Gauge) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum Gauge) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum Gauge),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE enum Gauge __Pyx_PyInt_As_enum__Gauge(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum Gauge neg_one = (enum Gauge) -1, const_zero = (enum Gauge) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum Gauge) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum Gauge, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum Gauge) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum Gauge) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum Gauge, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum Gauge) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum Gauge, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum Gauge) >= 2 * PyLong_SHIFT) {
                            return (enum Gauge) (((((enum Gauge)digits[1]) << PyLong_SHIFT) | (enum Gauge)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum Gauge) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum Gauge, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum Gauge) >= 3 * PyLong_SHIFT) {
                            return (enum Gauge) (((((((enum Gauge)digits[2]) << PyLong_SHIFT) | (enum Gauge)digits[1]) << PyLong_SHIFT) | (enum Gauge)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum Gauge) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum Gauge, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum Gauge) >= 4 * PyLong_SHIFT) {
                            return (enum Gauge) (((((((((enum Gauge)digits[3]) << PyLong_SHIFT) | (enum Gauge)digits[2]) << PyLong_SHIFT) | (enum Gauge)digits[1]) << PyLong_SHIFT) | (enum Gauge)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum Gauge) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum Gauge) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum Gauge, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum Gauge) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum Gauge, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum Gauge) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum Gauge, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum Gauge,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum Gauge) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum Gauge, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum Gauge) - 1 > 2 * PyLong_SHIFT) {
                            return (enum Gauge) (((enum Gauge)-1)*(((((enum Gauge)digits[1]) << PyLong_SHIFT) | (enum Gauge)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum Gauge) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum Gauge, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum Gauge) - 1 > 2 * PyLong_SHIFT) {
                            return (enum Gauge) ((((((enum Gauge)digits[1]) << PyLong_SHIFT) | (enum Gauge)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum Gauge) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum Gauge, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum Gauge) - 1 > 3 * PyLong_SHIFT) {
                            return (enum Gauge) (((enum Gauge)-1)*(((((((enum Gauge)digits[2]) << PyLong_SHIFT) | (enum Gauge)digits[1]) << PyLong_SHIFT) | (enum Gauge)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum Gauge) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum Gauge, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum Gauge) - 1 > 3 * PyLong_SHIFT) {
                            return (enum Gauge) ((((((((enum Gauge)digits[2]) << PyLong_SHIFT) | (enum Gauge)digits[1]) << PyLong_SHIFT) | (enum Gauge)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum Gauge) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum Gauge, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum Gauge) - 1 > 4 * PyLong_SHIFT) {
                            return (enum Gauge) (((enum Gauge)-1)*(((((((((enum Gauge)digits[3]) << PyLong_SHIFT) | (enum Gauge)digits[2]) << PyLong_SHIFT) | (enum Gauge)digits[1]) << PyLong_SHIFT) | (enum Gauge)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum Gauge) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum Gauge, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum Gauge) - 1 > 4 * PyLong_SHIFT) {
                            return (enum Gauge) ((((((((((enum Gauge)digits[3]) << PyLong_SHIFT) | (enum Gauge)digits[2]) << PyLong_SHIFT) | (enum Gauge)digits[1]) << PyLong_SHIFT) | (enum Gauge)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum Gauge) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum Gauge, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum Gauge) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum Gauge, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum Gauge val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum Gauge) -1;
        }
    } else {
        enum Gauge val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum Gauge) -1;
        val = __Pyx_PyInt_As_enum__Gauge(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum Gauge");
    return (enum Gauge) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum Gauge");
    return (enum Gauge) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__BoundaryCondition(enum BoundaryCondition value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum BoundaryCondition neg_one = (enum BoundaryCondition) -1, const_zero = (enum BoundaryCondition) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum BoundaryCondition) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum BoundaryCondition) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum BoundaryCondition) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum BoundaryCondition) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum BoundaryCondition) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum BoundaryCondition),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__SolutionMethod(enum SolutionMethod value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum SolutionMethod neg_one = (enum SolutionMethod) -1, const_zero = (enum SolutionMethod) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum SolutionMethod) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum SolutionMethod) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum SolutionMethod) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum SolutionMethod) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum SolutionMethod) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum SolutionMethod),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (Py_intptr_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (Py_intptr_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(Py_intptr_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            Py_intptr_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (Py_intptr_t) -1;
        }
    } else {
        Py_intptr_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (Py_intptr_t) -1;
        val = __Pyx_PyInt_As_Py_intptr_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to Py_intptr_t");
    return (Py_intptr_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to Py_intptr_t");
    return (Py_intptr_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE enum BoundaryCondition __Pyx_PyInt_As_enum__BoundaryCondition(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum BoundaryCondition neg_one = (enum BoundaryCondition) -1, const_zero = (enum BoundaryCondition) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum BoundaryCondition) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum BoundaryCondition) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum BoundaryCondition) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum BoundaryCondition) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum BoundaryCondition) >= 2 * PyLong_SHIFT) {
                            return (enum BoundaryCondition) (((((enum BoundaryCondition)digits[1]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum BoundaryCondition) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum BoundaryCondition) >= 3 * PyLong_SHIFT) {
                            return (enum BoundaryCondition) (((((((enum BoundaryCondition)digits[2]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[1]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum BoundaryCondition) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum BoundaryCondition) >= 4 * PyLong_SHIFT) {
                            return (enum BoundaryCondition) (((((((((enum BoundaryCondition)digits[3]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[2]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[1]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum BoundaryCondition) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum BoundaryCondition) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum BoundaryCondition, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum BoundaryCondition) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum BoundaryCondition, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum BoundaryCondition) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum BoundaryCondition,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum BoundaryCondition) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum BoundaryCondition) - 1 > 2 * PyLong_SHIFT) {
                            return (enum BoundaryCondition) (((enum BoundaryCondition)-1)*(((((enum BoundaryCondition)digits[1]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum BoundaryCondition) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum BoundaryCondition) - 1 > 2 * PyLong_SHIFT) {
                            return (enum BoundaryCondition) ((((((enum BoundaryCondition)digits[1]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum BoundaryCondition) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum BoundaryCondition) - 1 > 3 * PyLong_SHIFT) {
                            return (enum BoundaryCondition) (((enum BoundaryCondition)-1)*(((((((enum BoundaryCondition)digits[2]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[1]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum BoundaryCondition) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum BoundaryCondition) - 1 > 3 * PyLong_SHIFT) {
                            return (enum BoundaryCondition) ((((((((enum BoundaryCondition)digits[2]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[1]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum BoundaryCondition) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum BoundaryCondition) - 1 > 4 * PyLong_SHIFT) {
                            return (enum BoundaryCondition) (((enum BoundaryCondition)-1)*(((((((((enum BoundaryCondition)digits[3]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[2]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[1]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum BoundaryCondition) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum BoundaryCondition, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum BoundaryCondition) - 1 > 4 * PyLong_SHIFT) {
                            return (enum BoundaryCondition) ((((((((((enum BoundaryCondition)digits[3]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[2]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[1]) << PyLong_SHIFT) | (enum BoundaryCondition)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum BoundaryCondition) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum BoundaryCondition, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum BoundaryCondition) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum BoundaryCondition, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum BoundaryCondition val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum BoundaryCondition) -1;
        }
    } else {
        enum BoundaryCondition val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum BoundaryCondition) -1;
        val = __Pyx_PyInt_As_enum__BoundaryCondition(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum BoundaryCondition");
    return (enum BoundaryCondition) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum BoundaryCondition");
    return (enum BoundaryCondition) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE enum SolutionMethod __Pyx_PyInt_As_enum__SolutionMethod(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum SolutionMethod neg_one = (enum SolutionMethod) -1, const_zero = (enum SolutionMethod) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum SolutionMethod) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum SolutionMethod) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum SolutionMethod) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum SolutionMethod, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum SolutionMethod) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SolutionMethod) >= 2 * PyLong_SHIFT) {
                            return (enum SolutionMethod) (((((enum SolutionMethod)digits[1]) << PyLong_SHIFT) | (enum SolutionMethod)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum SolutionMethod) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SolutionMethod) >= 3 * PyLong_SHIFT) {
                            return (enum SolutionMethod) (((((((enum SolutionMethod)digits[2]) << PyLong_SHIFT) | (enum SolutionMethod)digits[1]) << PyLong_SHIFT) | (enum SolutionMethod)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum SolutionMethod) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SolutionMethod) >= 4 * PyLong_SHIFT) {
                            return (enum SolutionMethod) (((((((((enum SolutionMethod)digits[3]) << PyLong_SHIFT) | (enum SolutionMethod)digits[2]) << PyLong_SHIFT) | (enum SolutionMethod)digits[1]) << PyLong_SHIFT) | (enum SolutionMethod)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum SolutionMethod) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum SolutionMethod) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum SolutionMethod, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum SolutionMethod) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum SolutionMethod, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum SolutionMethod) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum SolutionMethod, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum SolutionMethod,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum SolutionMethod) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SolutionMethod) - 1 > 2 * PyLong_SHIFT) {
                            return (enum SolutionMethod) (((enum SolutionMethod)-1)*(((((enum SolutionMethod)digits[1]) << PyLong_SHIFT) | (enum SolutionMethod)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum SolutionMethod) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SolutionMethod) - 1 > 2 * PyLong_SHIFT) {
                            return (enum SolutionMethod) ((((((enum SolutionMethod)digits[1]) << PyLong_SHIFT) | (enum SolutionMethod)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum SolutionMethod) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SolutionMethod) - 1 > 3 * PyLong_SHIFT) {
                            return (enum SolutionMethod) (((enum SolutionMethod)-1)*(((((((enum SolutionMethod)digits[2]) << PyLong_SHIFT) | (enum SolutionMethod)digits[1]) << PyLong_SHIFT) | (enum SolutionMethod)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum SolutionMethod) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SolutionMethod) - 1 > 3 * PyLong_SHIFT) {
                            return (enum SolutionMethod) ((((((((enum SolutionMethod)digits[2]) << PyLong_SHIFT) | (enum SolutionMethod)digits[1]) << PyLong_SHIFT) | (enum SolutionMethod)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum SolutionMethod) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SolutionMethod) - 1 > 4 * PyLong_SHIFT) {
                            return (enum SolutionMethod) (((enum SolutionMethod)-1)*(((((((((enum SolutionMethod)digits[3]) << PyLong_SHIFT) | (enum SolutionMethod)digits[2]) << PyLong_SHIFT) | (enum SolutionMethod)digits[1]) << PyLong_SHIFT) | (enum SolutionMethod)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum SolutionMethod) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SolutionMethod, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SolutionMethod) - 1 > 4 * PyLong_SHIFT) {
                            return (enum SolutionMethod) ((((((((((enum SolutionMethod)digits[3]) << PyLong_SHIFT) | (enum SolutionMethod)digits[2]) << PyLong_SHIFT) | (enum SolutionMethod)digits[1]) << PyLong_SHIFT) | (enum SolutionMethod)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum SolutionMethod) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum SolutionMethod, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum SolutionMethod) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum SolutionMethod, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum SolutionMethod val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum SolutionMethod) -1;
        }
    } else {
        enum SolutionMethod val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum SolutionMethod) -1;
        val = __Pyx_PyInt_As_enum__SolutionMethod(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum SolutionMethod");
    return (enum SolutionMethod) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum SolutionMethod");
    return (enum SolutionMethod) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FromPy */
  static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
